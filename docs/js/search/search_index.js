var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/injectables/AnnounceJob.html",[0,0.23,1,2.217]],["body/injectables/AnnounceJob.html",[0,0.284,1,2.736,2,0.782,3,0.161,4,0.161,5,0.125,6,2.761,7,0.37,8,1.418,9,3.31,10,2.154,11,5.345,12,5.345,13,1.064,14,1.561,15,4.069,16,4.584,17,1.043,18,3.212,19,3.826,20,3.068,21,2.903,22,3.068,23,0.952,24,4.584,25,1.014,26,0.019,27,0.874,28,0.495,29,0.747,30,3.212,31,1.064,32,4.584,33,0.99,34,3.212,35,3.962,36,3.212,37,0.738,38,0.347,39,2.761,40,2.464,41,2.464,42,2.352,43,1.15,44,2.761,45,0.161,46,0.073,47,0.994,48,3.212,49,3.212,50,4.584,51,4.584,52,4.584,53,4.584,54,4.584,55,4.584,56,4.584,57,4.584,58,4.584,59,4.584,60,4.584,61,4.584,62,4.584,63,4.584,64,4.584,65,4.584,66,4.584,67,4.584,68,4.584,69,4.584,70,3.212,71,3.212,72,2.464,73,2.065,74,2.441,75,1.818,76,2.242,77,3.212,78,2.464,79,2.464,80,2.242,81,3.212,82,3.212,83,2.761,84,3.212,85,3.212,86,3.212,87,0.011,88,0.011]],["title/modules/AppModule.html",[89,0.949,90,2.593]],["body/modules/AppModule.html",[3,0.199,4,0.199,5,0.154,26,0.019,37,0.843,38,0.428,45,0.199,46,0.09,87,0.013,88,0.013,89,1.355,90,5.207,91,1.492,92,1.898,93,3.408,94,3.408,95,4.398,96,4.398,97,4.398,98,4.398,99,4.398,100,2.212,101,1.351,102,1.57,103,3.964,104,3.165,105,3.964,106,3.964,107,3.964,108,3.408,109,3.041,110,3.964,111,3.964,112,3.964,113,3.964,114,2.767,115,3.964,116,3.408,117,4.067,118,3.964,119,3.964,120,3.408,121,3.964,122,3.964,123,1.953,124,3.964,125,5.302,126,3.964,127,3.408,128,5.302,129,5.302,130,3.041,131,3.408,132,3.964]],["title/controllers/AuthController.html",[133,1.83,134,2.593]],["body/controllers/AuthController.html",[3,0.134,4,0.134,5,0.104,7,0.307,13,0.929,14,1.72,23,0.883,25,1.264,26,0.019,27,1.09,28,0.617,29,0.932,31,1.327,33,1.011,37,0.768,38,0.288,45,0.134,46,0.06,47,0.826,75,1.686,87,0.01,88,0.01,101,1.819,133,2.366,134,2.794,135,1.242,136,2.295,137,1.716,138,2.295,139,1.716,140,4.004,141,3.071,142,2.39,143,3.725,144,3.071,145,3.071,146,3.441,147,4.094,148,2.295,149,3.413,150,3.991,151,3.188,152,3.071,153,6.404,154,2.292,155,2.67,156,2.67,157,4.346,158,3.286,159,2.295,160,2.629,161,4.354,162,3.431,163,4.346,164,4.004,165,2.794,166,4.004,167,3.441,168,2.642,169,2.67,170,2.67,171,2.295,172,3.431,173,2.504,174,2.482,175,2.67,176,2.67,177,2.295,178,2.794,179,2.67,180,2.67,181,2.67,182,3.431,183,2.67,184,2.67,185,1.863,186,1.863,187,1.863,188,1.863,189,2.678,190,2.048,191,1.716,192,1.863,193,2.295,194,2.295,195,1.488,196,1.863,197,2.295,198,4.191,199,1.863,200,1.716,201,2.67,202,2.67,203,3.991,204,2.67,205,2.67,206,2.67,207,1.608,208,2.67,209,2.67,210,2.67,211,2.67,212,2.67,213,2.67,214,2.67,215,2.67,216,2.67,217,2.67,218,2.67,219,2.67,220,2.67,221,2.295]],["title/modules/AuthModule.html",[89,0.949,95,2.388]],["body/modules/AuthModule.html",[3,0.2,4,0.2,5,0.154,22,3.186,26,0.019,37,0.837,38,0.43,45,0.2,46,0.09,87,0.013,88,0.013,89,1.359,91,1.499,92,1.904,95,4.839,100,2.219,101,1.358,102,1.577,104,3.175,134,4.18,135,2.474,189,3.82,190,3.056,222,3.424,223,3.424,224,3.424,225,3.374,226,4.404,227,4.404,228,3.015,229,3.983,230,2.474,231,2.78,232,5.319,233,2.378,234,3.983,235,3.983,236,3.983,237,3.056,238,3.983,239,2.78,240,2.78,241,3.983,242,3.424,243,3.424,244,3.983,245,3.983,246,3.983]],["title/injectables/AuthService.html",[0,0.23,189,2.071]],["body/injectables/AuthService.html",[0,0.192,2,0.469,3,0.096,4,0.096,5,0.075,7,0.221,9,2.079,10,1.383,13,0.72,14,1.658,17,1.007,22,2.564,23,0.852,25,1.219,26,0.019,27,1.093,28,0.595,29,0.899,31,1.217,33,1.051,37,0.716,38,0.208,45,0.096,46,0.043,74,2.549,75,1.898,87,0.008,88,0.008,101,1.328,123,2.582,143,2.72,144,2.379,145,3.429,146,2.666,147,2.379,148,2.666,151,2.734,152,1.476,154,2.305,157,4.339,158,1.528,159,2.666,168,2.524,171,2.666,173,2.723,174,2.755,177,2.666,178,1.343,182,2.874,189,1.729,194,1.654,207,1.474,228,2.426,237,1.476,239,1.343,240,1.343,247,1.654,248,3.102,249,1.654,250,2.438,251,5.514,252,1.924,253,1.924,254,2.158,255,1.924,256,1.924,257,1.924,258,3.102,259,1.924,260,3.102,261,1.924,262,1.343,263,1.476,264,1.654,265,1.654,266,1.343,267,3.102,268,1.924,269,2.99,270,1.343,271,1.654,272,1.343,273,1.654,274,1.343,275,1.654,276,3.429,277,1.654,278,2.666,279,3.102,280,4.506,281,1.924,282,2.666,283,3.429,284,3.688,285,1.924,286,3.843,287,4.215,288,2.99,289,2.666,290,3.897,291,3.102,292,2.666,293,3.102,294,3.102,295,1.924,296,2.666,297,3.35,298,2.666,299,1.924,300,1.476,301,1.924,302,1.924,303,1.924,304,1.924,305,1.924,306,1.924,307,1.924,308,1.924,309,1.654,310,1.654,311,1.924,312,1.476,313,2.379,314,1.924,315,1.924,316,1.924,317,2.874,318,1.476,319,1.073,320,2.666,321,3.35,322,1.924,323,1.654,324,2.666,325,3.121,326,1.476,327,3.102,328,1.924,329,1.924,330,2.326,331,2.379,332,1.924,333,1.654,334,3.35,335,1.543,336,2.666,337,2.666,338,1.924,339,2.379,340,1.924,341,1.924,342,1.343,343,1.476,344,1.924,345,1.476,346,1.654,347,1.654,348,2.379,349,1.654,350,0.895,351,1.924,352,3.102,353,1.924,354,1.237,355,1.924]],["title/injectables/DiscordService.html",[0,0.23,19,2.217]],["body/injectables/DiscordService.html",[0,0.348,2,1.054,3,0.217,4,0.217,5,0.168,7,0.498,8,1.737,9,3.26,10,2.168,13,1.304,14,1.519,17,2.024,19,3.352,23,1.019,25,0.957,26,0.019,27,0.824,28,0.467,29,0.705,31,1.004,33,1.019,37,0.646,38,0.467,45,0.217,46,0.098,87,0.014,88,0.014,123,2.766,174,2.012,207,1.216,254,1.904,317,2.781,356,3.719,357,6.236,358,6.84,359,5.616,360,5.616,361,5.616,362,4.326,363,2.582,364,2.582,365,5.616,366,4.326,367,3.719,368,5.616,369,4.326,370,3.719,371,4.326,372,4.326,373,4.326,374,4.326]],["title/classes/EmailOptInDto.html",[46,0.084,375,2.593]],["body/classes/EmailOptInDto.html",[3,0.279,4,0.279,5,0.216,7,0.64,8,2.029,23,0.858,26,0.018,28,0.6,45,0.279,46,0.126,87,0.016,88,0.016,375,4.579,376,2.738,377,4.777,378,4.871,379,4.217,380,5.558]],["title/injectables/EmailService.html",[0,0.23,22,1.728]],["body/injectables/EmailService.html",[0,0.264,2,0.706,3,0.145,4,0.145,5,0.112,7,0.334,8,1.316,9,2.877,10,1.719,13,0.988,14,1.63,17,0.941,22,1.979,23,1.013,25,1.368,26,0.019,27,1.179,28,0.667,29,1.009,31,1.374,33,1.165,37,0.58,38,0.313,45,0.145,46,0.066,47,0.897,74,1.997,75,1.638,87,0.01,88,0.01,101,1.45,138,2.491,143,2.97,151,2.373,154,1.523,157,2.97,161,1.863,173,1.775,178,2.023,207,1.196,249,2.491,250,2.877,280,5.318,309,2.491,312,2.223,318,3.264,354,1.863,363,1.73,364,1.73,381,2.223,382,4.334,383,5.042,384,4.255,385,4.255,386,4.255,387,4.255,388,4.255,389,4.255,390,4.255,391,2.898,392,4.255,393,2.898,394,4.255,395,2.898,396,4.255,397,6.187,398,2.898,399,5.556,400,4.255,401,2.898,402,4.255,403,2.898,404,2.97,405,2.491,406,4.255,407,2.898,408,2.898,409,2.898,410,2.491,411,2.898,412,2.491,413,2.898,414,2.898,415,2.898,416,2.898,417,5.042,418,6.187,419,4.334,420,5.042,421,5.042,422,4.255,423,3.658,424,2.898,425,2.898,426,5.042,427,2.898,428,2.898,429,4.255,430,2.898,431,2.898,432,2.898,433,2.898,434,2.898]],["title/modules/EventModule.html",[89,0.949,96,2.388]],["body/modules/EventModule.html",[1,4.031,3,0.19,4,0.19,5,0.147,19,4.031,22,3.141,26,0.019,37,0.837,38,0.409,39,3.26,44,3.26,45,0.19,46,0.086,87,0.012,88,0.012,89,1.315,91,1.427,92,1.842,96,4.917,100,2.147,101,1.292,102,1.502,104,3.072,225,3.326,230,2.393,435,3.26,436,3.26,437,3.26,438,4.031,439,3.533,440,3.533,441,3.765,442,4.341,443,4.341,444,3.792,445,3.792,446,3.792,447,3.792,448,3.792,449,3.792,450,3.792,451,3.792,452,3.792]],["title/injectables/GravatarService.html",[0,0.23,453,2.217]],["body/injectables/GravatarService.html",[0,0.37,2,1.16,3,0.239,4,0.239,5,0.185,7,0.548,10,1.473,13,1.386,17,1.545,23,0.922,25,1.32,26,0.019,27,1.138,28,0.644,29,0.973,31,1.105,33,1.088,37,0.687,38,0.514,45,0.239,46,0.108,47,1.473,74,2.364,87,0.014,88,0.014,168,2.095,207,1.338,228,3.163,453,3.563,454,4.092,455,5.97,456,4.761,457,4.761,458,5.97,459,4.761,460,4.761,461,4.761,462,4.761,463,4.092,464,4.761,465,4.761]],["title/modules/HistoryDBModule.html",[89,0.949,438,2.217]],["body/modules/HistoryDBModule.html",[3,0.244,4,0.244,5,0.188,26,0.018,37,0.758,38,0.524,45,0.244,46,0.11,87,0.015,88,0.015,89,1.545,91,1.828,92,2.164,100,2.522,101,1.656,102,1.924,230,2.812,438,4.456,466,4.176,467,4.176,468,4.176,469,4.234,470,2.462,471,4.858,472,3.886,473,4.858,474,2.259]],["title/injectables/HistoryDBService.html",[0,0.23,469,2.071]],["body/injectables/HistoryDBService.html",[0,0.34,2,1.017,3,0.209,4,0.209,5,0.162,7,0.48,10,1.291,13,1.274,14,1.769,17,1.355,23,1.005,25,1.355,26,0.019,27,1.168,28,0.661,29,0.999,31,1.423,33,0.947,37,0.705,38,0.45,43,1.494,45,0.209,46,0.094,47,1.291,75,1.807,87,0.013,88,0.013,207,1.723,254,2.697,335,2.172,469,3.059,470,2.219,474,1.941,475,3.588,476,3.275,477,4.185,478,2.683,479,4.174,480,2.556,481,3.829,482,5.268,483,4.174,484,4.174,485,4.716,486,4.174,487,2.288,488,4.174,489,4.174,490,4.174,491,2.683]],["title/injectables/HistoryJob.html",[0,0.23,442,2.388]],["body/injectables/HistoryJob.html",[0,0.325,2,0.95,3,0.195,4,0.195,5,0.151,7,0.449,9,2.755,10,1.96,13,1.217,14,1.443,15,4.422,17,1.266,20,3.235,21,2.996,23,0.81,25,0.862,26,0.019,27,0.743,28,0.421,29,0.636,31,0.905,33,0.81,37,0.801,38,0.421,40,2.991,41,2.991,42,2.607,43,1.396,45,0.195,46,0.088,47,1.206,72,2.991,73,2.506,74,2.509,75,2.008,76,2.722,78,2.991,79,2.991,83,3.352,87,0.013,88,0.013,114,2.722,149,2.327,319,2.174,335,1.544,442,3.371,469,3.879,480,1.626,482,3.352,487,1.626,492,3.352,493,2.722,494,3.235,495,3.899,496,3.66,497,3.899,498,3.899,499,3.352,500,3.899,501,3.899,502,5.244,503,2.991,504,2.722,505,3.899,506,3.899,507,3.899,508,3.899,509,3.352]],["title/injectables/JwtAuthGuard.html",[0,0.23,510,2.217]],["body/injectables/JwtAuthGuard.html",[0,0.406,2,1.349,3,0.278,4,0.278,5,0.215,26,0.018,37,0.754,38,0.598,45,0.278,46,0.125,87,0.016,88,0.016,233,3.306,510,3.908,511,4.761,512,4.761,513,4.761,514,3.561,515,5.539]],["title/injectables/JwtStrategy.html",[0,0.23,226,2.388]],["body/injectables/JwtStrategy.html",[0,0.365,2,1.134,3,0.233,4,0.233,5,0.18,7,0.536,13,1.366,14,1.572,17,2.095,23,0.909,25,1.029,26,0.019,27,0.887,28,0.502,29,0.759,31,1.08,37,0.781,38,0.502,45,0.233,46,0.105,87,0.014,88,0.014,158,2.899,160,2.292,165,3.248,191,2.992,207,1.308,226,3.783,233,2.778,243,4,298,4,354,2.992,514,2.992,516,4,517,5.059,518,4.654,519,5.885,520,4.654,521,4.654,522,4,523,3.57,524,4,525,4,526,4,527,4.654,528,4.654,529,4.654,530,4.654,531,2.778,532,4.654]],["title/interfaces/JwtUser.html",[160,1.83,533,1.943]],["body/interfaces/JwtUser.html",[3,0.279,4,0.279,5,0.216,7,0.64,8,2.029,26,0.018,28,0.6,33,1.078,45,0.279,87,0.016,88,0.016,160,3.231,531,4.304,533,2.908,534,3.879,535,4.777]],["title/injectables/LocalAuthGuard.html",[0,0.23,187,2.593]],["body/injectables/LocalAuthGuard.html",[0,0.406,2,1.354,3,0.279,4,0.279,5,0.216,26,0.018,37,0.755,38,0.6,45,0.279,46,0.126,87,0.016,88,0.016,187,4.579,233,3.317,513,4.777,514,3.573,536,4.777,537,5.558]],["title/injectables/LocalStrategy.html",[0,0.23,227,2.388]],["body/injectables/LocalStrategy.html",[0,0.352,2,1.073,3,0.221,4,0.221,5,0.171,7,0.507,13,1.319,14,1.532,17,1.431,23,0.878,25,1.257,26,0.019,27,1.083,28,0.613,29,0.927,31,1.023,33,1.088,37,0.765,38,0.475,45,0.221,46,0.1,47,1.363,74,1.745,75,1.299,87,0.014,88,0.014,154,2.252,158,2.8,168,1.939,173,2.772,174,2.049,189,3.928,190,3.38,207,1.239,227,3.654,233,2.63,284,2.833,514,2.833,517,4.885,522,3.788,523,3.38,524,3.788,525,3.788,526,3.788,538,3.788,539,4.407,540,4.407,541,5.684,542,4.407,543,3.788,544,5.684,545,4.407]],["title/injectables/LoggerMiddleware.html",[0,0.23,546,2.85]],["body/injectables/LoggerMiddleware.html",[0,0.377,2,1.194,3,0.246,4,0.246,5,0.19,7,0.564,13,1.411,23,0.757,25,1.084,26,0.019,27,0.934,28,0.529,29,0.799,31,1.138,37,0.564,38,0.529,45,0.246,46,0.111,87,0.015,88,0.015,161,3.151,546,4.663,547,4.213,548,4.243,549,6.079,550,6.609,551,5.3,552,6.609,553,4.901,554,4.901,555,4.213,556,6.079,557,4.213,558,6.609,559,4.901,560,4.901]],["title/classes/LoginDto.html",[46,0.084,162,2.388]],["body/classes/LoginDto.html",[3,0.27,4,0.27,5,0.209,7,0.621,8,1.994,23,0.995,26,0.018,28,0.695,33,1.103,45,0.27,46,0.122,87,0.016,88,0.016,162,4.143,168,3.033,173,2.875,376,2.658,561,4.638,562,5.395,563,5.395]],["title/controllers/MovieController.html",[133,1.83,564,2.593]],["body/controllers/MovieController.html",[3,0.124,4,0.124,5,0.096,7,0.286,10,0.768,13,0.879,14,1.735,23,0.902,25,1.016,26,0.019,27,0.876,28,0.496,29,0.749,31,1.355,33,0.991,35,3.306,37,0.766,38,0.268,42,3.152,43,0.889,45,0.124,46,0.056,47,0.768,75,1.722,87,0.009,88,0.009,133,2.264,135,1.154,137,1.595,139,1.595,141,4.803,142,2.262,149,3.485,150,4.075,154,2.297,158,3.325,160,2.991,163,3.208,185,1.732,186,1.732,188,1.732,191,1.595,192,1.732,195,1.384,196,1.732,198,4.239,199,1.732,200,1.595,203,4.075,207,1.641,300,1.904,330,2.262,335,1.82,342,4.569,476,2.262,487,2.85,510,1.481,564,2.645,565,2.133,566,3.789,567,5.143,568,4.421,569,3.789,570,4.421,571,3.789,572,2.482,573,3.789,574,3.257,575,4.075,576,2.482,577,2.482,578,3.054,579,2.482,580,2.482,581,4.249,582,2.482,583,2.482,584,2.482,585,3.257,586,3.789,587,2.482,588,2.482,589,2.482,590,2.482,591,2.482,592,3.789,593,3.525,594,2.133,595,2.482,596,1.223,597,3.945,598,2.743,599,2.133,600,1.904,601,1.595,602,2.133,603,1.595,604,2.133,605,1.595,606,2.906,607,1.595,608,2.482,609,2.482,610,2.482,611,2.482,612,2.482,613,2.482,614,2.482,615,2.482,616,3.525,617,2.133,618,2.482,619,2.482,620,2.133,621,2.482,622,3.257,623,2.482,624,2.133,625,2.133,626,2.482,627,2.482]],["title/modules/MovieDBModule.html",[89,0.949,439,1.943]],["body/modules/MovieDBModule.html",[3,0.244,4,0.244,5,0.188,21,3.341,26,0.018,37,0.758,38,0.524,45,0.244,46,0.11,87,0.015,88,0.015,89,1.545,91,1.828,92,2.164,100,2.522,101,1.656,102,1.924,230,2.812,439,3.906,470,2.462,472,3.886,474,2.259,628,4.176,629,4.176,630,4.176,631,4.858,632,4.858]],["title/injectables/MovieDBService.html",[0,0.23,21,1.635]],["body/injectables/MovieDBService.html",[0,0.271,2,0.733,3,0.151,4,0.151,5,0.117,7,0.346,10,0.931,13,1.015,14,1.823,17,0.977,21,1.924,23,1.044,25,1.466,26,0.019,27,1.263,28,0.715,29,1.081,31,1.538,33,1.086,37,0.593,38,0.325,43,1.077,45,0.151,46,0.068,47,0.931,75,1.954,87,0.011,88,0.011,207,1.863,254,2.916,335,1.732,350,2.915,470,1.927,474,1.399,476,2.61,477,3.635,478,1.934,480,2.149,481,3.052,485,3.759,487,2.764,491,1.934,596,2.154,633,2.586,634,4.373,635,4.373,636,4.373,637,3.008,638,4.428,639,3.008,640,3.354,641,3.008,642,4.373,643,3.008,644,3.635,645,3.759,646,3.008,647,3.008,648,4.373,649,3.008,650,4.373,651,3.008,652,3.008,653,4.373,654,4.373,655,3.008,656,3.354,657,3.008,658,3.008,659,3.008,660,2.586]],["title/interfaces/MovieExtType.html",[533,1.943,601,2.388]],["body/interfaces/MovieExtType.html",[3,0.224,4,0.224,5,0.174,7,0.515,8,1.776,26,0.018,28,0.794,33,1.174,45,0.224,87,0.014,88,0.014,319,3.728,350,3.422,487,2.789,504,4.667,533,2.343,534,3.126,593,5.129,601,3.691,656,5.129,661,3.849,662,5.748,663,5.748,664,3.991,665,5.748,666,5.449]],["title/modules/MovieModule.html",[89,0.949,97,2.388]],["body/modules/MovieModule.html",[3,0.198,4,0.198,5,0.153,26,0.019,37,0.835,38,0.426,45,0.198,46,0.089,87,0.013,88,0.013,89,1.351,91,1.485,92,1.892,97,4.893,100,2.205,101,1.345,102,1.562,104,3.155,135,2.458,225,3.365,230,2.458,231,2.754,438,4.078,439,3.574,440,3.574,441,3.809,470,2.328,564,4.16,598,4.078,599,3.392,667,3.392,668,3.946,669,3.392,670,3.574,671,3.946,672,3.946,673,3.392,674,3.027,675,3.027,676,3.392,677,3.946,678,3.392]],["title/injectables/MovieService.html",[0,0.23,598,2.217]],["body/injectables/MovieService.html",[0,0.191,2,0.464,3,0.095,4,0.095,5,0.074,7,0.219,8,0.952,9,2.882,10,1.954,13,0.714,14,1.655,17,0.618,20,2.553,21,2.296,23,0.912,25,0.983,26,0.019,27,0.847,28,0.526,29,0.725,31,1.211,33,0.976,35,2.488,37,0.739,38,0.205,42,2.597,43,0.682,45,0.095,46,0.043,47,0.589,74,2.501,75,2.019,76,2.147,80,1.329,87,0.007,88,0.007,123,0.938,154,1.591,168,1.354,174,2.745,195,1.715,196,1.329,207,1.704,250,2.553,254,2.296,262,1.329,263,1.46,265,1.636,266,1.329,276,1.46,283,1.46,284,3.794,297,1.636,300,1.46,313,2.359,317,1.224,319,2.158,325,1.329,326,2.359,330,2.31,331,1.46,336,1.636,339,2.359,350,2.067,363,1.136,364,1.136,469,2.478,477,2.857,480,0.794,487,2.384,491,1.224,493,1.329,494,2.553,503,2.969,504,2.701,509,1.636,531,2.652,568,3.82,570,3.82,575,1.329,578,2.025,581,1.46,593,2.969,596,1.515,598,1.836,601,1.977,602,1.636,603,1.977,604,1.636,605,1.224,606,3.742,607,1.224,638,1.636,640,2.359,645,2.644,656,4.527,662,1.636,663,2.644,664,2.31,665,2.644,670,2.872,676,1.636,679,1.636,680,3.327,681,3.076,682,3.87,683,3.076,684,1.904,685,1.904,686,1.904,687,1.904,688,1.904,689,3.076,690,1.904,691,2.969,692,1.904,693,3.076,694,1.46,695,1.46,696,1.904,697,1.636,698,1.46,699,1.904,700,1.904,701,1.904,702,1.904,703,1.904,704,3.327,705,3.076,706,1.904,707,1.904,708,2.644,709,1.904,710,4.444,711,3.076,712,3.076,713,1.904,714,1.904,715,1.904,716,1.329,717,1.904,718,1.904,719,1.904,720,1.904,721,4.444,722,1.904,723,1.904,724,3.076,725,1.636,726,1.904,727,1.46,728,1.46,729,1.636,730,1.904,731,1.636,732,1.904,733,1.904,734,1.904,735,1.904,736,1.46,737,1.904,738,1.904,739,1.904,740,1.904,741,1.904,742,1.904,743,1.904,744,1.636,745,1.904,746,1.904,747,1.904,748,1.904,749,1.904,750,1.904,751,1.636,752,1.636,753,1.904,754,1.904,755,1.904,756,1.904,757,1.46,758,1.904,759,1.904,760,1.904]],["title/classes/PasswordDto.html",[46,0.084,172,2.388]],["body/classes/PasswordDto.html",[3,0.269,4,0.269,5,0.208,7,0.617,8,1.986,23,0.992,26,0.018,28,0.693,29,1.047,33,1.1,45,0.269,46,0.121,87,0.016,88,0.016,172,4.127,173,2.867,376,2.64,761,4.608,762,5.272,763,5.36,764,5.36]],["title/classes/PasswordNewDto.html",[46,0.084,765,2.593]],["body/classes/PasswordNewDto.html",[3,0.261,4,0.261,5,0.202,7,0.6,8,1.952,23,1.049,26,0.018,28,0.732,29,1.029,33,1.135,45,0.261,46,0.118,87,0.015,88,0.015,173,2.832,376,2.566,762,5.208,765,4.405,766,4.477,767,5.836,768,5.209,769,5.209,770,5.209]],["title/injectables/PasswordService.html",[0,0.23,228,1.635]],["body/injectables/PasswordService.html",[0,0.346,2,1.046,3,0.215,4,0.215,5,0.166,7,0.494,13,1.297,14,1.704,23,0.96,25,1.374,26,0.019,27,1.184,28,0.67,29,1.013,31,1.442,33,1.169,37,0.643,38,0.463,45,0.215,46,0.097,74,1.7,87,0.014,88,0.014,158,3.241,173,2.331,207,1.747,228,2.459,463,6.013,771,3.293,772,5.588,773,5.588,774,5.588,775,4.293,776,5.588,777,4.293,778,5.588,779,4.293,780,2.996,781,3.69,782,4.293,783,3.69,784,4.293,785,4.293,786,3.69,787,4.293,788,4.293]],["title/injectables/PrismaService.html",[0,0.23,470,1.266]],["body/injectables/PrismaService.html",[0,0.367,2,1.143,3,0.235,4,0.235,5,0.182,7,0.54,13,1.373,14,1.771,23,0.914,25,1.038,26,0.019,27,0.894,28,0.506,29,0.765,31,1.373,37,0.681,38,0.506,43,1.68,45,0.235,46,0.106,75,1.745,87,0.014,88,0.014,470,2.016,514,3.803,557,4.034,789,4.034,790,6.48,791,5.917,792,7.161,793,5.917,794,6.803,795,4.693,796,3.6,797,4.693,798,4.693,799,4.693,800,4.693]],["title/classes/ProfileDto.html",[46,0.084,801,2.388]],["body/classes/ProfileDto.html",[3,0.269,4,0.269,5,0.208,7,0.617,8,1.986,23,0.992,26,0.018,27,1.31,28,0.693,29,1.047,33,0.992,45,0.269,46,0.121,87,0.016,88,0.016,376,2.64,379,4.127,801,4.127,802,4.608,803,5.908,804,5.36,805,5.36]],["title/classes/RegisterDto.html",[46,0.084,182,2.388]],["body/classes/RegisterDto.html",[3,0.254,4,0.254,5,0.196,7,0.583,8,1.919,23,1.08,26,0.018,27,1.278,28,0.754,29,1.012,33,1.152,45,0.254,46,0.115,87,0.015,88,0.015,168,2.951,173,2.798,182,3.988,376,2.495,762,5.144,806,4.354,807,5.066,808,5.066,809,5.066,810,5.066]],["title/classes/ResDto.html",[46,0.084,195,2.071]],["body/classes/ResDto.html",[3,0.269,4,0.269,5,0.208,7,0.617,8,1.986,23,0.992,26,0.018,28,0.693,29,1.047,33,0.992,45,0.269,46,0.121,87,0.016,88,0.016,195,3.58,317,4.418,325,4.797,376,2.64,379,4.127,811,4.608,812,5.36,813,5.36]],["title/controllers/UserController.html",[133,1.83,814,2.593]],["body/controllers/UserController.html",[3,0.104,4,0.104,5,0.08,7,0.238,10,0.64,13,0.764,14,1.762,23,0.937,25,1.303,26,0.019,27,1.185,28,0.636,29,0.961,31,1.409,33,0.632,37,0.744,38,0.223,45,0.104,46,0.047,47,0.64,75,1.737,87,0.008,88,0.008,123,1.02,133,2.016,135,0.963,137,1.331,139,1.331,141,2.523,142,1.963,149,3.623,150,4.237,151,1.154,154,2.57,158,3.064,160,3.488,161,4.551,162,2.997,163,4.342,167,2.827,168,1.447,172,2.997,173,0.863,185,1.445,186,1.445,188,1.445,191,1.331,192,1.445,193,1.779,195,1.154,196,1.445,197,1.779,198,4.342,199,1.445,200,1.331,203,4.237,207,1.706,221,3.518,254,2.052,288,2.523,335,1.846,342,2.296,375,3.254,378,3.254,510,1.236,585,2.827,596,2.668,597,4.656,600,1.588,616,4.52,644,2.631,765,3.254,801,2.997,814,2.296,815,1.779,816,2.827,817,2.827,818,4.662,819,3.289,820,3.289,821,3.289,822,2.07,823,5.065,824,2.07,825,2.07,826,2.07,827,2.07,828,2.07,829,2.827,830,2.07,831,2.07,832,2.07,833,2.07,834,2.07,835,2.07,836,3.289,837,2.07,838,2.07,839,2.07,840,2.07,841,2.07,842,2.07,843,3.289,844,2.07,845,2.07,846,2.07,847,3.289,848,2.07,849,2.07,850,2.07,851,2.296,852,2.07,853,2.07,854,2.443,855,1.779,856,1.779,857,2.07,858,2.07,859,2.07,860,2.07,861,2.07,862,2.07,863,2.07,864,2.07,865,2.07,866,2.07,867,2.07,868,2.07,869,2.07,870,2.07,871,2.07,872,2.07,873,2.07,874,2.07,875,2.07,876,2.07,877,2.07,878,2.07,879,2.07,880,2.07,881,2.07,882,2.07,883,2.07,884,1.779,885,2.07,886,2.07,887,2.07,888,2.07]],["title/modules/UserDBModule.html",[89,0.949,225,1.83]],["body/modules/UserDBModule.html",[3,0.235,4,0.235,5,0.182,26,0.019,37,0.782,38,0.505,45,0.235,46,0.106,87,0.014,88,0.014,89,1.509,91,1.761,92,2.114,100,2.464,101,1.595,102,1.853,225,3.703,228,3.149,230,2.747,250,3.514,470,2.439,472,3.797,474,2.176,889,4.023,890,4.023,891,4.023,892,4.68,893,4.68,894,4.023]],["title/injectables/UserDBService.html",[0,0.23,250,1.728]],["body/injectables/UserDBService.html",[0,0.278,2,0.759,3,0.156,4,0.156,5,0.121,7,0.359,9,1.449,10,1.388,13,1.041,14,1.814,17,1.011,23,1.033,25,1.403,26,0.019,27,1.209,28,0.722,29,1.034,31,1.518,33,0.812,37,0.662,38,0.336,43,1.115,45,0.156,46,0.07,47,0.964,74,1.234,75,1.323,87,0.011,88,0.011,123,1.535,154,1.115,158,3.545,168,1.974,207,1.838,228,2.877,250,2.086,333,3.855,335,2.412,378,2.175,470,1.959,474,1.449,477,3.695,478,2.003,480,2.192,491,2.003,596,2.209,731,4.517,823,3.855,894,2.678,895,2.678,896,5.749,897,4.485,898,3.116,899,4.485,900,3.116,901,4.485,902,5.62,903,3.116,904,3.116,905,3.116,906,5.255,907,3.116,908,3.116,909,4.485,910,3.116,911,4.485,912,4.485,913,3.116,914,4.485,915,3.116,916,3.116,917,4.485,918,3.116,919,3.116,920,3.116,921,2.678,922,3.116,923,3.116]],["title/modules/UserModule.html",[89,0.949,98,2.388]],["body/modules/UserModule.html",[3,0.198,4,0.198,5,0.153,22,3.177,26,0.019,37,0.835,38,0.426,45,0.198,46,0.089,87,0.013,88,0.013,89,1.351,91,1.485,92,1.892,98,4.893,100,2.205,101,1.345,102,1.562,104,3.155,135,2.458,225,3.365,228,3.006,230,2.458,231,2.754,239,2.754,240,2.754,439,3.574,440,3.574,441,3.809,453,4.078,674,3.027,675,3.027,678,3.392,814,4.16,854,4.078,855,3.392,924,3.392,925,3.946,926,3.392,927,3.946,928,3.946,929,3.392]],["title/injectables/UserService.html",[0,0.23,854,2.217]],["body/injectables/UserService.html",[0,0.165,2,0.389,3,0.08,4,0.08,5,0.062,7,0.184,9,2.23,10,1.573,13,0.618,14,1.67,17,0.518,20,2.365,21,2.11,22,2.365,23,0.855,25,1.224,26,0.019,27,1.185,28,0.597,29,0.902,31,1.237,33,0.975,35,1.711,37,0.716,38,0.172,42,0.702,43,0.571,45,0.08,46,0.036,47,0.494,74,2.463,75,2.033,76,1.114,87,0.006,88,0.006,123,2.362,143,1.114,145,1.224,151,2.475,152,3.064,154,2.227,157,1.858,168,1.506,173,2.669,174,2.789,207,1.556,228,2.238,239,1.114,240,1.114,250,2.365,254,2.345,262,1.114,263,1.224,266,1.114,269,2.626,270,1.114,271,1.372,272,1.114,273,1.372,274,1.114,275,1.372,276,3.902,277,2.288,278,2.942,282,1.372,283,1.224,284,3.426,286,2.942,287,1.372,289,1.372,296,2.288,312,1.224,317,2.854,318,1.224,319,0.89,320,1.372,321,3.434,325,3.098,330,0.953,334,3.434,335,2.014,343,2.042,345,1.224,346,1.372,347,2.288,348,2.042,349,2.288,350,3.207,354,1.711,378,2.389,379,2.2,453,3.036,480,0.666,493,1.114,494,2.365,531,3.579,548,1.114,551,2.042,578,1.791,596,1.686,644,4.284,664,2.043,694,1.224,695,1.224,697,1.372,716,1.114,728,1.224,751,1.372,752,1.372,767,2.942,801,2.568,803,2.288,816,2.288,817,2.288,851,1.114,854,1.589,856,1.372,884,1.372,921,1.372,929,1.372,930,1.372,931,2.661,932,2.661,933,2.661,934,1.596,935,2.661,936,3.423,937,1.596,938,2.661,939,1.596,940,2.661,941,4.439,942,1.596,943,2.661,944,1.596,945,2.661,946,3.995,947,1.596,948,2.661,949,1.596,950,2.661,951,1.596,952,2.661,953,1.596,954,3.423,955,2.661,956,1.596,957,1.596,958,1.596,959,4.795,960,1.224,961,1.224,962,1.372,963,1.596,964,2.661,965,1.596,966,1.596,967,1.596,968,2.661,969,2.661,970,1.596,971,1.596,972,3.423,973,1.596,974,1.596,975,1.596,976,1.596,977,2.288,978,2.288,979,1.596,980,1.596,981,1.596,982,2.661,983,1.596,984,2.661,985,1.596,986,1.596,987,1.596,988,1.596,989,1.596,990,1.596,991,1.596,992,1.596,993,1.596,994,1.596]],["title/controllers/VoteController.html",[133,1.83,995,2.593]],["body/controllers/VoteController.html",[3,0.154,4,0.154,5,0.119,7,0.354,10,0.951,13,1.031,14,1.72,23,0.882,25,1.264,26,0.019,27,1.089,28,0.616,29,0.932,31,1.326,33,1.049,37,0.75,38,0.332,42,2.296,43,1.101,45,0.154,46,0.07,47,0.951,87,0.011,88,0.011,133,2.57,135,1.43,137,1.977,139,1.977,142,2.652,149,3.411,150,3.988,154,2.432,158,3.284,160,3.398,163,3.641,185,2.147,186,2.147,188,2.147,191,1.977,192,2.147,198,4.23,199,2.147,200,1.977,203,3.988,207,1.606,342,3.101,350,2.066,487,2.781,510,1.836,578,2.324,594,2.643,596,2.57,597,4.383,600,2.359,605,4.06,616,4.002,617,2.643,620,2.643,622,3.819,624,3.819,625,2.643,664,2.652,670,2.729,995,3.101,996,2.643,997,4.443,998,3.819,999,4.443,1000,4.912,1001,3.075,1002,3.075,1003,3.075,1004,3.075,1005,4.443,1006,3.408,1007,3.075,1008,3.075,1009,3.075,1010,3.075,1011,3.075,1012,3.075,1013,3.075,1014,2.643,1015,3.075,1016,3.075,1017,3.075,1018,3.075,1019,3.075,1020,3.075,1021,3.075,1022,3.075,1023,3.075,1024,3.075]],["title/modules/VoteDBModule.html",[89,0.949,440,1.943]],["body/modules/VoteDBModule.html",[3,0.244,4,0.244,5,0.188,26,0.018,37,0.758,38,0.524,45,0.244,46,0.11,87,0.015,88,0.015,89,1.545,91,1.828,92,2.164,100,2.522,101,1.656,102,1.924,230,2.812,440,3.906,470,2.462,472,3.886,474,2.259,494,3.531,1025,4.176,1026,4.176,1027,4.176,1028,4.858,1029,4.858]],["title/injectables/VoteDBService.html",[0,0.23,494,1.728]],["body/injectables/VoteDBService.html",[0,0.229,2,0.585,3,0.12,4,0.12,5,0.093,7,0.277,10,0.743,13,0.858,14,1.821,17,0.78,23,1.035,25,1.482,26,0.019,27,1.277,28,0.723,29,1.093,31,1.533,33,0.982,37,0.518,38,0.259,42,1.982,43,0.86,45,0.12,46,0.054,47,0.743,75,1.947,87,0.009,88,0.009,123,2.218,154,1.81,207,1.856,254,2.906,335,2.282,350,3.116,470,1.723,474,1.117,476,2.206,478,1.545,480,1.879,481,2.58,487,2.795,494,1.719,531,2.206,596,1.821,644,4.172,660,3.871,902,3.871,1030,2.065,1031,3.696,1032,3.696,1033,3.696,1034,3.696,1035,3.696,1036,3.177,1037,3.696,1038,2.403,1039,3.871,1040,2.403,1041,3.696,1042,4.954,1043,2.403,1044,3.696,1045,2.403,1046,3.696,1047,2.403,1048,3.696,1049,2.403,1050,3.696,1051,2.403,1052,3.696,1053,3.696,1054,2.403,1055,3.696,1056,2.403,1057,3.177,1058,2.403,1059,3.696,1060,2.403,1061,3.696,1062,2.403,1063,2.403,1064,2.403,1065,3.696,1066,3.696,1067,3.696,1068,2.403,1069,3.696,1070,2.403,1071,2.403,1072,2.403,1073,2.403,1074,2.403,1075,3.696]],["title/modules/VoteModule.html",[89,0.949,99,2.388]],["body/modules/VoteModule.html",[3,0.218,4,0.218,5,0.169,26,0.019,37,0.822,38,0.469,45,0.218,46,0.098,87,0.014,88,0.014,89,1.44,91,1.637,92,2.017,99,4.853,100,2.351,101,1.482,102,1.722,104,3.364,135,2.621,225,3.458,230,2.621,231,3.035,439,3.672,440,3.672,470,2.392,670,3.672,673,3.738,674,3.336,675,3.336,995,4.364,1014,3.738,1076,4.349,1077,4.349,1078,4.349,1079,4.349,1080,4.349]],["title/injectables/VoteService.html",[0,0.23,670,1.943]],["body/injectables/VoteService.html",[0,0.252,2,0.664,3,0.137,4,0.137,5,0.106,7,0.314,8,1.258,9,2.683,10,1.872,13,0.944,14,1.679,17,0.885,21,2.663,23,0.935,25,1.276,26,0.019,27,1.099,28,0.622,29,0.941,31,1.252,33,1.017,37,0.664,38,0.294,42,2.539,43,0.976,45,0.137,46,0.062,47,0.843,74,2.136,75,1.784,87,0.01,88,0.01,154,0.976,174,2.814,207,1.516,250,2.916,254,2.373,262,1.903,264,2.344,266,1.903,284,3.89,313,4.137,326,4.137,330,2.428,331,2.092,350,3.118,363,1.628,364,1.628,480,1.137,487,2.407,493,1.903,494,2.916,531,1.628,578,2.128,605,3.127,644,4.375,664,2.428,670,2.128,694,2.092,695,2.092,704,4.636,708,2.344,725,2.344,727,2.092,728,2.092,736,3.12,744,2.344,998,3.496,1000,4.182,1006,2.092,1036,3.496,1039,2.344,1042,2.344,1057,3.496,1081,2.344,1082,4.182,1083,4.067,1084,4.067,1085,2.727,1086,2.727,1087,4.067,1088,2.727,1089,4.067,1090,2.727,1091,4.067,1092,2.727,1093,4.067,1094,3.12,1095,2.727,1096,2.727,1097,4.067,1098,2.727,1099,4.067,1100,2.727,1101,4.067,1102,2.727,1103,2.727,1104,2.727,1105,4.067,1106,2.727,1107,2.727,1108,2.727]],["title/modules/WatchListDBModule.html",[89,0.949,441,2.071]],["body/modules/WatchListDBModule.html",[3,0.244,4,0.244,5,0.188,20,3.531,26,0.018,37,0.758,38,0.524,45,0.244,46,0.11,87,0.015,88,0.015,89,1.545,91,1.828,92,2.164,100,2.522,101,1.656,102,1.924,230,2.812,441,4.163,470,2.462,472,3.886,474,2.259,1109,4.176,1110,4.176,1111,4.176,1112,4.858,1113,4.858]],["title/injectables/WatchListDBService.html",[0,0.23,20,1.728]],["body/injectables/WatchListDBService.html",[0,0.34,2,1.017,3,0.209,4,0.209,5,0.162,7,0.48,10,1.291,13,1.274,14,1.769,17,1.355,20,2.551,23,1.005,25,1.355,26,0.019,27,1.168,28,0.661,29,0.999,31,1.423,33,0.947,37,0.705,38,0.45,43,1.494,45,0.209,46,0.094,47,1.291,75,1.807,87,0.013,88,0.013,207,1.723,254,2.697,335,2.172,470,2.219,474,1.941,476,3.275,477,4.185,478,2.683,480,2.556,481,3.829,487,2.288,596,2.702,640,4.208,1114,3.588,1115,4.174,1116,5.268,1117,4.174,1118,4.174,1119,4.174,1120,4.174,1121,4.174,1122,4.174]],["title/injectables/WatchListJob.html",[0,0.23,443,2.388]],["body/injectables/WatchListJob.html",[0,0.292,1,3.985,2,0.816,3,0.168,4,0.168,5,0.13,7,0.385,8,1.461,9,3.224,10,2.174,13,1.096,14,1.332,15,4.145,17,1.087,20,3.105,21,2.938,23,0.917,25,0.74,26,0.019,27,0.638,28,0.361,29,0.546,31,0.777,33,1.004,37,0.785,38,0.361,40,2.568,41,2.568,42,2.613,43,1.199,45,0.168,46,0.076,47,1.036,72,2.568,73,2.152,74,2.479,75,1.751,78,2.568,79,2.568,80,4.145,87,0.011,88,0.011,114,2.337,149,1.999,174,1.557,335,1.326,363,2.818,364,2.818,443,3.035,480,1.397,487,1.397,494,3.022,496,3.817,499,2.878,503,2.568,736,2.568,1116,2.878,1123,2.878,1124,4.701,1125,5.469,1126,3.348,1127,4.721,1128,3.348,1129,4.721,1130,3.348,1131,4.721,1132,5.469,1133,3.348,1134,2.878,1135,3.348,1136,3.348,1137,3.348,1138,4.721,1139,3.348,1140,3.348,1141,3.348,1142,3.348,1143,4.721,1144,3.348,1145,2.878,1146,3.348,1147,3.348,1148,3.348]],["title/interfaces/WatchlistExtType.html",[533,1.943,603,2.388]],["body/interfaces/WatchlistExtType.html",[3,0.249,4,0.249,5,0.192,7,0.571,8,1.894,26,0.018,28,0.769,33,1.157,45,0.249,80,4.843,87,0.015,88,0.015,319,3.869,350,3.09,487,2.894,504,4.843,533,2.595,534,3.462,603,3.937,666,5.711,757,5.322,1149,4.263]],["title/coverage.html",[1150,4.362]],["body/coverage.html",[0,0.455,1,1.596,5,0.104,6,2.298,19,1.596,20,1.244,21,1.177,22,1.244,26,0.019,28,0.288,46,0.141,87,0.01,88,0.01,117,2.051,133,2.631,134,1.866,136,2.298,154,0.957,160,1.317,162,1.719,172,1.719,174,1.244,182,1.719,187,1.866,189,1.491,195,1.491,226,1.719,227,1.719,228,1.177,247,2.298,250,1.244,270,1.866,272,1.866,274,1.866,356,2.298,375,1.866,377,2.298,381,3.075,404,1.866,442,1.719,443,1.719,453,1.596,454,2.298,469,1.491,470,0.911,475,2.298,491,4.954,492,2.298,494,1.244,510,1.596,511,2.298,512,2.298,516,2.298,533,2.516,535,2.298,536,2.298,538,2.298,546,2.051,547,2.298,555,3.446,561,2.298,564,1.866,565,2.298,598,1.596,601,1.719,603,1.719,633,2.298,661,2.298,670,1.399,679,2.298,698,2.051,761,2.298,765,1.866,766,2.298,771,3.075,780,1.866,786,2.298,789,2.298,796,2.051,801,1.719,802,2.298,806,2.298,811,2.298,814,1.866,815,2.298,854,1.596,895,2.298,930,2.298,962,2.298,995,1.866,996,2.298,1030,2.298,1081,2.298,1114,2.298,1123,2.298,1149,2.298,1150,2.298,1151,2.298,1152,2.674,1153,2.674,1154,2.298,1155,7.205,1156,7.338,1157,2.298,1158,2.051,1159,2.298,1160,2.298,1161,4.591,1162,2.298,1163,2.298,1164,2.298,1165,2.298,1166,2.298,1167,2.298,1168,5.722,1169,5.341,1170,6.552,1171,4.008,1172,2.674,1173,2.298,1174,4.008,1175,4.808,1176,4.008,1177,2.298,1178,2.298,1179,2.298,1180,2.298,1181,2.298,1182,2.298,1183,2.298,1184,2.298,1185,2.298,1186,3.075,1187,2.051,1188,2.674,1189,2.674,1190,2.674,1191,2.674,1192,2.674,1193,2.674,1194,2.674,1195,2.674,1196,2.674,1197,2.674]],["title/dependencies.html",[92,1.6,1198,2.665]],["body/dependencies.html",[26,0.019,38,0.494,43,1.638,87,0.014,88,0.014,92,1.638,108,3.934,109,3.511,114,3.195,116,3.934,165,3.195,200,2.942,233,2.732,237,3.511,269,3.511,367,3.934,404,3.195,480,1.909,496,3.195,523,4.913,543,3.934,606,3.511,607,2.942,780,3.195,783,3.934,1134,3.934,1199,6.961,1200,4.577,1201,4.577,1202,4.577,1203,3.934,1204,4.577,1205,4.577,1206,4.577,1207,4.577,1208,4.577,1209,4.577,1210,4.577,1211,4.577,1212,4.577,1213,4.577,1214,4.577,1215,4.577,1216,4.577,1217,3.934,1218,4.577,1219,4.577,1220,4.577,1221,4.577,1222,3.934,1223,4.577,1224,4.577,1225,4.577,1226,4.577,1227,4.577,1228,4.577,1229,4.577,1230,4.577]],["title/miscellaneous/functions.html",[1231,2.164,1232,3.428]],["body/miscellaneous/functions.html",[7,0.627,25,1.205,26,0.017,27,1.038,28,0.588,29,0.888,33,1.106,87,0.016,88,0.016,161,4.167,1159,4.683,1160,5.573,1186,4.179,1187,5.309,1231,3.803,1232,4.179,1233,4.683,1234,5.448,1235,5.448,1236,5.573,1237,4.683,1238,6.483]],["title/index.html",[7,0.357,73,1.993,1094,2.378]],["body/index.html",[5,0.215,15,4.97,23,0.855,26,0.009,28,0.267,42,2.261,87,0.009,88,0.009,92,1.355,109,1.901,127,2.13,130,3.522,131,3.253,135,1.153,137,1.593,142,2.259,151,1.382,154,0.887,292,5.989,310,2.13,330,1.479,335,1.499,337,2.13,339,1.901,343,1.901,348,1.901,376,1.221,476,1.479,480,2.434,533,1.296,548,2.642,574,2.13,575,4.237,578,2.402,605,1.593,607,3.751,691,5.104,716,1.73,757,1.901,851,1.73,960,1.901,961,1.901,978,4.417,1006,1.901,1158,2.903,1187,1.901,1217,2.13,1232,1.901,1237,4.417,1239,2.478,1240,2.478,1241,2.478,1242,2.478,1243,4.591,1244,3.253,1245,2.13,1246,2.478,1247,4.591,1248,2.478,1249,2.478,1250,2.478,1251,3.946,1252,2.478,1253,2.478,1254,2.478,1255,2.478,1256,3.785,1257,3.785,1258,3.253,1259,5.535,1260,4.591,1261,3.785,1262,2.478,1263,2.13,1264,2.478,1265,2.478,1266,3.785,1267,2.478,1268,3.253,1269,2.478,1270,2.478,1271,2.478,1272,2.478,1273,2.478,1274,2.478,1275,5.535,1276,2.478,1277,2.478,1278,4.591,1279,2.478,1280,2.478,1281,5.139,1282,2.478,1283,3.785,1284,3.785,1285,6.259,1286,5.217,1287,6.831,1288,3.785,1289,2.13,1290,2.478,1291,4.591,1292,4.591,1293,2.478,1294,2.478,1295,2.478,1296,2.478,1297,2.478,1298,3.785,1299,2.478,1300,4.591,1301,2.478,1302,3.785,1303,2.478,1304,2.478,1305,4.417,1306,2.478,1307,4.591,1308,2.478,1309,2.478,1310,2.478,1311,2.478,1312,3.946,1313,2.478,1314,2.478,1315,2.478,1316,2.478,1317,5.139,1318,6.259,1319,4.591,1320,2.478,1321,3.785,1322,5.535,1323,2.478,1324,2.478,1325,2.478,1326,2.478,1327,2.478,1328,2.478,1329,2.478,1330,3.785,1331,2.478,1332,2.478,1333,2.478,1334,2.478,1335,2.478,1336,2.13,1337,2.478,1338,2.478,1339,2.478,1340,2.478,1341,2.478,1342,2.478,1343,3.785,1344,4.591,1345,3.785,1346,2.478,1347,3.785,1348,4.591,1349,2.478,1350,2.478,1351,2.478,1352,2.478,1353,2.13,1354,2.478,1355,3.785,1356,2.478,1357,2.478,1358,2.478,1359,2.478,1360,2.478,1361,3.253,1362,2.478,1363,2.478,1364,2.478,1365,2.478,1366,3.946,1367,2.478,1368,2.478,1369,2.478,1370,2.478,1371,3.785,1372,2.478,1373,2.478,1374,2.478,1375,2.478,1376,3.785,1377,4.591,1378,2.478,1379,2.478,1380,2.478,1381,2.478,1382,2.478,1383,2.478,1384,2.478,1385,2.478,1386,2.478,1387,2.478,1388,2.13,1389,2.478,1390,2.478,1391,2.478,1392,2.478,1393,3.785,1394,2.478,1395,2.478,1396,2.478,1397,2.478]],["title/license.html",[73,1.993,1094,2.378,1398,2.378]],["body/license.html",[26,0.014,87,0.014,88,0.014,102,1.783,419,3.87,423,3.87,548,4.022,1151,3.87,1203,3.87,1258,5.463,1361,3.87,1388,3.87,1398,3.454,1399,3.87,1400,6.356,1401,4.502,1402,4.502,1403,4.502,1404,4.502,1405,5.763,1406,4.502,1407,4.502,1408,3.87,1409,4.502,1410,4.502,1411,4.502,1412,5.763,1413,7.366,1414,4.502,1415,4.502,1416,4.502,1417,5.763,1418,4.502,1419,4.502,1420,4.502,1421,4.502,1422,4.502,1423,4.502,1424,4.502,1425,4.502,1426,4.502,1427,5.763,1428,4.502,1429,4.502,1430,4.502,1431,4.502,1432,4.502,1433,5.763,1434,5.763,1435,4.502,1436,4.502,1437,4.502,1438,4.502,1439,4.502,1440,4.502,1441,4.502,1442,4.502,1443,4.502,1444,4.502,1445,4.502,1446,4.502,1447,4.502,1448,4.502,1449,3.87,1450,4.502,1451,4.502,1452,4.502,1453,4.502,1454,4.502,1455,4.502,1456,4.502,1457,4.502,1458,4.502,1459,4.502,1460,4.502,1461,4.502,1462,4.502]],["title/modules.html",[91,1.91]],["body/modules.html",[26,0.015,87,0.015,88,0.015,90,3.493,91,1.883,95,3.217,96,3.217,97,3.217,98,3.217,99,3.217,225,2.465,438,2.987,439,2.618,440,2.618,441,2.79,1336,6.524,1463,7.589,1464,7.589,1465,7.589]],["title/overview.html",[1466,4.362]],["body/overview.html",[1,2.867,2,0.65,19,2.867,20,2.895,21,2.74,22,2.659,26,0.019,87,0.01,88,0.01,90,4.789,91,1.005,92,1.433,93,2.295,94,2.295,95,4.54,96,4.733,97,4.655,98,4.655,99,4.459,100,1.67,101,0.91,102,1.057,135,1.242,189,2.678,222,2.295,223,2.295,224,2.295,225,3.45,226,3.088,227,3.088,228,2.516,250,2.895,376,1.315,435,2.295,436,2.295,437,2.295,438,3.909,439,3.543,440,3.543,441,3.719,442,3.088,443,3.088,453,2.867,466,2.295,467,2.295,468,2.295,469,3.471,470,2.232,494,2.895,534,1.863,598,2.867,628,2.295,629,2.295,630,2.295,667,2.295,669,2.295,670,2.792,854,2.867,889,2.295,890,2.295,891,2.295,924,2.295,926,2.295,961,2.048,1025,2.295,1026,2.295,1027,2.295,1109,2.295,1110,2.295,1111,2.295,1466,2.295,1467,2.67,1468,2.67,1469,2.67,1470,2.295]],["title/properties.html",[8,1.383,1198,2.665]],["body/properties.html",[8,1.737,26,0.018,87,0.016,88,0.016,139,3.609,551,4.307,578,2.937,1222,4.826,1245,4.826,1268,4.826,1305,4.826,1398,4.307,1399,4.826,1471,5.614,1472,5.614,1473,5.614,1474,5.614,1475,5.614,1476,5.614]],["title/miscellaneous/variables.html",[1231,2.164,1477,3.841]],["body/miscellaneous/variables.html",[7,0.229,14,0.484,26,0.019,27,1.171,28,0.344,29,0.324,33,0.704,35,3.205,42,0.875,74,1.578,75,0.939,87,0.008,88,0.008,101,1.086,117,2.443,120,5.148,123,1.569,130,2.443,142,1.187,144,1.525,147,2.443,151,1.109,154,1.631,160,0.979,165,2.781,168,0.875,173,0.829,174,0.925,178,2.223,207,1.12,242,1.709,254,0.875,270,2.223,272,2.223,274,2.223,288,1.525,319,1.109,323,1.709,324,1.709,335,1.578,345,1.525,350,2.119,354,2.929,363,4.089,364,4.175,370,3.425,379,1.278,381,1.525,382,1.709,404,2.223,405,1.709,410,1.709,412,3.425,496,2.781,575,1.388,578,2.923,581,3.495,607,2.047,664,1.187,680,1.709,691,1.525,698,2.443,716,1.388,727,2.443,729,1.709,771,1.525,780,2.223,781,1.709,796,2.443,829,1.709,851,2.223,960,1.525,977,3.425,1082,1.709,1124,1.709,1145,1.709,1154,1.709,1157,1.709,1158,2.443,1161,1.709,1162,2.738,1163,2.738,1164,2.738,1165,2.738,1166,1.709,1167,2.738,1173,1.709,1177,1.709,1178,1.709,1179,2.738,1180,1.709,1181,2.738,1182,1.709,1183,1.709,1184,1.709,1185,1.709,1186,1.525,1231,1.388,1233,1.709,1236,1.709,1244,1.709,1251,1.709,1263,3.425,1286,1.709,1289,4.286,1312,5.281,1353,1.709,1366,1.709,1408,1.709,1449,1.709,1470,1.709,1477,1.709,1478,1.988,1479,1.988,1480,1.988,1481,1.988,1482,1.988,1483,4.557,1484,1.988,1485,1.988,1486,1.988,1487,1.988,1488,1.988,1489,1.988,1490,1.988,1491,1.988,1492,1.988,1493,1.988,1494,3.185,1495,6.904,1496,1.988,1497,1.988,1498,1.988,1499,1.988,1500,1.988,1501,1.988,1502,1.988,1503,1.988,1504,1.988,1505,1.988,1506,3.985,1507,1.988,1508,1.988,1509,1.988,1510,1.988,1511,1.988,1512,1.988,1513,4.986,1514,1.988,1515,1.988,1516,1.988,1517,1.988,1518,1.988,1519,1.988,1520,1.988,1521,3.185,1522,3.985,1523,3.985,1524,3.185,1525,3.185,1526,1.988,1527,1.988,1528,3.985,1529,3.985,1530,1.988,1531,1.988,1532,1.988,1533,1.988,1534,1.988,1535,1.988,1536,1.988,1537,1.988,1538,1.988,1539,1.988,1540,1.988,1541,1.988,1542,1.988,1543,1.988,1544,1.988,1545,1.988,1546,1.988,1547,1.988,1548,4.557,1549,5.32,1550,4.557,1551,1.988,1552,1.988,1553,1.988,1554,1.988,1555,1.988,1556,3.185,1557,1.988,1558,1.988,1559,1.988,1560,1.988,1561,1.988,1562,1.988,1563,1.988,1564,1.988,1565,1.988,1566,1.988,1567,1.988,1568,3.985,1569,1.988,1570,1.988,1571,1.988,1572,1.988,1573,1.988,1574,1.988,1575,1.988,1576,1.988,1577,3.185,1578,1.988,1579,1.988,1580,1.988,1581,1.988,1582,1.988,1583,5.99,1584,1.988,1585,1.988,1586,1.988,1587,1.988,1588,1.988,1589,1.988,1590,1.988,1591,1.988,1592,1.988,1593,1.988,1594,3.185,1595,1.988,1596,1.988,1597,1.988,1598,1.988,1599,3.185,1600,1.988,1601,1.988,1602,1.988,1603,1.988,1604,1.988,1605,1.988,1606,1.988,1607,1.988,1608,1.988,1609,1.988,1610,1.988,1611,1.988,1612,1.988,1613,1.988,1614,1.988,1615,4.557,1616,1.988,1617,1.988,1618,1.988,1619,1.988,1620,1.988,1621,1.988,1622,1.988,1623,1.988,1624,1.988,1625,3.185,1626,1.988,1627,1.988]]],"invertedIndex":[["",{"_index":26,"title":{},"body":{"injectables/AnnounceJob.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"classes/EmailOptInDto.html":{},"injectables/EmailService.html":{},"modules/EventModule.html":{},"injectables/GravatarService.html":{},"modules/HistoryDBModule.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/JwtUser.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoginDto.html":{},"controllers/MovieController.html":{},"modules/MovieDBModule.html":{},"injectables/MovieDBService.html":{},"interfaces/MovieExtType.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"classes/PasswordDto.html":{},"classes/PasswordNewDto.html":{},"injectables/PasswordService.html":{},"injectables/PrismaService.html":{},"classes/ProfileDto.html":{},"classes/RegisterDto.html":{},"classes/ResDto.html":{},"controllers/UserController.html":{},"modules/UserDBModule.html":{},"injectables/UserDBService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"modules/VoteDBModule.html":{},"injectables/VoteDBService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"modules/WatchListDBModule.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{},"interfaces/WatchlistExtType.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":491,"title":{},"body":{"injectables/HistoryDBService.html":{},"injectables/MovieDBService.html":{},"injectables/MovieService.html":{},"injectables/UserDBService.html":{},"coverage.html":{}}}],["0.1.13",{"_index":1226,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":1220,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1156,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1169,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":1172,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1175,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1170,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1176,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1168,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1174,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1195,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1190,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1171,"title":{},"body":{"coverage.html":{}}}],["1\").pattern(cron_pattern",{"_index":1522,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1.0.0",{"_index":1222,"title":{},"body":{"dependencies.html":{},"properties.html":{}}}],["1/10",{"_index":1193,"title":{},"body":{"coverage.html":{}}}],["1/5",{"_index":1194,"title":{},"body":{"coverage.html":{}}}],["1/6",{"_index":1189,"title":{},"body":{"coverage.html":{}}}],["1/7",{"_index":1192,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":786,"title":{},"body":{"injectables/PasswordService.html":{},"coverage.html":{}}}],["100",{"_index":1256,"title":{},"body":{"index.html":{}}}],["11",{"_index":1467,"title":{},"body":{"overview.html":{}}}],["14",{"_index":1191,"title":{},"body":{"coverage.html":{}}}],["14.6.0",{"_index":1213,"title":{},"body":{"dependencies.html":{}}}],["15",{"_index":1145,"title":{},"body":{"injectables/WatchListJob.html":{},"miscellaneous/variables.html":{}}}],["16",{"_index":1188,"title":{},"body":{"coverage.html":{}}}],["17.7.0",{"_index":1218,"title":{},"body":{"dependencies.html":{}}}],["18.12.1",{"_index":1269,"title":{},"body":{"index.html":{}}}],["19",{"_index":1531,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2.1.0",{"_index":1204,"title":{},"body":{"dependencies.html":{}}}],["2.1.8",{"_index":1212,"title":{},"body":{"dependencies.html":{}}}],["2.2.0",{"_index":1200,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":962,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["200",{"_index":1616,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2022",{"_index":1402,"title":{},"body":{"license.html":{}}}],["22",{"_index":1469,"title":{},"body":{"overview.html":{}}}],["23",{"_index":1537,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3",{"_index":961,"title":{},"body":{"injectables/UserService.html":{},"index.html":{},"overview.html":{}}}],["3.0.0",{"_index":1205,"title":{},"body":{"dependencies.html":{}}}],["3.0.2",{"_index":1228,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":1468,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":1221,"title":{},"body":{"dependencies.html":{}}}],["4.1.1",{"_index":1211,"title":{},"body":{"dependencies.html":{}}}],["4.4.1",{"_index":1216,"title":{},"body":{"dependencies.html":{}}}],["4.5.0",{"_index":1207,"title":{},"body":{"dependencies.html":{}}}],["4.7.0",{"_index":1209,"title":{},"body":{"dependencies.html":{}}}],["4.7.1",{"_index":1223,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":1617,"title":{},"body":{"miscellaneous/variables.html":{}}}],["5,7",{"_index":1566,"title":{},"body":{"miscellaneous/variables.html":{}}}],["5.0.1",{"_index":1208,"title":{},"body":{"dependencies.html":{}}}],["5.1.1",{"_index":1215,"title":{},"body":{"dependencies.html":{}}}],["500",{"_index":1618,"title":{},"body":{"miscellaneous/variables.html":{}}}],["6.1.4",{"_index":1206,"title":{},"body":{"dependencies.html":{}}}],["6.8.0",{"_index":1219,"title":{},"body":{"dependencies.html":{}}}],["60000",{"_index":1132,"title":{},"body":{"injectables/WatchListJob.html":{}}}],["7",{"_index":1470,"title":{},"body":{"overview.html":{},"miscellaneous/variables.html":{}}}],["7.2.0",{"_index":1230,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":1568,"title":{},"body":{"miscellaneous/variables.html":{}}}],["9.0.0",{"_index":1199,"title":{},"body":{"dependencies.html":{}}}],["9._",{"_index":1626,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_count",{"_index":1069,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["above",{"_index":1432,"title":{},"body":{"license.html":{}}}],["access",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{}}}],["access_token",{"_index":301,"title":{},"body":{"injectables/AuthService.html":{}}}],["account",{"_index":343,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["action",{"_index":1457,"title":{},"body":{"license.html":{}}}],["add",{"_index":476,"title":{},"body":{"injectables/HistoryDBService.html":{},"controllers/MovieController.html":{},"injectables/MovieDBService.html":{},"injectables/VoteDBService.html":{},"injectables/WatchListDBService.html":{},"index.html":{}}}],["add(data",{"_index":481,"title":{},"body":{"injectables/HistoryDBService.html":{},"injectables/MovieDBService.html":{},"injectables/VoteDBService.html":{},"injectables/WatchListDBService.html":{}}}],["adding",{"_index":1472,"title":{},"body":{"properties.html":{}}}],["address",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["alert",{"_index":1600,"title":{},"body":{"miscellaneous/variables.html":{}}}],["alpha.5",{"_index":1471,"title":{},"body":{"properties.html":{}}}],["already",{"_index":330,"title":{},"body":{"injectables/AuthService.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"index.html":{}}}],["and/or",{"_index":1425,"title":{},"body":{"license.html":{}}}],["announce.job",{"_index":1135,"title":{},"body":{"injectables/WatchListJob.html":{}}}],["announce_discord",{"_index":11,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["announce_email",{"_index":12,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["announcejob",{"_index":1,"title":{"injectables/AnnounceJob.html":{}},"body":{"injectables/AnnounceJob.html":{},"modules/EventModule.html":{},"injectables/WatchListJob.html":{},"coverage.html":{},"overview.html":{}}}],["announcement",{"_index":431,"title":{},"body":{"injectables/EmailService.html":{}}}],["annually|yearly|monthly|weekly|daily|hourly|reboot))|(@every",{"_index":1563,"title":{},"body":{"miscellaneous/variables.html":{}}}],["another",{"_index":322,"title":{},"body":{"injectables/AuthService.html":{}}}],["api",{"_index":607,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{},"dependencies.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["apibearerauth",{"_index":597,"title":{},"body":{"controllers/MovieController.html":{},"controllers/UserController.html":{},"controllers/VoteController.html":{}}}],["apioperation",{"_index":198,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MovieController.html":{},"controllers/UserController.html":{},"controllers/VoteController.html":{}}}],["apioperation({summary",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MovieController.html":{},"controllers/UserController.html":{},"controllers/VoteController.html":{}}}],["apitags",{"_index":199,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MovieController.html":{},"controllers/UserController.html":{},"controllers/VoteController.html":{}}}],["apitags('auth",{"_index":201,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('movie",{"_index":608,"title":{},"body":{"controllers/MovieController.html":{}}}],["apitags('user",{"_index":859,"title":{},"body":{"controllers/UserController.html":{}}}],["apitags('vote",{"_index":1015,"title":{},"body":{"controllers/VoteController.html":{}}}],["app",{"_index":796,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["app.close",{"_index":800,"title":{},"body":{"injectables/PrismaService.html":{}}}],["application",{"_index":1244,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["application/json",{"_index":1609,"title":{},"body":{"miscellaneous/variables.html":{}}}],["appmodule",{"_index":90,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["arising",{"_index":1461,"title":{},"body":{"license.html":{}}}],["around",{"_index":1262,"title":{},"body":{"index.html":{}}}],["associated",{"_index":1414,"title":{},"body":{"license.html":{}}}],["assumes",{"_index":1310,"title":{},"body":{"index.html":{}}}],["async",{"_index":14,"title":{},"body":{"injectables/AnnounceJob.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"injectables/EmailService.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MovieController.html":{},"injectables/MovieDBService.html":{},"injectables/MovieService.html":{},"injectables/PasswordService.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"injectables/VoteDBService.html":{},"injectables/VoteService.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{},"miscellaneous/variables.html":{}}}],["atmosphäre",{"_index":67,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["auch",{"_index":61,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["auf",{"_index":68,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["auth",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{},"injectables/EmailService.html":{}}}],["auth.controller",{"_index":235,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":188,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MovieController.html":{},"controllers/UserController.html":{},"controllers/VoteController.html":{}}}],["auth.guard.ts",{"_index":512,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["auth.service",{"_index":190,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{}}}],["auth/jwt",{"_index":600,"title":{},"body":{"controllers/MovieController.html":{},"controllers/UserController.html":{},"controllers/VoteController.html":{}}}],["authcontroller",{"_index":134,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticate",{"_index":1507,"title":{},"body":{"miscellaneous/variables.html":{}}}],["authentication",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{}}}],["authguard",{"_index":513,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["authguard('jwt",{"_index":515,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('local",{"_index":537,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authmodule",{"_index":95,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1475,"title":{},"body":{"properties.html":{}}}],["authorization",{"_index":1610,"title":{},"body":{"miscellaneous/variables.html":{}}}],["authors",{"_index":1450,"title":{},"body":{"license.html":{}}}],["authservice",{"_index":189,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["automatic",{"_index":1261,"title":{},"body":{"index.html":{}}}],["await",{"_index":75,"title":{},"body":{"injectables/AnnounceJob.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/EmailService.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"injectables/LocalStrategy.html":{},"controllers/MovieController.html":{},"injectables/MovieDBService.html":{},"injectables/MovieService.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{},"injectables/VoteDBService.html":{},"injectables/VoteService.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{},"miscellaneous/variables.html":{}}}],["backend",{"_index":1318,"title":{},"body":{"index.html":{}}}],["bcrypt",{"_index":780,"title":{},"body":{"injectables/PasswordService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["bcrypt.compare(password",{"_index":788,"title":{},"body":{"injectables/PasswordService.html":{}}}],["bcrypt.hash(password",{"_index":785,"title":{},"body":{"injectables/PasswordService.html":{}}}],["bearer",{"_index":829,"title":{},"body":{"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["beginning",{"_index":1532,"title":{},"body":{"miscellaneous/variables.html":{}}}],["below",{"_index":1284,"title":{},"body":{"index.html":{}}}],["between",{"_index":960,"title":{},"body":{"injectables/UserService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["body",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{},"injectables/EmailService.html":{},"injectables/LoggerMiddleware.html":{},"controllers/UserController.html":{},"miscellaneous/functions.html":{}}}],["body.password",{"_index":221,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["body.password_old",{"_index":883,"title":{},"body":{"controllers/UserController.html":{}}}],["body.username",{"_index":879,"title":{},"body":{"controllers/UserController.html":{}}}],["boolean",{"_index":379,"title":{},"body":{"classes/EmailOptInDto.html":{},"classes/ProfileDto.html":{},"classes/ResDto.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["boolean(body.email_opt_in",{"_index":870,"title":{},"body":{"controllers/UserController.html":{}}}],["bootstrap",{"_index":1187,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["browse",{"_index":1465,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1463,"title":{},"body":{"modules.html":{}}}],["build",{"_index":1285,"title":{},"body":{"index.html":{}}}],["build:all",{"_index":1288,"title":{},"body":{"index.html":{}}}],["build:client",{"_index":1349,"title":{},"body":{"index.html":{}}}],["build:db",{"_index":1397,"title":{},"body":{"index.html":{}}}],["build:docs",{"_index":1357,"title":{},"body":{"index.html":{}}}],["built",{"_index":1348,"title":{},"body":{"index.html":{}}}],["c",{"_index":1401,"title":{},"body":{"license.html":{}}}],["calculate",{"_index":1533,"title":{},"body":{"miscellaneous/variables.html":{}}}],["call",{"_index":1160,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["call(route",{"_index":1235,"title":{},"body":{"miscellaneous/functions.html":{}}}],["called",{"_index":1294,"title":{},"body":{"index.html":{}}}],["capital",{"_index":963,"title":{},"body":{"injectables/UserService.html":{}}}],["cast",{"_index":1517,"title":{},"body":{"miscellaneous/variables.html":{}}}],["catch",{"_index":326,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MovieService.html":{},"injectables/VoteService.html":{}}}],["catch((e",{"_index":743,"title":{},"body":{"injectables/MovieService.html":{}}}],["challenge",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/EmailService.html":{},"injectables/UserService.html":{}}}],["challenge'})@get('confirm/:challenge",{"_index":155,"title":{},"body":{"controllers/AuthController.html":{}}}],["challenge_url",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EmailService.html":{}}}],["challenge_url}\\n\\ndear\\n${this.project_name",{"_index":428,"title":{},"body":{"injectables/EmailService.html":{}}}],["change",{"_index":1352,"title":{},"body":{"index.html":{}}}],["change_password",{"_index":816,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["change_password(@user",{"_index":881,"title":{},"body":{"controllers/UserController.html":{}}}],["change_password(user",{"_index":822,"title":{},"body":{"controllers/UserController.html":{}}}],["change_password(user_id",{"_index":935,"title":{},"body":{"injectables/UserService.html":{}}}],["change_profile",{"_index":931,"title":{},"body":{"injectables/UserService.html":{}}}],["change_profile(user_id",{"_index":938,"title":{},"body":{"injectables/UserService.html":{}}}],["change_username",{"_index":817,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["change_username(@user",{"_index":877,"title":{},"body":{"controllers/UserController.html":{}}}],["change_username(user",{"_index":826,"title":{},"body":{"controllers/UserController.html":{}}}],["change_username(user_id",{"_index":940,"title":{},"body":{"injectables/UserService.html":{}}}],["characters",{"_index":347,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["charge",{"_index":1409,"title":{},"body":{"license.html":{}}}],["check",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["check.text",{"_index":1612,"title":{},"body":{"miscellaneous/variables.html":{}}}],["check_profile",{"_index":818,"title":{},"body":{"controllers/UserController.html":{}}}],["checks",{"_index":311,"title":{},"body":{"injectables/AuthService.html":{}}}],["claim",{"_index":1453,"title":{},"body":{"license.html":{}}}],["class",{"_index":46,"title":{"classes/EmailOptInDto.html":{},"classes/LoginDto.html":{},"classes/PasswordDto.html":{},"classes/PasswordNewDto.html":{},"classes/ProfileDto.html":{},"classes/RegisterDto.html":{},"classes/ResDto.html":{}},"body":{"injectables/AnnounceJob.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"classes/EmailOptInDto.html":{},"injectables/EmailService.html":{},"modules/EventModule.html":{},"injectables/GravatarService.html":{},"modules/HistoryDBModule.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoginDto.html":{},"controllers/MovieController.html":{},"modules/MovieDBModule.html":{},"injectables/MovieDBService.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"classes/PasswordDto.html":{},"classes/PasswordNewDto.html":{},"injectables/PasswordService.html":{},"injectables/PrismaService.html":{},"classes/ProfileDto.html":{},"classes/RegisterDto.html":{},"classes/ResDto.html":{},"controllers/UserController.html":{},"modules/UserDBModule.html":{},"injectables/UserDBService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"modules/VoteDBModule.html":{},"injectables/VoteDBService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"modules/WatchListDBModule.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{},"coverage.html":{}}}],["classes",{"_index":376,"title":{},"body":{"classes/EmailOptInDto.html":{},"classes/LoginDto.html":{},"classes/PasswordDto.html":{},"classes/PasswordNewDto.html":{},"classes/ProfileDto.html":{},"classes/RegisterDto.html":{},"classes/ResDto.html":{},"index.html":{},"overview.html":{}}}],["clean",{"_index":1253,"title":{},"body":{"index.html":{}}}],["clears",{"_index":1538,"title":{},"body":{"miscellaneous/variables.html":{}}}],["clicking",{"_index":318,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EmailService.html":{},"injectables/UserService.html":{}}}],["client",{"_index":691,"title":{},"body":{"injectables/MovieService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["client({apikey",{"_index":701,"title":{},"body":{"injectables/MovieService.html":{}}}],["client/.../api.ts",{"_index":1234,"title":{},"body":{"miscellaneous/functions.html":{}}}],["client/.../cookie.ts",{"_index":1483,"title":{},"body":{"miscellaneous/variables.html":{}}}],["client/.../main.ts",{"_index":1478,"title":{},"body":{"miscellaneous/variables.html":{}}}],["client/.../router.ts",{"_index":1488,"title":{},"body":{"miscellaneous/variables.html":{}}}],["client/.../store.ts",{"_index":1489,"title":{},"body":{"miscellaneous/variables.html":{}}}],["client/dist",{"_index":131,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["client/src/components",{"_index":1383,"title":{},"body":{"index.html":{}}}],["client/src/main.ts",{"_index":1154,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["client/src/router",{"_index":1369,"title":{},"body":{"index.html":{}}}],["client/src/router/router.ts",{"_index":1157,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["client/src/util/api.ts",{"_index":1159,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["client/src/util/cookie.ts",{"_index":1161,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["client/src/util/store.ts",{"_index":1166,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["client/src/views",{"_index":1380,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":93,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":94,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":222,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":224,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":223,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_eventmodule",{"_index":435,"title":{},"body":{"modules/EventModule.html":{},"overview.html":{}}}],["cluster_eventmodule_imports",{"_index":437,"title":{},"body":{"modules/EventModule.html":{},"overview.html":{}}}],["cluster_eventmodule_providers",{"_index":436,"title":{},"body":{"modules/EventModule.html":{},"overview.html":{}}}],["cluster_historydbmodule",{"_index":466,"title":{},"body":{"modules/HistoryDBModule.html":{},"overview.html":{}}}],["cluster_historydbmodule_exports",{"_index":468,"title":{},"body":{"modules/HistoryDBModule.html":{},"overview.html":{}}}],["cluster_historydbmodule_providers",{"_index":467,"title":{},"body":{"modules/HistoryDBModule.html":{},"overview.html":{}}}],["cluster_moviedbmodule",{"_index":628,"title":{},"body":{"modules/MovieDBModule.html":{},"overview.html":{}}}],["cluster_moviedbmodule_exports",{"_index":630,"title":{},"body":{"modules/MovieDBModule.html":{},"overview.html":{}}}],["cluster_moviedbmodule_providers",{"_index":629,"title":{},"body":{"modules/MovieDBModule.html":{},"overview.html":{}}}],["cluster_moviemodule",{"_index":667,"title":{},"body":{"modules/MovieModule.html":{},"overview.html":{}}}],["cluster_moviemodule_imports",{"_index":668,"title":{},"body":{"modules/MovieModule.html":{}}}],["cluster_moviemodule_providers",{"_index":669,"title":{},"body":{"modules/MovieModule.html":{},"overview.html":{}}}],["cluster_userdbmodule",{"_index":889,"title":{},"body":{"modules/UserDBModule.html":{},"overview.html":{}}}],["cluster_userdbmodule_exports",{"_index":891,"title":{},"body":{"modules/UserDBModule.html":{},"overview.html":{}}}],["cluster_userdbmodule_providers",{"_index":890,"title":{},"body":{"modules/UserDBModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":924,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_imports",{"_index":925,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":926,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_votedbmodule",{"_index":1025,"title":{},"body":{"modules/VoteDBModule.html":{},"overview.html":{}}}],["cluster_votedbmodule_exports",{"_index":1026,"title":{},"body":{"modules/VoteDBModule.html":{},"overview.html":{}}}],["cluster_votedbmodule_providers",{"_index":1027,"title":{},"body":{"modules/VoteDBModule.html":{},"overview.html":{}}}],["cluster_votemodule",{"_index":1076,"title":{},"body":{"modules/VoteModule.html":{}}}],["cluster_votemodule_imports",{"_index":1078,"title":{},"body":{"modules/VoteModule.html":{}}}],["cluster_votemodule_providers",{"_index":1077,"title":{},"body":{"modules/VoteModule.html":{}}}],["cluster_watchlistdbmodule",{"_index":1109,"title":{},"body":{"modules/WatchListDBModule.html":{},"overview.html":{}}}],["cluster_watchlistdbmodule_exports",{"_index":1110,"title":{},"body":{"modules/WatchListDBModule.html":{},"overview.html":{}}}],["cluster_watchlistdbmodule_providers",{"_index":1111,"title":{},"body":{"modules/WatchListDBModule.html":{},"overview.html":{}}}],["code",{"_index":1273,"title":{},"body":{"index.html":{}}}],["command",{"_index":1363,"title":{},"body":{"index.html":{}}}],["common",{"_index":1333,"title":{},"body":{"index.html":{}}}],["common/db_services/histroy/historydb.module",{"_index":677,"title":{},"body":{"modules/MovieModule.html":{}}}],["common/db_services/histroy/historydb.service",{"_index":696,"title":{},"body":{"injectables/MovieService.html":{}}}],["common/db_services/movies/moviedb.module",{"_index":674,"title":{},"body":{"modules/MovieModule.html":{},"modules/UserModule.html":{},"modules/VoteModule.html":{}}}],["common/db_services/movies/moviedb.service",{"_index":694,"title":{},"body":{"injectables/MovieService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["common/db_services/prisma.service",{"_index":673,"title":{},"body":{"modules/MovieModule.html":{},"modules/VoteModule.html":{}}}],["common/db_services/users/userdb.module",{"_index":231,"title":{},"body":{"modules/AuthModule.html":{},"modules/MovieModule.html":{},"modules/UserModule.html":{},"modules/VoteModule.html":{}}}],["common/db_services/users/userdb.service",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MovieService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["common/db_services/votes/votedb.module",{"_index":675,"title":{},"body":{"modules/MovieModule.html":{},"modules/UserModule.html":{},"modules/VoteModule.html":{}}}],["common/db_services/votes/votedb.service",{"_index":695,"title":{},"body":{"injectables/MovieService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["common/db_services/watchlist/watchlistdb.module",{"_index":678,"title":{},"body":{"modules/MovieModule.html":{},"modules/UserModule.html":{}}}],["common/db_services/watchlist/watchlistdb.service",{"_index":697,"title":{},"body":{"injectables/MovieService.html":{},"injectables/UserService.html":{}}}],["common/decorators/user.decorator",{"_index":192,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MovieController.html":{},"controllers/UserController.html":{},"controllers/VoteController.html":{}}}],["common/event_service/event.module",{"_index":112,"title":{},"body":{"modules/AppModule.html":{}}}],["common/util_services/email.service",{"_index":239,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["common/util_services/gravatar.service",{"_index":929,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["common/util_services/password.service",{"_index":240,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["common/validation/config.validation",{"_index":118,"title":{},"body":{"modules/AppModule.html":{}}}],["common/validation/patterns/imdb_id.pattern",{"_index":699,"title":{},"body":{"injectables/MovieService.html":{}}}],["common/validation/patterns/name.pattern",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["common/validation/patterns/password.pattern",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["common/validation/patterns/username.pattern",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["compare",{"_index":772,"title":{},"body":{"injectables/PasswordService.html":{}}}],["compare(password",{"_index":774,"title":{},"body":{"injectables/PasswordService.html":{}}}],["compodoc",{"_index":1325,"title":{},"body":{"index.html":{}}}],["component",{"_index":1583,"title":{},"body":{"miscellaneous/variables.html":{}}}],["components",{"_index":1377,"title":{},"body":{"index.html":{}}}],["conditions",{"_index":1431,"title":{},"body":{"license.html":{}}}],["config",{"_index":1282,"title":{},"body":{"index.html":{}}}],["config.validation.ts",{"_index":1299,"title":{},"body":{"index.html":{}}}],["config_validation_schema",{"_index":117,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["configmodule",{"_index":115,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":121,"title":{},"body":{"modules/AppModule.html":{}}}],["configuration",{"_index":1278,"title":{},"body":{"index.html":{}}}],["confirm",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/EmailService.html":{},"injectables/UserService.html":{}}}],["confirm(@param('challenge",{"_index":213,"title":{},"body":{"controllers/AuthController.html":{}}}],["confirm(challenge",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["confirmation",{"_index":323,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["conflictexception",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MovieService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["conflictexception(\"email",{"_index":981,"title":{},"body":{"injectables/UserService.html":{}}}],["conflictexception('e",{"_index":329,"title":{},"body":{"injectables/AuthService.html":{}}}],["conflictexception('movie",{"_index":721,"title":{},"body":{"injectables/MovieService.html":{}}}],["conflictexception('vote",{"_index":1105,"title":{},"body":{"injectables/VoteService.html":{}}}],["conflictexception('you",{"_index":725,"title":{},"body":{"injectables/MovieService.html":{},"injectables/VoteService.html":{}}}],["conflictexception(`you",{"_index":1100,"title":{},"body":{"injectables/VoteService.html":{}}}],["connect",{"_index":736,"title":{},"body":{"injectables/MovieService.html":{},"injectables/VoteService.html":{},"injectables/WatchListJob.html":{}}}],["connection",{"_index":1388,"title":{},"body":{"index.html":{},"license.html":{}}}],["console.log",{"_index":558,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["console.log(\"announce",{"_index":71,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["console.log('history",{"_index":501,"title":{},"body":{"injectables/HistoryJob.html":{}}}],["console.log('request",{"_index":559,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["console.log('watchlist",{"_index":1137,"title":{},"body":{"injectables/WatchListJob.html":{}}}],["console.log(req.body",{"_index":560,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["const",{"_index":74,"title":{},"body":{"injectables/AnnounceJob.html":{},"injectables/AuthService.html":{},"injectables/EmailService.html":{},"injectables/GravatarService.html":{},"injectables/HistoryJob.html":{},"injectables/LocalStrategy.html":{},"injectables/MovieService.html":{},"injectables/PasswordService.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"injectables/WatchListJob.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":17,"title":{},"body":{"injectables/AnnounceJob.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"injectables/EmailService.html":{},"injectables/GravatarService.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MovieDBService.html":{},"injectables/MovieService.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{},"injectables/VoteDBService.html":{},"injectables/VoteService.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{}}}],["constructor(authservice",{"_index":539,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(discordservice",{"_index":18,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["constructor(moviedbservice",{"_index":493,"title":{},"body":{"injectables/HistoryJob.html":{},"injectables/MovieService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["constructor(passwordservice",{"_index":456,"title":{},"body":{"injectables/GravatarService.html":{}}}],["constructor(prisma",{"_index":478,"title":{},"body":{"injectables/HistoryDBService.html":{},"injectables/MovieDBService.html":{},"injectables/UserDBService.html":{},"injectables/VoteDBService.html":{},"injectables/WatchListDBService.html":{}}}],["constructor(private",{"_index":47,"title":{},"body":{"injectables/AnnounceJob.html":{},"controllers/AuthController.html":{},"injectables/EmailService.html":{},"injectables/GravatarService.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"injectables/LocalStrategy.html":{},"controllers/MovieController.html":{},"injectables/MovieDBService.html":{},"injectables/MovieService.html":{},"controllers/UserController.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"injectables/VoteDBService.html":{},"injectables/VoteService.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{}}}],["constructor(userdbservice",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EmailService.html":{}}}],["constructor(votedbservice",{"_index":1126,"title":{},"body":{"injectables/WatchListJob.html":{}}}],["contact",{"_index":295,"title":{},"body":{"injectables/AuthService.html":{}}}],["contain",{"_index":718,"title":{},"body":{"injectables/MovieService.html":{}}}],["content",{"_index":1608,"title":{},"body":{"miscellaneous/variables.html":{}}}],["contract",{"_index":1458,"title":{},"body":{"license.html":{}}}],["controller",{"_index":133,"title":{"controllers/AuthController.html":{},"controllers/MovieController.html":{},"controllers/UserController.html":{},"controllers/VoteController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/MovieController.html":{},"controllers/UserController.html":{},"controllers/VoteController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":202,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('movie",{"_index":609,"title":{},"body":{"controllers/MovieController.html":{}}}],["controller('user",{"_index":860,"title":{},"body":{"controllers/UserController.html":{}}}],["controller('vote",{"_index":1016,"title":{},"body":{"controllers/VoteController.html":{}}}],["controllers",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/MovieController.html":{},"modules/MovieModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"controllers/VoteController.html":{},"modules/VoteModule.html":{},"index.html":{},"overview.html":{}}}],["cookies.get",{"_index":1570,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cookies.get(key",{"_index":1569,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cookies.remove(key",{"_index":1571,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cookies.set(key",{"_index":1572,"title":{},"body":{"miscellaneous/variables.html":{}}}],["copies",{"_index":1427,"title":{},"body":{"license.html":{}}}],["copy",{"_index":1412,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":1400,"title":{},"body":{"license.html":{}}}],["corresponding",{"_index":1323,"title":{},"body":{"index.html":{}}}],["cors",{"_index":1498,"title":{},"body":{"miscellaneous/variables.html":{}}}],["count",{"_index":1052,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["coverage",{"_index":1150,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":333,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserDBService.html":{}}}],["create(data",{"_index":899,"title":{},"body":{"injectables/UserDBService.html":{}}}],["createapp(app",{"_index":1492,"title":{},"body":{"miscellaneous/variables.html":{}}}],["created",{"_index":1395,"title":{},"body":{"index.html":{}}}],["createdat",{"_index":662,"title":{},"body":{"interfaces/MovieExtType.html":{},"injectables/MovieService.html":{}}}],["createparamdecorator",{"_index":1620,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createrouter",{"_index":1580,"title":{},"body":{"miscellaneous/variables.html":{}}}],["creates",{"_index":1525,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createwebhistory(import.meta.env.base_url",{"_index":1581,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cron",{"_index":496,"title":{},"body":{"injectables/HistoryJob.html":{},"injectables/WatchListJob.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["cron(process.env.schedule_history",{"_index":500,"title":{},"body":{"injectables/HistoryJob.html":{}}}],["cron(process.env.schedule_watchlist",{"_index":1136,"title":{},"body":{"injectables/WatchListJob.html":{}}}],["cron_pattern",{"_index":1179,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["crypto",{"_index":783,"title":{},"body":{"injectables/PasswordService.html":{},"dependencies.html":{}}}],["ctx",{"_index":1621,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":1623,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cuid",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["current",{"_index":1379,"title":{},"body":{"index.html":{}}}],["cyclic",{"_index":1246,"title":{},"body":{"index.html":{}}}],["d)(?=.*[a",{"_index":1576,"title":{},"body":{"miscellaneous/variables.html":{}}}],["d+(ns|us|µs|ms|s|m|h))+)|((((\\d+,)+\\d+|(\\d",{"_index":1564,"title":{},"body":{"miscellaneous/variables.html":{}}}],["d+)|\\d",{"_index":1565,"title":{},"body":{"miscellaneous/variables.html":{}}}],["damages",{"_index":1454,"title":{},"body":{"license.html":{}}}],["data",{"_index":335,"title":{},"body":{"injectables/AuthService.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"controllers/MovieController.html":{},"injectables/MovieDBService.html":{},"controllers/UserController.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{},"injectables/VoteDBService.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["data'})@apibearerauth()@useguards(jwtauthguard)@get",{"_index":840,"title":{},"body":{"controllers/UserController.html":{}}}],["data'})@apibearerauth()@useguards(jwtauthguard)@get('data",{"_index":844,"title":{},"body":{"controllers/UserController.html":{}}}],["data'})@get('all",{"_index":579,"title":{},"body":{"controllers/MovieController.html":{}}}],["data'})@get('history",{"_index":582,"title":{},"body":{"controllers/MovieController.html":{}}}],["data'})@get('watchlist",{"_index":589,"title":{},"body":{"controllers/MovieController.html":{}}}],["data.hasownproperty(\"use_gravatar",{"_index":966,"title":{},"body":{"injectables/UserService.html":{}}}],["data.name",{"_index":965,"title":{},"body":{"injectables/UserService.html":{}}}],["data.password",{"_index":918,"title":{},"body":{"injectables/UserDBService.html":{}}}],["data.use_gravatar",{"_index":967,"title":{},"body":{"injectables/UserService.html":{}}}],["data_to_update",{"_index":964,"title":{},"body":{"injectables/UserService.html":{}}}],["data_to_update[\"gravatar_url",{"_index":969,"title":{},"body":{"injectables/UserService.html":{}}}],["data_to_update[\"use_gravatar",{"_index":968,"title":{},"body":{"injectables/UserService.html":{}}}],["database",{"_index":575,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["database_url",{"_index":1501,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date",{"_index":666,"title":{},"body":{"interfaces/MovieExtType.html":{},"interfaces/WatchlistExtType.html":{}}}],["date(start_time.gettime",{"_index":1146,"title":{},"body":{"injectables/WatchListJob.html":{}}}],["db",{"_index":1355,"title":{},"body":{"index.html":{}}}],["db_services/histroy/historydb.module",{"_index":450,"title":{},"body":{"modules/EventModule.html":{}}}],["db_services/histroy/historydb.service",{"_index":498,"title":{},"body":{"injectables/HistoryJob.html":{}}}],["db_services/movies/moviedb.module",{"_index":447,"title":{},"body":{"modules/EventModule.html":{}}}],["db_services/movies/moviedb.service",{"_index":41,"title":{},"body":{"injectables/AnnounceJob.html":{},"injectables/HistoryJob.html":{},"injectables/WatchListJob.html":{}}}],["db_services/users/userdb.module",{"_index":452,"title":{},"body":{"modules/EventModule.html":{}}}],["db_services/users/userdb.service",{"_index":407,"title":{},"body":{"injectables/EmailService.html":{}}}],["db_services/votes/votedb.module",{"_index":449,"title":{},"body":{"modules/EventModule.html":{}}}],["db_services/votes/votedb.service",{"_index":499,"title":{},"body":{"injectables/HistoryJob.html":{},"injectables/WatchListJob.html":{}}}],["db_services/watchlist/watchlistdb.module",{"_index":448,"title":{},"body":{"modules/EventModule.html":{}}}],["db_services/watchlist/watchlistdb.service",{"_index":40,"title":{},"body":{"injectables/AnnounceJob.html":{},"injectables/HistoryJob.html":{},"injectables/WatchListJob.html":{}}}],["deal",{"_index":1415,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":1462,"title":{},"body":{"license.html":{}}}],["dear\\n${this.project_name",{"_index":425,"title":{},"body":{"injectables/EmailService.html":{}}}],["decorators",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{},"injectables/HistoryJob.html":{},"controllers/MovieController.html":{},"controllers/UserController.html":{},"controllers/VoteController.html":{},"injectables/WatchListJob.html":{}}}],["default",{"_index":363,"title":{},"body":{"injectables/DiscordService.html":{},"injectables/EmailService.html":{},"injectables/MovieService.html":{},"injectables/VoteService.html":{},"injectables/WatchListJob.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":23,"title":{},"body":{"injectables/AnnounceJob.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"classes/EmailOptInDto.html":{},"injectables/EmailService.html":{},"injectables/GravatarService.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoginDto.html":{},"controllers/MovieController.html":{},"injectables/MovieDBService.html":{},"injectables/MovieService.html":{},"classes/PasswordDto.html":{},"classes/PasswordNewDto.html":{},"injectables/PasswordService.html":{},"injectables/PrismaService.html":{},"classes/ProfileDto.html":{},"classes/RegisterDto.html":{},"classes/ResDto.html":{},"controllers/UserController.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"injectables/VoteDBService.html":{},"injectables/VoteService.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{},"index.html":{}}}],["definitions",{"_index":1337,"title":{},"body":{"index.html":{}}}],["del",{"_index":573,"title":{},"body":{"controllers/MovieController.html":{}}}],["delete",{"_index":596,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieDBService.html":{},"injectables/MovieService.html":{},"controllers/UserController.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"injectables/VoteDBService.html":{},"injectables/WatchListDBService.html":{}}}],["delete(':imdb_id",{"_index":625,"title":{},"body":{"controllers/MovieController.html":{},"controllers/VoteController.html":{}}}],["delete(@user",{"_index":871,"title":{},"body":{"controllers/UserController.html":{}}}],["delete(data",{"_index":1041,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["delete(imdb_id",{"_index":640,"title":{},"body":{"injectables/MovieDBService.html":{},"injectables/MovieService.html":{},"injectables/WatchListDBService.html":{}}}],["delete(user",{"_index":832,"title":{},"body":{"controllers/UserController.html":{}}}],["delete(user_id",{"_index":943,"title":{},"body":{"injectables/UserService.html":{}}}],["delete(where",{"_index":901,"title":{},"body":{"injectables/UserDBService.html":{}}}],["delete_all",{"_index":1031,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["delete_all(imdb_id",{"_index":1044,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["delete_all_proposed",{"_index":634,"title":{},"body":{"injectables/MovieDBService.html":{}}}],["delete_all_proposed(user_id",{"_index":642,"title":{},"body":{"injectables/MovieDBService.html":{}}}],["delete_all_user",{"_index":1032,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["delete_all_user(user_id",{"_index":1046,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["delete_media",{"_index":566,"title":{},"body":{"controllers/MovieController.html":{}}}],["delete_media(@user",{"_index":626,"title":{},"body":{"controllers/MovieController.html":{}}}],["delete_media(user",{"_index":572,"title":{},"body":{"controllers/MovieController.html":{}}}],["deleted",{"_index":751,"title":{},"body":{"injectables/MovieService.html":{},"injectables/UserService.html":{}}}],["dependencies",{"_index":92,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventModule.html":{},"modules/HistoryDBModule.html":{},"modules/MovieDBModule.html":{},"modules/MovieModule.html":{},"modules/UserDBModule.html":{},"modules/UserModule.html":{},"modules/VoteDBModule.html":{},"modules/VoteModule.html":{},"modules/WatchListDBModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["depending",{"_index":1378,"title":{},"body":{"index.html":{}}}],["desc",{"_index":1071,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["description",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MovieController.html":{},"controllers/UserController.html":{},"controllers/VoteController.html":{},"properties.html":{}}}],["description('the",{"_index":1495,"title":{},"body":{"miscellaneous/variables.html":{}}}],["description('whether",{"_index":1558,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dest_mail",{"_index":399,"title":{},"body":{"injectables/EmailService.html":{}}}],["dev",{"_index":1307,"title":{},"body":{"index.html":{}}}],["development",{"_index":1343,"title":{},"body":{"index.html":{}}}],["die",{"_index":50,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["diese",{"_index":54,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["different",{"_index":1371,"title":{},"body":{"index.html":{}}}],["directory",{"_index":1293,"title":{},"body":{"index.html":{}}}],["disabled",{"_index":1384,"title":{},"body":{"index.html":{}}}],["discord",{"_index":1528,"title":{},"body":{"miscellaneous/variables.html":{}}}],["discord.js",{"_index":367,"title":{},"body":{"injectables/DiscordService.html":{},"dependencies.html":{}}}],["discord_enable",{"_index":1556,"title":{},"body":{"miscellaneous/variables.html":{}}}],["discord_webhook_pattern",{"_index":1181,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["discord_webhook_url",{"_index":1559,"title":{},"body":{"miscellaneous/variables.html":{}}}],["discordservice",{"_index":19,"title":{"injectables/DiscordService.html":{}},"body":{"injectables/AnnounceJob.html":{},"injectables/DiscordService.html":{},"modules/EventModule.html":{},"coverage.html":{},"overview.html":{}}}],["dist",{"_index":1362,"title":{},"body":{"index.html":{}}}],["distribute",{"_index":1423,"title":{},"body":{"license.html":{}}}],["dived",{"_index":1328,"title":{},"body":{"index.html":{}}}],["docs",{"_index":130,"title":{},"body":{"modules/AppModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["docs/api",{"_index":1304,"title":{},"body":{"index.html":{}}}],["docs/backend",{"_index":127,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["docsview",{"_index":1596,"title":{},"body":{"miscellaneous/variables.html":{}}}],["documentation",{"_index":1151,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["documented",{"_index":1302,"title":{},"body":{"index.html":{}}}],["download",{"_index":1271,"title":{},"body":{"index.html":{}}}],["dto's",{"_index":1342,"title":{},"body":{"index.html":{}}}],["durch",{"_index":53,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["e",{"_index":704,"title":{},"body":{"injectables/MovieService.html":{},"injectables/VoteService.html":{}}}],["e.g",{"_index":1300,"title":{},"body":{"index.html":{}}}],["eight",{"_index":346,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["elias",{"_index":1403,"title":{},"body":{"license.html":{}}}],["eliasschaut",{"_index":1476,"title":{},"body":{"properties.html":{}}}],["email",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/EmailService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["email)'})@apibearerauth()@useguards(jwtauthguard)@post('username",{"_index":827,"title":{},"body":{"controllers/UserController.html":{}}}],["email)'})@get('reset/:username",{"_index":179,"title":{},"body":{"controllers/AuthController.html":{}}}],["email_host",{"_index":1546,"title":{},"body":{"miscellaneous/variables.html":{}}}],["email_host_password",{"_index":1555,"title":{},"body":{"miscellaneous/variables.html":{}}}],["email_host_user",{"_index":1553,"title":{},"body":{"miscellaneous/variables.html":{}}}],["email_opt_in",{"_index":378,"title":{},"body":{"classes/EmailOptInDto.html":{},"controllers/UserController.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{}}}],["email_opt_in(@user",{"_index":868,"title":{},"body":{"controllers/UserController.html":{}}}],["email_opt_in(user",{"_index":835,"title":{},"body":{"controllers/UserController.html":{}}}],["email_opt_in(user_id",{"_index":945,"title":{},"body":{"injectables/UserService.html":{}}}],["email_port",{"_index":1551,"title":{},"body":{"miscellaneous/variables.html":{}}}],["emailoptindto",{"_index":375,"title":{"classes/EmailOptInDto.html":{}},"body":{"classes/EmailOptInDto.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["emails",{"_index":1550,"title":{},"body":{"miscellaneous/variables.html":{}}}],["emailservice",{"_index":22,"title":{"injectables/EmailService.html":{}},"body":{"injectables/AnnounceJob.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/EmailService.html":{},"modules/EventModule.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["enabled",{"_index":357,"title":{},"body":{"injectables/DiscordService.html":{}}}],["enableshutdownhooks",{"_index":791,"title":{},"body":{"injectables/PrismaService.html":{}}}],["enableshutdownhooks(app",{"_index":793,"title":{},"body":{"injectables/PrismaService.html":{}}}],["env",{"_index":1275,"title":{},"body":{"index.html":{}}}],["env.tmp",{"_index":1276,"title":{},"body":{"index.html":{}}}],["error",{"_index":327,"title":{},"body":{"injectables/AuthService.html":{}}}],["es",{"_index":63,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["event",{"_index":1449,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["eventmodule",{"_index":96,"title":{"modules/EventModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EventModule.html":{},"modules.html":{},"overview.html":{}}}],["events",{"_index":1247,"title":{},"body":{"index.html":{}}}],["everything",{"_index":1364,"title":{},"body":{"index.html":{}}}],["executioncontext",{"_index":1622,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exist",{"_index":1108,"title":{},"body":{"injectables/VoteService.html":{}}}],["exists",{"_index":331,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MovieService.html":{},"injectables/VoteService.html":{}}}],["expiration",{"_index":1510,"title":{},"body":{"miscellaneous/variables.html":{}}}],["expires",{"_index":1573,"title":{},"body":{"miscellaneous/variables.html":{}}}],["expiresin",{"_index":245,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":45,"title":{},"body":{"injectables/AnnounceJob.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"classes/EmailOptInDto.html":{},"injectables/EmailService.html":{},"modules/EventModule.html":{},"injectables/GravatarService.html":{},"modules/HistoryDBModule.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/JwtUser.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoginDto.html":{},"controllers/MovieController.html":{},"modules/MovieDBModule.html":{},"injectables/MovieDBService.html":{},"interfaces/MovieExtType.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"classes/PasswordDto.html":{},"classes/PasswordNewDto.html":{},"injectables/PasswordService.html":{},"injectables/PrismaService.html":{},"classes/ProfileDto.html":{},"classes/RegisterDto.html":{},"classes/ResDto.html":{},"controllers/UserController.html":{},"modules/UserDBModule.html":{},"injectables/UserDBService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"modules/VoteDBModule.html":{},"injectables/VoteDBService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"modules/WatchListDBModule.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{},"interfaces/WatchlistExtType.html":{}}}],["exports",{"_index":472,"title":{},"body":{"modules/HistoryDBModule.html":{},"modules/MovieDBModule.html":{},"modules/UserDBModule.html":{},"modules/VoteDBModule.html":{},"modules/WatchListDBModule.html":{}}}],["express",{"_index":1203,"title":{},"body":{"dependencies.html":{},"license.html":{}}}],["extends",{"_index":514,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{}}}],["extractjwt",{"_index":521,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":528,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["failed",{"_index":308,"title":{},"body":{"injectables/AuthService.html":{}}}],["false",{"_index":354,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EmailService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["features",{"_index":1248,"title":{},"body":{"index.html":{}}}],["fetch(\"/api/user/check",{"_index":1606,"title":{},"body":{"miscellaneous/variables.html":{}}}],["file",{"_index":5,"title":{},"body":{"injectables/AnnounceJob.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"classes/EmailOptInDto.html":{},"injectables/EmailService.html":{},"modules/EventModule.html":{},"injectables/GravatarService.html":{},"modules/HistoryDBModule.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/JwtUser.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoginDto.html":{},"controllers/MovieController.html":{},"modules/MovieDBModule.html":{},"injectables/MovieDBService.html":{},"interfaces/MovieExtType.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"classes/PasswordDto.html":{},"classes/PasswordNewDto.html":{},"injectables/PasswordService.html":{},"injectables/PrismaService.html":{},"classes/ProfileDto.html":{},"classes/RegisterDto.html":{},"classes/ResDto.html":{},"controllers/UserController.html":{},"modules/UserDBModule.html":{},"injectables/UserDBService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"modules/VoteDBModule.html":{},"injectables/VoteDBService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"modules/WatchListDBModule.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{},"interfaces/WatchlistExtType.html":{},"coverage.html":{},"index.html":{}}}],["files",{"_index":1361,"title":{},"body":{"index.html":{},"license.html":{}}}],["filme",{"_index":55,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["find",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{}}}],["fitness",{"_index":1445,"title":{},"body":{"license.html":{}}}],["folder",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["following",{"_index":423,"title":{},"body":{"injectables/EmailService.html":{},"license.html":{}}}],["for'})@apibearerauth()@useguards(jwtauthguard)@get",{"_index":1007,"title":{},"body":{"controllers/VoteController.html":{}}}],["forbiddenexception",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MovieService.html":{},"injectables/UserService.html":{}}}],["forbiddenexception(\"invalid",{"_index":959,"title":{},"body":{"injectables/UserService.html":{}}}],["forbiddenexception(\"you",{"_index":991,"title":{},"body":{"injectables/UserService.html":{}}}],["forbiddenexception('email",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{}}}],["forbiddenexception('invalid",{"_index":297,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MovieService.html":{}}}],["format",{"_index":1394,"title":{},"body":{"index.html":{}}}],["formatted",{"_index":1392,"title":{},"body":{"index.html":{}}}],["found",{"_index":339,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MovieService.html":{},"index.html":{}}}],["framework",{"_index":1321,"title":{},"body":{"index.html":{}}}],["frameworks",{"_index":1313,"title":{},"body":{"index.html":{}}}],["free",{"_index":1408,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["frontend",{"_index":1366,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["frontend_url",{"_index":1496,"title":{},"body":{"miscellaneous/variables.html":{}}}],["full",{"_index":1241,"title":{},"body":{"index.html":{}}}],["function",{"_index":555,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"coverage.html":{}}}],["functions",{"_index":1232,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["furnished",{"_index":1430,"title":{},"body":{"license.html":{}}}],["generate",{"_index":1356,"title":{},"body":{"index.html":{}}}],["generate_challenge_url",{"_index":384,"title":{},"body":{"injectables/EmailService.html":{}}}],["generate_challenge_url(challenge",{"_index":390,"title":{},"body":{"injectables/EmailService.html":{}}}],["generate_gravatar_url",{"_index":455,"title":{},"body":{"injectables/GravatarService.html":{}}}],["generate_gravatar_url(username",{"_index":458,"title":{},"body":{"injectables/GravatarService.html":{}}}],["generate_pw_challenge_url",{"_index":385,"title":{},"body":{"injectables/EmailService.html":{}}}],["generate_pw_challenge_url(challenge",{"_index":392,"title":{},"body":{"injectables/EmailService.html":{}}}],["generate_type(http_code",{"_index":1614,"title":{},"body":{"miscellaneous/variables.html":{}}}],["genre",{"_index":663,"title":{},"body":{"interfaces/MovieExtType.html":{},"injectables/MovieService.html":{}}}],["geschaut:\\n${watchlist.join(\"\\n\")}\\n",{"_index":57,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["get(':imdb_id",{"_index":617,"title":{},"body":{"controllers/MovieController.html":{},"controllers/VoteController.html":{}}}],["get(':user_id",{"_index":886,"title":{},"body":{"controllers/UserController.html":{}}}],["get('all",{"_index":610,"title":{},"body":{"controllers/MovieController.html":{}}}],["get('check",{"_index":885,"title":{},"body":{"controllers/UserController.html":{}}}],["get('confirm/:challenge",{"_index":212,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('data",{"_index":873,"title":{},"body":{"controllers/UserController.html":{}}}],["get('history",{"_index":614,"title":{},"body":{"controllers/MovieController.html":{}}}],["get('reset/:username",{"_index":215,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('watchlist",{"_index":612,"title":{},"body":{"controllers/MovieController.html":{}}}],["get(@user",{"_index":861,"title":{},"body":{"controllers/UserController.html":{}}}],["get(data",{"_index":1048,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["get(imdb_id",{"_index":645,"title":{},"body":{"injectables/MovieDBService.html":{},"injectables/MovieService.html":{}}}],["get(user",{"_index":839,"title":{},"body":{"controllers/UserController.html":{}}}],["get(user_id",{"_index":948,"title":{},"body":{"injectables/UserService.html":{}}}],["get(userwhereuniqueinput",{"_index":904,"title":{},"body":{"injectables/UserDBService.html":{}}}],["get_all",{"_index":477,"title":{},"body":{"injectables/HistoryDBService.html":{},"injectables/MovieDBService.html":{},"injectables/MovieService.html":{},"injectables/UserDBService.html":{},"injectables/WatchListDBService.html":{}}}],["get_all_media",{"_index":567,"title":{},"body":{"controllers/MovieController.html":{}}}],["get_all_opt_in",{"_index":896,"title":{},"body":{"injectables/UserDBService.html":{}}}],["get_all_proposed",{"_index":635,"title":{},"body":{"injectables/MovieDBService.html":{}}}],["get_all_proposed(user_id",{"_index":648,"title":{},"body":{"injectables/MovieDBService.html":{}}}],["get_cookie",{"_index":1162,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["get_cookie(\"access_token",{"_index":1611,"title":{},"body":{"miscellaneous/variables.html":{}}}],["get_cookie_all",{"_index":1163,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["get_data",{"_index":819,"title":{},"body":{"controllers/UserController.html":{}}}],["get_data(@user",{"_index":874,"title":{},"body":{"controllers/UserController.html":{}}}],["get_data(user",{"_index":842,"title":{},"body":{"controllers/UserController.html":{}}}],["get_history",{"_index":568,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{}}}],["get_imdb",{"_index":636,"title":{},"body":{"injectables/MovieDBService.html":{}}}],["get_imdb(imdb_id",{"_index":650,"title":{},"body":{"injectables/MovieDBService.html":{}}}],["get_media",{"_index":569,"title":{},"body":{"controllers/MovieController.html":{}}}],["get_media(@param('imdb_id",{"_index":618,"title":{},"body":{"controllers/MovieController.html":{}}}],["get_media(imdb_id",{"_index":584,"title":{},"body":{"controllers/MovieController.html":{}}}],["get_most_voted",{"_index":1033,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["get_most_voted(count",{"_index":1050,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["get_num_of_votes",{"_index":1034,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["get_num_of_votes(imdb_id",{"_index":1053,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["get_public",{"_index":932,"title":{},"body":{"injectables/UserService.html":{}}}],["get_public(user_id",{"_index":950,"title":{},"body":{"injectables/UserService.html":{}}}],["get_user",{"_index":820,"title":{},"body":{"controllers/UserController.html":{}}}],["get_user(@param('user_id",{"_index":887,"title":{},"body":{"controllers/UserController.html":{}}}],["get_user(user_id",{"_index":846,"title":{},"body":{"controllers/UserController.html":{}}}],["get_user_data",{"_index":933,"title":{},"body":{"injectables/UserService.html":{}}}],["get_user_data(user_id",{"_index":952,"title":{},"body":{"injectables/UserService.html":{}}}],["get_vote",{"_index":997,"title":{},"body":{"controllers/VoteController.html":{}}}],["get_vote(@param('imdb_id",{"_index":1019,"title":{},"body":{"controllers/VoteController.html":{}}}],["get_vote(imdb_id",{"_index":1001,"title":{},"body":{"controllers/VoteController.html":{}}}],["get_votes",{"_index":998,"title":{},"body":{"controllers/VoteController.html":{},"injectables/VoteService.html":{}}}],["get_votes(@user",{"_index":1017,"title":{},"body":{"controllers/VoteController.html":{}}}],["get_votes(imdb_id",{"_index":1084,"title":{},"body":{"injectables/VoteService.html":{}}}],["get_votes(user",{"_index":1004,"title":{},"body":{"controllers/VoteController.html":{}}}],["get_votes_movie",{"_index":1035,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["get_votes_movie(imdb_id",{"_index":1055,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["get_votes_user",{"_index":1036,"title":{},"body":{"injectables/VoteDBService.html":{},"injectables/VoteService.html":{}}}],["get_votes_user(user_id",{"_index":1057,"title":{},"body":{"injectables/VoteDBService.html":{},"injectables/VoteService.html":{}}}],["get_watchlist",{"_index":570,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{}}}],["getränke",{"_index":65,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["getting",{"_index":1094,"title":{"index.html":{},"license.html":{}},"body":{"injectables/VoteService.html":{}}}],["gibt",{"_index":64,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["given",{"_index":342,"title":{},"body":{"injectables/AuthService.html":{},"controllers/MovieController.html":{},"controllers/UserController.html":{},"controllers/VoteController.html":{}}}],["granted",{"_index":1407,"title":{},"body":{"license.html":{}}}],["gravatar",{"_index":863,"title":{},"body":{"controllers/UserController.html":{}}}],["gravatar)'})@apibearerauth()@useguards(jwtauthguard)@post",{"_index":852,"title":{},"body":{"controllers/UserController.html":{}}}],["gravatar_url",{"_index":954,"title":{},"body":{"injectables/UserService.html":{}}}],["gravatarservice",{"_index":453,"title":{"injectables/GravatarService.html":{}},"body":{"injectables/GravatarService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["guide",{"_index":1309,"title":{},"body":{"index.html":{}}}],["handle",{"_index":1322,"title":{},"body":{"index.html":{}}}],["has(imdb_id",{"_index":485,"title":{},"body":{"injectables/HistoryDBService.html":{},"injectables/MovieDBService.html":{}}}],["has(user_id",{"_index":1059,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["has_user",{"_index":897,"title":{},"body":{"injectables/UserDBService.html":{}}}],["has_user(username",{"_index":909,"title":{},"body":{"injectables/UserDBService.html":{}}}],["hash",{"_index":463,"title":{},"body":{"injectables/GravatarService.html":{},"injectables/PasswordService.html":{}}}],["hash(password",{"_index":776,"title":{},"body":{"injectables/PasswordService.html":{}}}],["hash_md5",{"_index":773,"title":{},"body":{"injectables/PasswordService.html":{}}}],["hash_md5(string",{"_index":778,"title":{},"body":{"injectables/PasswordService.html":{}}}],["hashed_password",{"_index":352,"title":{},"body":{"injectables/AuthService.html":{}}}],["headers",{"_index":1607,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hello",{"_index":421,"title":{},"body":{"injectables/EmailService.html":{}}}],["helmet",{"_index":1214,"title":{},"body":{"dependencies.html":{}}}],["hereby",{"_index":1406,"title":{},"body":{"license.html":{}}}],["history",{"_index":581,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{},"miscellaneous/variables.html":{}}}],["historydb.service",{"_index":473,"title":{},"body":{"modules/HistoryDBModule.html":{}}}],["historydbmodule",{"_index":438,"title":{"modules/HistoryDBModule.html":{}},"body":{"modules/EventModule.html":{},"modules/HistoryDBModule.html":{},"modules/MovieModule.html":{},"modules.html":{},"overview.html":{}}}],["historydbservice",{"_index":469,"title":{"injectables/HistoryDBService.html":{}},"body":{"modules/HistoryDBModule.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"injectables/MovieService.html":{},"coverage.html":{},"overview.html":{}}}],["historyjob",{"_index":442,"title":{"injectables/HistoryJob.html":{}},"body":{"modules/EventModule.html":{},"injectables/HistoryJob.html":{},"coverage.html":{},"overview.html":{}}}],["historyview",{"_index":1593,"title":{},"body":{"miscellaneous/variables.html":{}}}],["histroydbservice",{"_index":682,"title":{},"body":{"injectables/MovieService.html":{}}}],["holders",{"_index":1451,"title":{},"body":{"license.html":{}}}],["home",{"_index":1582,"title":{},"body":{"miscellaneous/variables.html":{}}}],["homeview",{"_index":1584,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hood",{"_index":1390,"title":{},"body":{"index.html":{}}}],["host",{"_index":410,"title":{},"body":{"injectables/EmailService.html":{},"miscellaneous/variables.html":{}}}],["http://[::1]:3000/api",{"_index":1301,"title":{},"body":{"index.html":{}}}],["http://[::1]:3000/docs/api",{"_index":1306,"title":{},"body":{"index.html":{}}}],["http://[::1]:3000/docs/backend",{"_index":1326,"title":{},"body":{"index.html":{}}}],["http_code",{"_index":1615,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://www.gravatar.com/avatar/${hash",{"_index":465,"title":{},"body":{"injectables/GravatarService.html":{}}}],["https://www.omdbapi.com/apikey.aspx",{"_index":1515,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https:\\/\\/discord.com\\/api\\/webhooks\\/[0",{"_index":1567,"title":{},"body":{"miscellaneous/variables.html":{}}}],["id",{"_index":531,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/JwtUser.html":{},"injectables/MovieService.html":{},"injectables/UserService.html":{},"injectables/VoteDBService.html":{},"injectables/VoteService.html":{}}}],["identifier",{"_index":1152,"title":{},"body":{"coverage.html":{}}}],["ignore",{"_index":373,"title":{},"body":{"injectables/DiscordService.html":{}}}],["ignoreexpiration",{"_index":529,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["imdb",{"_index":606,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{},"dependencies.html":{}}}],["imdb_id",{"_index":487,"title":{},"body":{"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"controllers/MovieController.html":{},"injectables/MovieDBService.html":{},"interfaces/MovieExtType.html":{},"injectables/MovieService.html":{},"controllers/VoteController.html":{},"injectables/VoteDBService.html":{},"injectables/VoteService.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{},"interfaces/WatchlistExtType.html":{}}}],["imdb_id'})@apibearerauth()@useguards(jwtauthguard)@get(':imdb_id",{"_index":587,"title":{},"body":{"controllers/MovieController.html":{}}}],["imdb_id_pattern",{"_index":698,"title":{},"body":{"injectables/MovieService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["imdb_id_pattern.test(imdb_id",{"_index":715,"title":{},"body":{"injectables/MovieService.html":{}}}],["imdb_id_user_id",{"_index":1106,"title":{},"body":{"injectables/VoteService.html":{}}}],["imdb_ids",{"_index":1005,"title":{},"body":{"controllers/VoteController.html":{}}}],["implements",{"_index":557,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/PrismaService.html":{}}}],["implied",{"_index":1441,"title":{},"body":{"license.html":{}}}],["import",{"_index":37,"title":{},"body":{"injectables/AnnounceJob.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"injectables/EmailService.html":{},"modules/EventModule.html":{},"injectables/GravatarService.html":{},"modules/HistoryDBModule.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"controllers/MovieController.html":{},"modules/MovieDBModule.html":{},"injectables/MovieDBService.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"injectables/PasswordService.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"modules/UserDBModule.html":{},"injectables/UserDBService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"modules/VoteDBModule.html":{},"injectables/VoteDBService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"modules/WatchListDBModule.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{}}}],["imports",{"_index":104,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventModule.html":{},"modules/MovieModule.html":{},"modules/UserModule.html":{},"modules/VoteModule.html":{}}}],["inbox",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["included",{"_index":1435,"title":{},"body":{"license.html":{}}}],["including",{"_index":1417,"title":{},"body":{"license.html":{}}}],["incoming",{"_index":1331,"title":{},"body":{"index.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"injectables/AnnounceJob.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"classes/EmailOptInDto.html":{},"injectables/EmailService.html":{},"injectables/GravatarService.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"injectables/JwtStrategy.html":{},"interfaces/JwtUser.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoginDto.html":{},"controllers/MovieController.html":{},"injectables/MovieDBService.html":{},"interfaces/MovieExtType.html":{},"injectables/MovieService.html":{},"classes/PasswordDto.html":{},"classes/PasswordNewDto.html":{},"injectables/PasswordService.html":{},"injectables/PrismaService.html":{},"classes/ProfileDto.html":{},"classes/RegisterDto.html":{},"classes/ResDto.html":{},"controllers/UserController.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"injectables/VoteDBService.html":{},"injectables/VoteService.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{},"interfaces/WatchlistExtType.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["inestapplication",{"_index":794,"title":{},"body":{"injectables/PrismaService.html":{}}}],["info",{"_index":3,"title":{},"body":{"injectables/AnnounceJob.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"classes/EmailOptInDto.html":{},"injectables/EmailService.html":{},"modules/EventModule.html":{},"injectables/GravatarService.html":{},"modules/HistoryDBModule.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/JwtUser.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoginDto.html":{},"controllers/MovieController.html":{},"modules/MovieDBModule.html":{},"injectables/MovieDBService.html":{},"interfaces/MovieExtType.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"classes/PasswordDto.html":{},"classes/PasswordNewDto.html":{},"injectables/PasswordService.html":{},"injectables/PrismaService.html":{},"classes/ProfileDto.html":{},"classes/RegisterDto.html":{},"classes/ResDto.html":{},"controllers/UserController.html":{},"modules/UserDBModule.html":{},"injectables/UserDBService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"modules/VoteDBModule.html":{},"injectables/VoteDBService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"modules/WatchListDBModule.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{},"interfaces/WatchlistExtType.html":{}}}],["information",{"_index":585,"title":{},"body":{"controllers/MovieController.html":{},"controllers/UserController.html":{}}}],["infos",{"_index":59,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["injectable",{"_index":0,"title":{"injectables/AnnounceJob.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"injectables/EmailService.html":{},"injectables/GravatarService.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"injectables/MovieDBService.html":{},"injectables/MovieService.html":{},"injectables/PasswordService.html":{},"injectables/PrismaService.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{},"injectables/VoteDBService.html":{},"injectables/VoteService.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{}},"body":{"injectables/AnnounceJob.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"injectables/EmailService.html":{},"injectables/GravatarService.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"injectables/MovieDBService.html":{},"injectables/MovieService.html":{},"injectables/PasswordService.html":{},"injectables/PrismaService.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{},"injectables/VoteDBService.html":{},"injectables/VoteService.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{},"coverage.html":{}}}],["injectables",{"_index":2,"title":{},"body":{"injectables/AnnounceJob.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"injectables/EmailService.html":{},"injectables/GravatarService.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"injectables/MovieDBService.html":{},"injectables/MovieService.html":{},"injectables/PasswordService.html":{},"injectables/PrismaService.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{},"injectables/VoteDBService.html":{},"injectables/VoteService.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{},"overview.html":{}}}],["input",{"_index":306,"title":{},"body":{"injectables/AuthService.html":{}}}],["inputs",{"_index":307,"title":{},"body":{"injectables/AuthService.html":{}}}],["install",{"_index":1345,"title":{},"body":{"index.html":{}}}],["installation",{"_index":1265,"title":{},"body":{"index.html":{}}}],["installed",{"_index":1267,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":328,"title":{},"body":{"injectables/AuthService.html":{}}}],["interact",{"_index":1385,"title":{},"body":{"index.html":{}}}],["interested",{"_index":757,"title":{},"body":{"injectables/MovieService.html":{},"interfaces/WatchlistExtType.html":{},"index.html":{}}}],["interface",{"_index":533,"title":{"interfaces/JwtUser.html":{},"interfaces/MovieExtType.html":{},"interfaces/WatchlistExtType.html":{}},"body":{"interfaces/JwtUser.html":{},"interfaces/MovieExtType.html":{},"interfaces/WatchlistExtType.html":{},"coverage.html":{},"index.html":{}}}],["interfaces",{"_index":534,"title":{},"body":{"interfaces/JwtUser.html":{},"interfaces/MovieExtType.html":{},"interfaces/WatchlistExtType.html":{},"overview.html":{}}}],["internal",{"_index":1338,"title":{},"body":{"index.html":{}}}],["internalservererrorexception",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{},"injectables/VoteService.html":{}}}],["internalservererrorexception('error",{"_index":1093,"title":{},"body":{"injectables/VoteService.html":{}}}],["internalservererrorexception('unable",{"_index":332,"title":{},"body":{"injectables/AuthService.html":{}}}],["isglobal",{"_index":122,"title":{},"body":{"modules/AppModule.html":{}}}],["issue",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{}}}],["ist",{"_index":52,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["itself",{"_index":1360,"title":{},"body":{"index.html":{}}}],["job",{"_index":72,"title":{},"body":{"injectables/AnnounceJob.html":{},"injectables/HistoryJob.html":{},"injectables/WatchListJob.html":{}}}],["jobs/announce.job",{"_index":451,"title":{},"body":{"modules/EventModule.html":{}}}],["jobs/history.job",{"_index":445,"title":{},"body":{"modules/EventModule.html":{}}}],["jobs/watchlist.job",{"_index":446,"title":{},"body":{"modules/EventModule.html":{}}}],["joi",{"_index":1217,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["joi.boolean().required().default(\"false",{"_index":1557,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.number().required().default(\"15",{"_index":1540,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.number().required().default(\"2",{"_index":1544,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.number().required().default(\"20",{"_index":1516,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.number().required().default(\"3000\").port",{"_index":1499,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.number().required().default(\"5",{"_index":1519,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.number().required().default(\"587",{"_index":1552,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.object",{"_index":1493,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.required",{"_index":1561,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.string().required",{"_index":1494,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.string().required().default(\"0",{"_index":1521,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.string().required().default(\"2h",{"_index":1509,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.string().required().default(\"45",{"_index":1536,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.string().required().default(\"file:./dev.db",{"_index":1502,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.string().required().default(\"secret",{"_index":1504,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.string().required().domain",{"_index":1547,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.string().required().email",{"_index":1554,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.string().required().token",{"_index":1512,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.string().required().uri",{"_index":1497,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.string().when('discord_enable",{"_index":1560,"title":{},"body":{"miscellaneous/variables.html":{}}}],["join",{"_index":119,"title":{},"body":{"modules/AppModule.html":{}}}],["join(__dirname",{"_index":129,"title":{},"body":{"modules/AppModule.html":{}}}],["js",{"_index":1210,"title":{},"body":{"dependencies.html":{}}}],["js/md5",{"_index":784,"title":{},"body":{"injectables/PasswordService.html":{}}}],["jwt",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["jwt.stategy",{"_index":238,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwt_expiration",{"_index":1508,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwt_secret",{"_index":1503,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwtauthguard",{"_index":510,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"injectables/JwtAuthGuard.html":{},"controllers/MovieController.html":{},"controllers/UserController.html":{},"controllers/VoteController.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":527,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":236,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":241,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":226,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["jwtuser",{"_index":160,"title":{"interfaces/JwtUser.html":{}},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"interfaces/JwtUser.html":{},"controllers/MovieController.html":{},"controllers/UserController.html":{},"controllers/VoteController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["key",{"_index":1513,"title":{},"body":{"miscellaneous/variables.html":{}}}],["kind",{"_index":1440,"title":{},"body":{"license.html":{}}}],["knowledge",{"_index":1311,"title":{},"body":{"index.html":{}}}],["letter",{"_index":349,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["liability",{"_index":1455,"title":{},"body":{"license.html":{}}}],["liable",{"_index":1452,"title":{},"body":{"license.html":{}}}],["library",{"_index":1297,"title":{},"body":{"index.html":{}}}],["license",{"_index":1398,"title":{"license.html":{}},"body":{"license.html":{},"properties.html":{}}}],["limitation",{"_index":1418,"title":{},"body":{"license.html":{}}}],["limited",{"_index":1442,"title":{},"body":{"license.html":{}}}],["link",{"_index":319,"title":{},"body":{"injectables/AuthService.html":{},"injectables/HistoryJob.html":{},"interfaces/MovieExtType.html":{},"injectables/MovieService.html":{},"injectables/UserService.html":{},"interfaces/WatchlistExtType.html":{},"miscellaneous/variables.html":{}}}],["link:\\n",{"_index":427,"title":{},"body":{"injectables/EmailService.html":{}}}],["link:\\n${challenge_url}\\n\\n",{"_index":424,"title":{},"body":{"injectables/EmailService.html":{}}}],["list",{"_index":1264,"title":{},"body":{"index.html":{}}}],["listen",{"_index":1500,"title":{},"body":{"miscellaneous/variables.html":{}}}],["literal",{"_index":912,"title":{},"body":{"injectables/UserDBService.html":{}}}],["loading",{"_index":1599,"title":{},"body":{"miscellaneous/variables.html":{}}}],["local",{"_index":543,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["local.strategy",{"_index":234,"title":{},"body":{"modules/AuthModule.html":{}}}],["localauthguard",{"_index":187,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["localstrategy",{"_index":227,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["located",{"_index":1291,"title":{},"body":{"index.html":{}}}],["log",{"_index":321,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["logged_in",{"_index":1598,"title":{},"body":{"miscellaneous/variables.html":{}}}],["loggermiddleware",{"_index":546,"title":{"injectables/LoggerMiddleware.html":{}},"body":{"injectables/LoggerMiddleware.html":{},"coverage.html":{}}}],["login",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["login(@user",{"_index":206,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(user",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login/:challenge",{"_index":1585,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logindto",{"_index":162,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/LoginDto.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["loginview",{"_index":1586,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lots",{"_index":1334,"title":{},"body":{"index.html":{}}}],["mail",{"_index":324,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["main",{"_index":1329,"title":{},"body":{"index.html":{}}}],["manage",{"_index":1252,"title":{},"body":{"index.html":{}}}],["management",{"_index":1243,"title":{},"body":{"index.html":{}}}],["manager",{"_index":1240,"title":{},"body":{"index.html":{}}}],["matching",{"_index":88,"title":{},"body":{"injectables/AnnounceJob.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"classes/EmailOptInDto.html":{},"injectables/EmailService.html":{},"modules/EventModule.html":{},"injectables/GravatarService.html":{},"modules/HistoryDBModule.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/JwtUser.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoginDto.html":{},"controllers/MovieController.html":{},"modules/MovieDBModule.html":{},"injectables/MovieDBService.html":{},"interfaces/MovieExtType.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"classes/PasswordDto.html":{},"classes/PasswordNewDto.html":{},"injectables/PasswordService.html":{},"injectables/PrismaService.html":{},"classes/ProfileDto.html":{},"classes/RegisterDto.html":{},"classes/ResDto.html":{},"controllers/UserController.html":{},"modules/UserDBModule.html":{},"injectables/UserDBService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"modules/VoteDBModule.html":{},"injectables/VoteDBService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"modules/WatchListDBModule.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{},"interfaces/WatchlistExtType.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["math.round(movie_data.runtime/15",{"_index":1144,"title":{},"body":{"injectables/WatchListJob.html":{}}}],["max_proposeable_movies",{"_index":680,"title":{},"body":{"injectables/MovieService.html":{},"miscellaneous/variables.html":{}}}],["max_votes",{"_index":1082,"title":{},"body":{"injectables/VoteService.html":{},"miscellaneous/variables.html":{}}}],["maximum",{"_index":727,"title":{},"body":{"injectables/MovieService.html":{},"injectables/VoteService.html":{},"miscellaneous/variables.html":{}}}],["md5",{"_index":782,"title":{},"body":{"injectables/PasswordService.html":{}}}],["md5(string).tostring",{"_index":787,"title":{},"body":{"injectables/PasswordService.html":{}}}],["mehr",{"_index":58,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["merchantability",{"_index":1444,"title":{},"body":{"license.html":{}}}],["merge",{"_index":1421,"title":{},"body":{"license.html":{}}}],["message",{"_index":317,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"injectables/MovieService.html":{},"classes/ResDto.html":{},"injectables/UserService.html":{}}}],["metadata",{"_index":1225,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":1236,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["methods",{"_index":13,"title":{},"body":{"injectables/AnnounceJob.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"injectables/EmailService.html":{},"injectables/GravatarService.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"controllers/MovieController.html":{},"injectables/MovieDBService.html":{},"injectables/MovieService.html":{},"injectables/PasswordService.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"injectables/VoteDBService.html":{},"injectables/VoteService.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{}}}],["migrate",{"_index":1396,"title":{},"body":{"index.html":{}}}],["minimum",{"_index":345,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["minutes",{"_index":1543,"title":{},"body":{"miscellaneous/variables.html":{}}}],["miscellaneous",{"_index":1231,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1399,"title":{},"body":{"license.html":{},"properties.html":{}}}],["mode",{"_index":1344,"title":{},"body":{"index.html":{}}}],["modify",{"_index":1420,"title":{},"body":{"license.html":{}}}],["module",{"_index":89,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventModule.html":{},"modules/HistoryDBModule.html":{},"modules/MovieDBModule.html":{},"modules/MovieModule.html":{},"modules/UserDBModule.html":{},"modules/UserModule.html":{},"modules/VoteDBModule.html":{},"modules/VoteModule.html":{},"modules/WatchListDBModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventModule.html":{},"modules/HistoryDBModule.html":{},"modules/MovieDBModule.html":{},"modules/MovieModule.html":{},"modules/UserDBModule.html":{},"modules/UserModule.html":{},"modules/VoteDBModule.html":{},"modules/VoteModule.html":{},"modules/WatchListDBModule.html":{}}}],["modules",{"_index":91,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventModule.html":{},"modules/HistoryDBModule.html":{},"modules/MovieDBModule.html":{},"modules/MovieModule.html":{},"modules/UserDBModule.html":{},"modules/UserModule.html":{},"modules/VoteDBModule.html":{},"modules/VoteModule.html":{},"modules/WatchListDBModule.html":{},"modules.html":{},"overview.html":{}}}],["momomat",{"_index":1317,"title":{},"body":{"index.html":{}}}],["monday",{"_index":1239,"title":{},"body":{"index.html":{}}}],["movie",{"_index":42,"title":{},"body":{"injectables/AnnounceJob.html":{},"injectables/HistoryJob.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"injectables/VoteDBService.html":{},"injectables/VoteService.html":{},"injectables/WatchListJob.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["movie'})@apibearerauth()@useguards(jwtauthguard)@delete(':imdb_id",{"_index":1012,"title":{},"body":{"controllers/VoteController.html":{}}}],["movie'})@apibearerauth()@useguards(jwtauthguard)@post(':imdb_id",{"_index":594,"title":{},"body":{"controllers/MovieController.html":{},"controllers/VoteController.html":{}}}],["movie'})@get(':imdb_id",{"_index":1002,"title":{},"body":{"controllers/VoteController.html":{}}}],["movie).proposer_id",{"_index":989,"title":{},"body":{"injectables/UserService.html":{}}}],["movie.controller",{"_index":672,"title":{},"body":{"modules/MovieModule.html":{}}}],["movie.createdat",{"_index":714,"title":{},"body":{"injectables/MovieService.html":{}}}],["movie.genre",{"_index":713,"title":{},"body":{"injectables/MovieService.html":{}}}],["movie.genres",{"_index":734,"title":{},"body":{"injectables/MovieService.html":{}}}],["movie.imdb_id",{"_index":503,"title":{},"body":{"injectables/HistoryJob.html":{},"injectables/MovieService.html":{},"injectables/WatchListJob.html":{}}}],["movie.imdburl",{"_index":735,"title":{},"body":{"injectables/MovieService.html":{}}}],["movie.link",{"_index":711,"title":{},"body":{"injectables/MovieService.html":{}}}],["movie.proposer_id",{"_index":708,"title":{},"body":{"injectables/MovieService.html":{},"injectables/VoteService.html":{}}}],["movie.service",{"_index":599,"title":{},"body":{"controllers/MovieController.html":{},"modules/MovieModule.html":{}}}],["movie.start_time.tolocalestring",{"_index":81,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["movie.title",{"_index":710,"title":{},"body":{"injectables/MovieService.html":{}}}],["movie.year",{"_index":712,"title":{},"body":{"injectables/MovieService.html":{}}}],["movie_data",{"_index":78,"title":{},"body":{"injectables/AnnounceJob.html":{},"injectables/HistoryJob.html":{},"injectables/WatchListJob.html":{}}}],["movie_data.link",{"_index":505,"title":{},"body":{"injectables/HistoryJob.html":{}}}],["movie_data.title",{"_index":83,"title":{},"body":{"injectables/AnnounceJob.html":{},"injectables/HistoryJob.html":{}}}],["moviecontroller",{"_index":564,"title":{"controllers/MovieController.html":{}},"body":{"controllers/MovieController.html":{},"modules/MovieModule.html":{},"coverage.html":{}}}],["moviedb.service",{"_index":632,"title":{},"body":{"modules/MovieDBModule.html":{}}}],["moviedb_data",{"_index":733,"title":{},"body":{"injectables/MovieService.html":{}}}],["moviedbmodule",{"_index":439,"title":{"modules/MovieDBModule.html":{}},"body":{"modules/EventModule.html":{},"modules/MovieDBModule.html":{},"modules/MovieModule.html":{},"modules/UserModule.html":{},"modules/VoteModule.html":{},"modules.html":{},"overview.html":{}}}],["moviedbservice",{"_index":21,"title":{"injectables/MovieDBService.html":{}},"body":{"injectables/AnnounceJob.html":{},"injectables/HistoryJob.html":{},"modules/MovieDBModule.html":{},"injectables/MovieDBService.html":{},"injectables/MovieService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"injectables/WatchListJob.html":{},"coverage.html":{},"overview.html":{}}}],["movieexttype",{"_index":601,"title":{"interfaces/MovieExtType.html":{}},"body":{"controllers/MovieController.html":{},"interfaces/MovieExtType.html":{},"injectables/MovieService.html":{},"coverage.html":{}}}],["moviemodule",{"_index":97,"title":{"modules/MovieModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MovieModule.html":{},"modules.html":{},"overview.html":{}}}],["movies",{"_index":578,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"injectables/VoteService.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["movieservice",{"_index":598,"title":{"injectables/MovieService.html":{}},"body":{"controllers/MovieController.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"coverage.html":{},"overview.html":{}}}],["msg",{"_index":1601,"title":{},"body":{"miscellaneous/variables.html":{}}}],["n",{"_index":49,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["name",{"_index":27,"title":{},"body":{"injectables/AnnounceJob.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"injectables/EmailService.html":{},"injectables/GravatarService.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"controllers/MovieController.html":{},"injectables/MovieDBService.html":{},"injectables/MovieService.html":{},"injectables/PasswordService.html":{},"injectables/PrismaService.html":{},"classes/ProfileDto.html":{},"classes/RegisterDto.html":{},"controllers/UserController.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"injectables/VoteDBService.html":{},"injectables/VoteService.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["name_pattern",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["name_pattern.test(data.name",{"_index":958,"title":{},"body":{"injectables/UserService.html":{}}}],["name_pattern.test(user.name",{"_index":303,"title":{},"body":{"injectables/AuthService.html":{}}}],["navigation",{"_index":1370,"title":{},"body":{"index.html":{}}}],["need",{"_index":978,"title":{},"body":{"injectables/UserService.html":{},"index.html":{}}}],["nestjs",{"_index":1320,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":38,"title":{},"body":{"injectables/AnnounceJob.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"injectables/EmailService.html":{},"modules/EventModule.html":{},"injectables/GravatarService.html":{},"modules/HistoryDBModule.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"controllers/MovieController.html":{},"modules/MovieDBModule.html":{},"injectables/MovieDBService.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"injectables/PasswordService.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"modules/UserDBModule.html":{},"injectables/UserDBService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"modules/VoteDBModule.html":{},"injectables/VoteDBService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"modules/WatchListDBModule.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":116,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":1201,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":237,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":233,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1202,"title":{},"body":{"dependencies.html":{}}}],["nestjs/schedule",{"_index":114,"title":{},"body":{"modules/AppModule.html":{},"injectables/HistoryJob.html":{},"injectables/WatchListJob.html":{},"dependencies.html":{}}}],["nestjs/serve",{"_index":108,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MovieController.html":{},"controllers/UserController.html":{},"controllers/VoteController.html":{},"dependencies.html":{}}}],["nestmiddleware",{"_index":556,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["new",{"_index":174,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"injectables/LocalStrategy.html":{},"injectables/MovieService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"injectables/WatchListJob.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["new_challenge",{"_index":982,"title":{},"body":{"injectables/UserService.html":{}}}],["new_challenge_url",{"_index":984,"title":{},"body":{"injectables/UserService.html":{}}}],["new_username",{"_index":941,"title":{},"body":{"injectables/UserService.html":{}}}],["newer",{"_index":1270,"title":{},"body":{"index.html":{}}}],["newest",{"_index":1272,"title":{},"body":{"index.html":{}}}],["newsletter",{"_index":866,"title":{},"body":{"controllers/UserController.html":{}}}],["newsletter)'})@apibearerauth()@useguards(jwtauthguard)@post('email_opt_in",{"_index":837,"title":{},"body":{"controllers/UserController.html":{}}}],["next",{"_index":551,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/UserService.html":{},"properties.html":{}}}],["node.js",{"_index":1266,"title":{},"body":{"index.html":{}}}],["nodemailer",{"_index":404,"title":{},"body":{"injectables/EmailService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["nodemailer.createtransport",{"_index":409,"title":{},"body":{"injectables/EmailService.html":{}}}],["noninfringement",{"_index":1448,"title":{},"body":{"license.html":{}}}],["note",{"_index":1347,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MovieService.html":{}}}],["notfoundexception('email",{"_index":338,"title":{},"body":{"injectables/AuthService.html":{}}}],["notfoundexception('movie",{"_index":705,"title":{},"body":{"injectables/MovieService.html":{}}}],["notfoundexception('password",{"_index":355,"title":{},"body":{"injectables/AuthService.html":{}}}],["notice",{"_index":1433,"title":{},"body":{"license.html":{}}}],["notifications",{"_index":1263,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["now",{"_index":337,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["npm",{"_index":1287,"title":{},"body":{"index.html":{}}}],["npx",{"_index":1393,"title":{},"body":{"index.html":{}}}],["null",{"_index":971,"title":{},"body":{"injectables/UserService.html":{}}}],["num_of",{"_index":1037,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["num_of(user_id",{"_index":1061,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["num_of_movies",{"_index":1124,"title":{},"body":{"injectables/WatchListJob.html":{},"miscellaneous/variables.html":{}}}],["num_of_votes",{"_index":1097,"title":{},"body":{"injectables/VoteService.html":{}}}],["number",{"_index":350,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MovieDBService.html":{},"interfaces/MovieExtType.html":{},"injectables/MovieService.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"injectables/VoteDBService.html":{},"injectables/VoteService.html":{},"interfaces/WatchlistExtType.html":{},"miscellaneous/variables.html":{}}}],["number((movie.runtime.split",{"_index":739,"title":{},"body":{"injectables/MovieService.html":{}}}],["number(process.env.max_proposeable_movies",{"_index":693,"title":{},"body":{"injectables/MovieService.html":{}}}],["number(process.env.max_votes",{"_index":1091,"title":{},"body":{"injectables/VoteService.html":{}}}],["number(process.env.num_of_movies",{"_index":1129,"title":{},"body":{"injectables/WatchListJob.html":{}}}],["number(process.env.pause_time_min",{"_index":1131,"title":{},"body":{"injectables/WatchListJob.html":{}}}],["number(proposer_id",{"_index":748,"title":{},"body":{"injectables/MovieService.html":{}}}],["number(user.id",{"_index":624,"title":{},"body":{"controllers/MovieController.html":{},"controllers/VoteController.html":{}}}],["numbers",{"_index":719,"title":{},"body":{"injectables/MovieService.html":{}}}],["objects",{"_index":1341,"title":{},"body":{"index.html":{}}}],["obtaining",{"_index":1411,"title":{},"body":{"license.html":{}}}],["omdb",{"_index":1514,"title":{},"body":{"miscellaneous/variables.html":{}}}],["omdb_api_key",{"_index":1511,"title":{},"body":{"miscellaneous/variables.html":{}}}],["one",{"_index":348,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["onmoduleinit",{"_index":792,"title":{},"body":{"injectables/PrismaService.html":{}}}],["open",{"_index":1277,"title":{},"body":{"index.html":{}}}],["opt_in",{"_index":946,"title":{},"body":{"injectables/UserService.html":{}}}],["opt_in_users",{"_index":429,"title":{},"body":{"injectables/EmailService.html":{}}}],["option",{"_index":973,"title":{},"body":{"injectables/UserService.html":{}}}],["optional",{"_index":29,"title":{},"body":{"injectables/AnnounceJob.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"injectables/EmailService.html":{},"injectables/GravatarService.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"controllers/MovieController.html":{},"injectables/MovieDBService.html":{},"injectables/MovieService.html":{},"classes/PasswordDto.html":{},"classes/PasswordNewDto.html":{},"injectables/PasswordService.html":{},"injectables/PrismaService.html":{},"classes/ProfileDto.html":{},"classes/RegisterDto.html":{},"classes/ResDto.html":{},"controllers/UserController.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"injectables/VoteDBService.html":{},"injectables/VoteService.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["orderby",{"_index":1070,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["orm",{"_index":1387,"title":{},"body":{"index.html":{}}}],["otherwise",{"_index":1460,"title":{},"body":{"license.html":{}}}],["out",{"_index":102,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventModule.html":{},"modules/HistoryDBModule.html":{},"modules/MovieDBModule.html":{},"modules/MovieModule.html":{},"modules/UserDBModule.html":{},"modules/UserModule.html":{},"modules/VoteDBModule.html":{},"modules/VoteModule.html":{},"modules/WatchListDBModule.html":{},"license.html":{},"overview.html":{}}}],["output",{"_index":77,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["output.push(`${start_time",{"_index":82,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["overview",{"_index":1466,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1198,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":1374,"title":{},"body":{"index.html":{}}}],["pages",{"_index":1372,"title":{},"body":{"index.html":{}}}],["param",{"_index":186,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MovieController.html":{},"controllers/UserController.html":{},"controllers/VoteController.html":{}}}],["param('imdb_id",{"_index":622,"title":{},"body":{"controllers/MovieController.html":{},"controllers/VoteController.html":{}}}],["parameters",{"_index":25,"title":{},"body":{"injectables/AnnounceJob.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"injectables/EmailService.html":{},"injectables/GravatarService.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"controllers/MovieController.html":{},"injectables/MovieDBService.html":{},"injectables/MovieService.html":{},"injectables/PasswordService.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"injectables/VoteDBService.html":{},"injectables/VoteService.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":914,"title":{},"body":{"injectables/UserDBService.html":{}}}],["parseexpression",{"_index":1133,"title":{},"body":{"injectables/WatchListJob.html":{}}}],["parseexpression(process.env.schedule_start",{"_index":1140,"title":{},"body":{"injectables/WatchListJob.html":{}}}],["parser",{"_index":1134,"title":{},"body":{"injectables/WatchListJob.html":{},"dependencies.html":{}}}],["particular",{"_index":1446,"title":{},"body":{"license.html":{}}}],["parts",{"_index":1330,"title":{},"body":{"index.html":{}}}],["party",{"_index":1474,"title":{},"body":{"properties.html":{}}}],["pass",{"_index":309,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EmailService.html":{}}}],["passport",{"_index":523,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":232,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":524,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":525,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["password",{"_index":173,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/EmailService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordDto.html":{},"classes/PasswordNewDto.html":{},"injectables/PasswordService.html":{},"classes/RegisterDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["password'})@apibearerauth()@useguards(jwtauthguard)@post('password",{"_index":824,"title":{},"body":{"controllers/UserController.html":{}}}],["password'})@post('reset/:challenge",{"_index":175,"title":{},"body":{"controllers/AuthController.html":{}}}],["password'})@useguards(localauthguard)@post('login",{"_index":169,"title":{},"body":{"controllers/AuthController.html":{}}}],["password.service",{"_index":460,"title":{},"body":{"injectables/GravatarService.html":{}}}],["password_confirm",{"_index":762,"title":{},"body":{"classes/PasswordDto.html":{},"classes/PasswordNewDto.html":{},"classes/RegisterDto.html":{}}}],["password_new",{"_index":936,"title":{},"body":{"injectables/UserService.html":{}}}],["password_old",{"_index":767,"title":{},"body":{"classes/PasswordNewDto.html":{},"injectables/UserService.html":{}}}],["password_pattern",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["password_pattern.test(password",{"_index":344,"title":{},"body":{"injectables/AuthService.html":{}}}],["password_pattern.test(password_new",{"_index":974,"title":{},"body":{"injectables/UserService.html":{}}}],["password_pattern.test(user.password",{"_index":305,"title":{},"body":{"injectables/AuthService.html":{}}}],["passworddto",{"_index":172,"title":{"classes/PasswordDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/PasswordDto.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["passwordnewdto",{"_index":765,"title":{"classes/PasswordNewDto.html":{}},"body":{"classes/PasswordNewDto.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["passwordservice",{"_index":228,"title":{"injectables/PasswordService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/GravatarService.html":{},"injectables/PasswordService.html":{},"modules/UserDBModule.html":{},"injectables/UserDBService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["path",{"_index":120,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["pattern",{"_index":1523,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pattern(discord_webhook_pattern",{"_index":1562,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pause",{"_index":1541,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pause_time",{"_index":1125,"title":{},"body":{"injectables/WatchListJob.html":{}}}],["pause_time_min",{"_index":1539,"title":{},"body":{"miscellaneous/variables.html":{}}}],["payload",{"_index":298,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.sub",{"_index":532,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["per",{"_index":1527,"title":{},"body":{"miscellaneous/variables.html":{}}}],["permission",{"_index":1405,"title":{},"body":{"license.html":{}}}],["permit",{"_index":1428,"title":{},"body":{"license.html":{}}}],["person",{"_index":1410,"title":{},"body":{"license.html":{}}}],["persons",{"_index":1429,"title":{},"body":{"license.html":{}}}],["please",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["port",{"_index":412,"title":{},"body":{"injectables/EmailService.html":{},"miscellaneous/variables.html":{}}}],["portions",{"_index":1437,"title":{},"body":{"license.html":{}}}],["possible",{"_index":592,"title":{},"body":{"controllers/MovieController.html":{}}}],["post",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MovieController.html":{},"controllers/UserController.html":{},"controllers/VoteController.html":{}}}],["post(':imdb_id",{"_index":620,"title":{},"body":{"controllers/MovieController.html":{},"controllers/VoteController.html":{}}}],["post('email_opt_in",{"_index":867,"title":{},"body":{"controllers/UserController.html":{}}}],["post('login",{"_index":205,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('password",{"_index":880,"title":{},"body":{"controllers/UserController.html":{}}}],["post('register",{"_index":209,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('reset/:challenge",{"_index":218,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('username",{"_index":876,"title":{},"body":{"controllers/UserController.html":{}}}],["post_media",{"_index":571,"title":{},"body":{"controllers/MovieController.html":{}}}],["post_media(@user",{"_index":621,"title":{},"body":{"controllers/MovieController.html":{}}}],["post_media(user",{"_index":591,"title":{},"body":{"controllers/MovieController.html":{}}}],["prefix",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MovieController.html":{},"controllers/UserController.html":{},"controllers/VoteController.html":{},"index.html":{}}}],["prisma",{"_index":480,"title":{},"body":{"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"injectables/MovieDBService.html":{},"injectables/MovieService.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{},"injectables/VoteDBService.html":{},"injectables/VoteService.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{},"dependencies.html":{},"index.html":{}}}],["prisma.historycreateinput",{"_index":482,"title":{},"body":{"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{}}}],["prisma.moviecreateinput",{"_index":638,"title":{},"body":{"injectables/MovieDBService.html":{},"injectables/MovieService.html":{}}}],["prisma.moviecreatenestedonewithoutvoteinput",{"_index":1102,"title":{},"body":{"injectables/VoteService.html":{}}}],["prisma.moviewhereuniqueinput",{"_index":660,"title":{},"body":{"injectables/MovieDBService.html":{},"injectables/VoteDBService.html":{}}}],["prisma.service",{"_index":474,"title":{},"body":{"modules/HistoryDBModule.html":{},"injectables/HistoryDBService.html":{},"modules/MovieDBModule.html":{},"injectables/MovieDBService.html":{},"modules/UserDBModule.html":{},"injectables/UserDBService.html":{},"modules/VoteDBModule.html":{},"injectables/VoteDBService.html":{},"modules/WatchListDBModule.html":{},"injectables/WatchListDBService.html":{}}}],["prisma.usercreateinput",{"_index":731,"title":{},"body":{"injectables/MovieService.html":{},"injectables/UserDBService.html":{}}}],["prisma.usercreatenestedonewithoutmovieinput",{"_index":737,"title":{},"body":{"injectables/MovieService.html":{}}}],["prisma.usercreatenestedonewithoutvoteinput",{"_index":1103,"title":{},"body":{"injectables/VoteService.html":{}}}],["prisma.userupdateinput",{"_index":921,"title":{},"body":{"injectables/UserDBService.html":{},"injectables/UserService.html":{}}}],["prisma.userwhereuniqueinput",{"_index":902,"title":{},"body":{"injectables/UserDBService.html":{},"injectables/VoteDBService.html":{}}}],["prisma.votecreateinput",{"_index":1039,"title":{},"body":{"injectables/VoteDBService.html":{},"injectables/VoteService.html":{}}}],["prisma.votewhereuniqueinput",{"_index":1042,"title":{},"body":{"injectables/VoteDBService.html":{},"injectables/VoteService.html":{}}}],["prisma.watchlistcreateinput",{"_index":1116,"title":{},"body":{"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{}}}],["prisma/client",{"_index":43,"title":{},"body":{"injectables/AnnounceJob.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"controllers/MovieController.html":{},"injectables/MovieDBService.html":{},"injectables/MovieService.html":{},"injectables/PrismaService.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"injectables/VoteDBService.html":{},"injectables/VoteService.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{},"dependencies.html":{}}}],["prisma/client/runtime",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{}}}],["prismaclient",{"_index":790,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismaclientknownrequesterror",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{}}}],["prismaservice",{"_index":470,"title":{"injectables/PrismaService.html":{}},"body":{"modules/HistoryDBModule.html":{},"injectables/HistoryDBService.html":{},"modules/MovieDBModule.html":{},"injectables/MovieDBService.html":{},"modules/MovieModule.html":{},"injectables/PrismaService.html":{},"modules/UserDBModule.html":{},"injectables/UserDBService.html":{},"modules/VoteDBModule.html":{},"injectables/VoteDBService.html":{},"modules/VoteModule.html":{},"modules/WatchListDBModule.html":{},"injectables/WatchListDBService.html":{},"coverage.html":{},"overview.html":{}}}],["privacy",{"_index":1594,"title":{},"body":{"miscellaneous/variables.html":{}}}],["privacyview",{"_index":1595,"title":{},"body":{"miscellaneous/variables.html":{}}}],["private",{"_index":9,"title":{},"body":{"injectables/AnnounceJob.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"injectables/EmailService.html":{},"injectables/HistoryJob.html":{},"injectables/MovieService.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"injectables/WatchListJob.html":{}}}],["process.env.discord_enable",{"_index":365,"title":{},"body":{"injectables/DiscordService.html":{}}}],["process.env.discord_webhook_url",{"_index":371,"title":{},"body":{"injectables/DiscordService.html":{}}}],["process.env.email_host",{"_index":411,"title":{},"body":{"injectables/EmailService.html":{}}}],["process.env.email_host_password",{"_index":416,"title":{},"body":{"injectables/EmailService.html":{}}}],["process.env.email_host_user",{"_index":415,"title":{},"body":{"injectables/EmailService.html":{}}}],["process.env.email_port",{"_index":413,"title":{},"body":{"injectables/EmailService.html":{}}}],["process.env.frontend_url}\\n\\n",{"_index":62,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["process.env.frontend_url}login/${challenge",{"_index":433,"title":{},"body":{"injectables/EmailService.html":{}}}],["process.env.frontend_url}login/${userdb.challenge",{"_index":316,"title":{},"body":{"injectables/AuthService.html":{}}}],["process.env.frontend_url}reset/${challenge",{"_index":434,"title":{},"body":{"injectables/EmailService.html":{}}}],["process.env.jwt_expiration",{"_index":246,"title":{},"body":{"modules/AuthModule.html":{}}}],["process.env.jwt_secret",{"_index":243,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["process.env.omdb_api_key",{"_index":702,"title":{},"body":{"injectables/MovieService.html":{}}}],["process.env.project_name",{"_index":402,"title":{},"body":{"injectables/EmailService.html":{}}}],["production",{"_index":1386,"title":{},"body":{"index.html":{}}}],["profile",{"_index":851,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["profiledto",{"_index":801,"title":{"classes/ProfileDto.html":{}},"body":{"classes/ProfileDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["profileview",{"_index":1592,"title":{},"body":{"miscellaneous/variables.html":{}}}],["project",{"_index":1286,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["project_name",{"_index":382,"title":{},"body":{"injectables/EmailService.html":{},"miscellaneous/variables.html":{}}}],["promise",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MovieController.html":{},"injectables/PasswordService.html":{},"controllers/UserController.html":{},"injectables/UserDBService.html":{},"controllers/VoteController.html":{}}}],["promise.all(movies.map(async",{"_index":707,"title":{},"body":{"injectables/MovieService.html":{}}}],["promise.all(watchlist.map(async",{"_index":752,"title":{},"body":{"injectables/MovieService.html":{},"injectables/UserService.html":{}}}],["properties",{"_index":8,"title":{"properties.html":{}},"body":{"injectables/AnnounceJob.html":{},"injectables/DiscordService.html":{},"classes/EmailOptInDto.html":{},"injectables/EmailService.html":{},"interfaces/JwtUser.html":{},"classes/LoginDto.html":{},"interfaces/MovieExtType.html":{},"injectables/MovieService.html":{},"classes/PasswordDto.html":{},"classes/PasswordNewDto.html":{},"classes/ProfileDto.html":{},"classes/RegisterDto.html":{},"classes/ResDto.html":{},"injectables/VoteService.html":{},"injectables/WatchListJob.html":{},"interfaces/WatchlistExtType.html":{},"properties.html":{}}}],["propose",{"_index":729,"title":{},"body":{"injectables/MovieService.html":{},"miscellaneous/variables.html":{}}}],["proposed",{"_index":728,"title":{},"body":{"injectables/MovieService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["proposed_movies",{"_index":955,"title":{},"body":{"injectables/UserService.html":{}}}],["proposer",{"_index":593,"title":{},"body":{"controllers/MovieController.html":{},"interfaces/MovieExtType.html":{},"injectables/MovieService.html":{}}}],["proposer'})@apibearerauth()@useguards(jwtauthguard)@delete(':imdb_id",{"_index":576,"title":{},"body":{"controllers/MovieController.html":{}}}],["proposer_id",{"_index":656,"title":{},"body":{"injectables/MovieDBService.html":{},"interfaces/MovieExtType.html":{},"injectables/MovieService.html":{}}}],["provided",{"_index":1438,"title":{},"body":{"license.html":{}}}],["providers",{"_index":230,"title":{},"body":{"modules/AuthModule.html":{},"modules/EventModule.html":{},"modules/HistoryDBModule.html":{},"modules/MovieDBModule.html":{},"modules/MovieModule.html":{},"modules/UserDBModule.html":{},"modules/UserModule.html":{},"modules/VoteDBModule.html":{},"modules/VoteModule.html":{},"modules/WatchListDBModule.html":{}}}],["providing",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{}}}],["public",{"_index":847,"title":{},"body":{"controllers/UserController.html":{}}}],["publish",{"_index":1422,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":1447,"title":{},"body":{"license.html":{}}}],["pw_reset",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["pw_reset(@param('challenge",{"_index":219,"title":{},"body":{"controllers/AuthController.html":{}}}],["pw_reset(challenge",{"_index":171,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["pw_reset_request",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["pw_reset_request(@param('username",{"_index":216,"title":{},"body":{"controllers/AuthController.html":{}}}],["pw_reset_request(username",{"_index":177,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["reached",{"_index":726,"title":{},"body":{"injectables/MovieService.html":{}}}],["reactive",{"_index":1597,"title":{},"body":{"miscellaneous/variables.html":{}}}],["readonly",{"_index":10,"title":{},"body":{"injectables/AnnounceJob.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"injectables/EmailService.html":{},"injectables/GravatarService.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"controllers/MovieController.html":{},"injectables/MovieDBService.html":{},"injectables/MovieService.html":{},"controllers/UserController.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"injectables/VoteDBService.html":{},"injectables/VoteService.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{}}}],["receive",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{}}}],["reflect",{"_index":1224,"title":{},"body":{"dependencies.html":{}}}],["register",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["register(@body",{"_index":210,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(body",{"_index":181,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(user",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{}}}],["registerdto",{"_index":182,"title":{"classes/RegisterDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RegisterDto.html":{},"coverage.html":{}}}],["registerview",{"_index":1591,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registration",{"_index":1249,"title":{},"body":{"index.html":{}}}],["related",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MovieController.html":{},"controllers/UserController.html":{}}}],["remove",{"_index":574,"title":{},"body":{"controllers/MovieController.html":{},"index.html":{}}}],["remove_cookie",{"_index":1164,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["rename",{"_index":1274,"title":{},"body":{"index.html":{}}}],["req",{"_index":554,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["request",{"_index":178,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/EmailService.html":{},"miscellaneous/variables.html":{}}}],["request.user",{"_index":1624,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requests",{"_index":1332,"title":{},"body":{"index.html":{}}}],["require(\"nodemailer",{"_index":405,"title":{},"body":{"injectables/EmailService.html":{},"miscellaneous/variables.html":{}}}],["require('./../package.json",{"_index":1619,"title":{},"body":{"miscellaneous/variables.html":{}}}],["require('bcrypt",{"_index":781,"title":{},"body":{"injectables/PasswordService.html":{},"miscellaneous/variables.html":{}}}],["res",{"_index":550,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["resdto",{"_index":195,"title":{"classes/ResDto.html":{}},"body":{"controllers/AuthController.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"classes/ResDto.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["reset",{"_index":101,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/EmailService.html":{},"modules/EventModule.html":{},"modules/HistoryDBModule.html":{},"modules/MovieDBModule.html":{},"modules/MovieModule.html":{},"modules/UserDBModule.html":{},"modules/UserModule.html":{},"modules/VoteDBModule.html":{},"modules/VoteModule.html":{},"modules/WatchListDBModule.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["reset/:challenge",{"_index":1589,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reset_request",{"_index":1587,"title":{},"body":{"miscellaneous/variables.html":{}}}],["resetrequestview",{"_index":1588,"title":{},"body":{"miscellaneous/variables.html":{}}}],["resetview",{"_index":1590,"title":{},"body":{"miscellaneous/variables.html":{}}}],["responsive",{"_index":1254,"title":{},"body":{"index.html":{}}}],["rest",{"_index":1260,"title":{},"body":{"index.html":{}}}],["restriction",{"_index":1416,"title":{},"body":{"license.html":{}}}],["result",{"_index":296,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["results",{"_index":87,"title":{},"body":{"injectables/AnnounceJob.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"classes/EmailOptInDto.html":{},"injectables/EmailService.html":{},"modules/EventModule.html":{},"injectables/GravatarService.html":{},"modules/HistoryDBModule.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/JwtUser.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoginDto.html":{},"controllers/MovieController.html":{},"modules/MovieDBModule.html":{},"injectables/MovieDBService.html":{},"interfaces/MovieExtType.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"classes/PasswordDto.html":{},"classes/PasswordNewDto.html":{},"injectables/PasswordService.html":{},"injectables/PrismaService.html":{},"classes/ProfileDto.html":{},"classes/RegisterDto.html":{},"classes/ResDto.html":{},"controllers/UserController.html":{},"modules/UserDBModule.html":{},"injectables/UserDBService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"modules/VoteDBModule.html":{},"injectables/VoteDBService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"modules/WatchListDBModule.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{},"interfaces/WatchlistExtType.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":207,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"injectables/EmailService.html":{},"injectables/GravatarService.html":{},"injectables/HistoryDBService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MovieController.html":{},"injectables/MovieDBService.html":{},"injectables/MovieService.html":{},"injectables/PasswordService.html":{},"controllers/UserController.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"injectables/VoteDBService.html":{},"injectables/VoteService.html":{},"injectables/WatchListDBService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":31,"title":{},"body":{"injectables/AnnounceJob.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"injectables/EmailService.html":{},"injectables/GravatarService.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"controllers/MovieController.html":{},"injectables/MovieDBService.html":{},"injectables/MovieService.html":{},"injectables/PasswordService.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"injectables/VoteDBService.html":{},"injectables/VoteService.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{}}}],["rights",{"_index":1419,"title":{},"body":{"license.html":{}}}],["rimraf",{"_index":1227,"title":{},"body":{"dependencies.html":{}}}],["root",{"_index":1292,"title":{},"body":{"index.html":{}}}],["rootpath",{"_index":128,"title":{},"body":{"modules/AppModule.html":{}}}],["round_duration_ms",{"_index":1143,"title":{},"body":{"injectables/WatchListJob.html":{}}}],["route",{"_index":1237,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["router",{"_index":1158,"title":{},"body":{"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["routes",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MovieController.html":{},"controllers/UserController.html":{},"controllers/VoteController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["routes/auth/auth.module",{"_index":105,"title":{},"body":{"modules/AppModule.html":{}}}],["routes/movie/movie.module",{"_index":110,"title":{},"body":{"modules/AppModule.html":{}}}],["routes/user/user.module",{"_index":106,"title":{},"body":{"modules/AppModule.html":{}}}],["routes/vote/vote.module",{"_index":111,"title":{},"body":{"modules/AppModule.html":{}}}],["run",{"_index":15,"title":{},"body":{"injectables/AnnounceJob.html":{},"injectables/HistoryJob.html":{},"injectables/WatchListJob.html":{},"index.html":{}}}],["runtime",{"_index":738,"title":{},"body":{"injectables/MovieService.html":{}}}],["rxjs",{"_index":1229,"title":{},"body":{"dependencies.html":{}}}],["same",{"_index":1545,"title":{},"body":{"miscellaneous/variables.html":{}}}],["save",{"_index":681,"title":{},"body":{"injectables/MovieService.html":{}}}],["save(imdb_id",{"_index":689,"title":{},"body":{"injectables/MovieService.html":{}}}],["save_vote",{"_index":999,"title":{},"body":{"controllers/VoteController.html":{}}}],["save_vote(@user",{"_index":1021,"title":{},"body":{"controllers/VoteController.html":{}}}],["save_vote(user",{"_index":1009,"title":{},"body":{"controllers/VoteController.html":{}}}],["saved",{"_index":843,"title":{},"body":{"controllers/UserController.html":{}}}],["schaut",{"_index":1404,"title":{},"body":{"license.html":{}}}],["schedule",{"_index":1524,"title":{},"body":{"miscellaneous/variables.html":{}}}],["schedule_history",{"_index":1535,"title":{},"body":{"miscellaneous/variables.html":{}}}],["schedule_start",{"_index":1530,"title":{},"body":{"miscellaneous/variables.html":{}}}],["schedule_watchlist",{"_index":1520,"title":{},"body":{"miscellaneous/variables.html":{}}}],["schedulemodule",{"_index":113,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulemodule.forroot",{"_index":132,"title":{},"body":{"modules/AppModule.html":{}}}],["schema",{"_index":1298,"title":{},"body":{"index.html":{}}}],["scheme",{"_index":1391,"title":{},"body":{"index.html":{}}}],["secret",{"_index":242,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["secretorkey",{"_index":530,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["section",{"_index":1283,"title":{},"body":{"index.html":{}}}],["secure",{"_index":414,"title":{},"body":{"injectables/EmailService.html":{}}}],["see",{"_index":1281,"title":{},"body":{"index.html":{}}}],["select",{"_index":1067,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["sell",{"_index":1426,"title":{},"body":{"license.html":{}}}],["send",{"_index":1549,"title":{},"body":{"miscellaneous/variables.html":{}}}],["send_all_opt_in",{"_index":386,"title":{},"body":{"injectables/EmailService.html":{}}}],["send_all_opt_in(body",{"_index":394,"title":{},"body":{"injectables/EmailService.html":{}}}],["send_announce",{"_index":16,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["send_announce(watchlist",{"_index":32,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["send_challenge",{"_index":387,"title":{},"body":{"injectables/EmailService.html":{}}}],["send_challenge(dest_mail",{"_index":396,"title":{},"body":{"injectables/EmailService.html":{}}}],["send_message",{"_index":359,"title":{},"body":{"injectables/DiscordService.html":{}}}],["send_message(message",{"_index":361,"title":{},"body":{"injectables/DiscordService.html":{}}}],["send_password_reset",{"_index":388,"title":{},"body":{"injectables/EmailService.html":{}}}],["send_password_reset(dest_mail",{"_index":400,"title":{},"body":{"injectables/EmailService.html":{}}}],["sends",{"_index":1526,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sent",{"_index":320,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["served",{"_index":1351,"title":{},"body":{"index.html":{}}}],["server",{"_index":1289,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["serveroot",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticmodule",{"_index":107,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticmodule.forroot",{"_index":125,"title":{},"body":{"modules/AppModule.html":{}}}],["services",{"_index":1324,"title":{},"body":{"index.html":{}}}],["set",{"_index":1279,"title":{},"body":{"index.html":{}}}],["set/unset",{"_index":836,"title":{},"body":{"controllers/UserController.html":{}}}],["set_cookie",{"_index":1165,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["shall",{"_index":1434,"title":{},"body":{"license.html":{}}}],["show",{"_index":1353,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["show_alert",{"_index":325,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MovieService.html":{},"classes/ResDto.html":{},"injectables/UserService.html":{}}}],["shown",{"_index":1358,"title":{},"body":{"index.html":{}}}],["shows",{"_index":1375,"title":{},"body":{"index.html":{}}}],["siehe",{"_index":60,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["sign",{"_index":1505,"title":{},"body":{"miscellaneous/variables.html":{}}}],["signoptions",{"_index":244,"title":{},"body":{"modules/AuthModule.html":{}}}],["singe",{"_index":1373,"title":{},"body":{"index.html":{}}}],["small",{"_index":1308,"title":{},"body":{"index.html":{}}}],["smtp",{"_index":1548,"title":{},"body":{"miscellaneous/variables.html":{}}}],["software",{"_index":1413,"title":{},"body":{"license.html":{}}}],["source",{"_index":4,"title":{},"body":{"injectables/AnnounceJob.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"classes/EmailOptInDto.html":{},"injectables/EmailService.html":{},"modules/EventModule.html":{},"injectables/GravatarService.html":{},"modules/HistoryDBModule.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/JwtUser.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoginDto.html":{},"controllers/MovieController.html":{},"modules/MovieDBModule.html":{},"injectables/MovieDBService.html":{},"interfaces/MovieExtType.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"classes/PasswordDto.html":{},"classes/PasswordNewDto.html":{},"injectables/PasswordService.html":{},"injectables/PrismaService.html":{},"classes/ProfileDto.html":{},"classes/RegisterDto.html":{},"classes/ResDto.html":{},"controllers/UserController.html":{},"modules/UserDBModule.html":{},"injectables/UserDBService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"modules/VoteDBModule.html":{},"injectables/VoteDBService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"modules/WatchListDBModule.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{},"interfaces/WatchlistExtType.html":{}}}],["spam",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{}}}],["special",{"_index":1382,"title":{},"body":{"index.html":{}}}],["specific",{"_index":586,"title":{},"body":{"controllers/MovieController.html":{}}}],["spendenbasis!\\n\\n",{"_index":69,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["src",{"_index":1327,"title":{},"body":{"index.html":{}}}],["src/.../config.validation.ts",{"_index":1480,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../cron.pattern.ts",{"_index":1481,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../discord_webhook.pattern.ts",{"_index":1482,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../email.service.ts",{"_index":1486,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../imdb_id.pattern.ts",{"_index":1484,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1233,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../name.pattern.ts",{"_index":1485,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../password.pattern.ts",{"_index":1487,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../password.service.ts",{"_index":1479,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.decorator.ts",{"_index":1490,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../username.pattern.ts",{"_index":1491,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["src/common/db_services/histroy/historydb.module.ts",{"_index":471,"title":{},"body":{"modules/HistoryDBModule.html":{}}}],["src/common/db_services/histroy/historydb.service.ts",{"_index":475,"title":{},"body":{"injectables/HistoryDBService.html":{},"coverage.html":{}}}],["src/common/db_services/histroy/historydb.service.ts:10",{"_index":484,"title":{},"body":{"injectables/HistoryDBService.html":{}}}],["src/common/db_services/histroy/historydb.service.ts:14",{"_index":483,"title":{},"body":{"injectables/HistoryDBService.html":{}}}],["src/common/db_services/histroy/historydb.service.ts:18",{"_index":486,"title":{},"body":{"injectables/HistoryDBService.html":{}}}],["src/common/db_services/histroy/historydb.service.ts:6",{"_index":479,"title":{},"body":{"injectables/HistoryDBService.html":{}}}],["src/common/db_services/movies/moviedb.module.ts",{"_index":631,"title":{},"body":{"modules/MovieDBModule.html":{}}}],["src/common/db_services/movies/moviedb.service.ts",{"_index":633,"title":{},"body":{"injectables/MovieDBService.html":{},"coverage.html":{}}}],["src/common/db_services/movies/moviedb.service.ts:10",{"_index":646,"title":{},"body":{"injectables/MovieDBService.html":{}}}],["src/common/db_services/movies/moviedb.service.ts:16",{"_index":651,"title":{},"body":{"injectables/MovieDBService.html":{}}}],["src/common/db_services/movies/moviedb.service.ts:22",{"_index":647,"title":{},"body":{"injectables/MovieDBService.html":{}}}],["src/common/db_services/movies/moviedb.service.ts:26",{"_index":652,"title":{},"body":{"injectables/MovieDBService.html":{}}}],["src/common/db_services/movies/moviedb.service.ts:30",{"_index":649,"title":{},"body":{"injectables/MovieDBService.html":{}}}],["src/common/db_services/movies/moviedb.service.ts:36",{"_index":639,"title":{},"body":{"injectables/MovieDBService.html":{}}}],["src/common/db_services/movies/moviedb.service.ts:40",{"_index":641,"title":{},"body":{"injectables/MovieDBService.html":{}}}],["src/common/db_services/movies/moviedb.service.ts:44",{"_index":643,"title":{},"body":{"injectables/MovieDBService.html":{}}}],["src/common/db_services/movies/moviedb.service.ts:6",{"_index":637,"title":{},"body":{"injectables/MovieDBService.html":{}}}],["src/common/db_services/prisma.service.ts",{"_index":789,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/common/db_services/prisma.service.ts:10",{"_index":795,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/common/db_services/prisma.service.ts:6",{"_index":797,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/common/db_services/users/userdb.module.ts",{"_index":892,"title":{},"body":{"modules/UserDBModule.html":{}}}],["src/common/db_services/users/userdb.service.ts",{"_index":895,"title":{},"body":{"injectables/UserDBService.html":{},"coverage.html":{}}}],["src/common/db_services/users/userdb.service.ts:11",{"_index":905,"title":{},"body":{"injectables/UserDBService.html":{}}}],["src/common/db_services/users/userdb.service.ts:19",{"_index":910,"title":{},"body":{"injectables/UserDBService.html":{}}}],["src/common/db_services/users/userdb.service.ts:23",{"_index":907,"title":{},"body":{"injectables/UserDBService.html":{}}}],["src/common/db_services/users/userdb.service.ts:27",{"_index":908,"title":{},"body":{"injectables/UserDBService.html":{}}}],["src/common/db_services/users/userdb.service.ts:31",{"_index":900,"title":{},"body":{"injectables/UserDBService.html":{}}}],["src/common/db_services/users/userdb.service.ts:36",{"_index":913,"title":{},"body":{"injectables/UserDBService.html":{}}}],["src/common/db_services/users/userdb.service.ts:47",{"_index":903,"title":{},"body":{"injectables/UserDBService.html":{}}}],["src/common/db_services/users/userdb.service.ts:7",{"_index":898,"title":{},"body":{"injectables/UserDBService.html":{}}}],["src/common/db_services/votes/votedb.module.ts",{"_index":1028,"title":{},"body":{"modules/VoteDBModule.html":{}}}],["src/common/db_services/votes/votedb.service.ts",{"_index":1030,"title":{},"body":{"injectables/VoteDBService.html":{},"coverage.html":{}}}],["src/common/db_services/votes/votedb.service.ts:10",{"_index":1049,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["src/common/db_services/votes/votedb.service.ts:16",{"_index":1060,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["src/common/db_services/votes/votedb.service.ts:25",{"_index":1062,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["src/common/db_services/votes/votedb.service.ts:33",{"_index":1054,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["src/common/db_services/votes/votedb.service.ts:39",{"_index":1058,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["src/common/db_services/votes/votedb.service.ts:46",{"_index":1056,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["src/common/db_services/votes/votedb.service.ts:53",{"_index":1051,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["src/common/db_services/votes/votedb.service.ts:6",{"_index":1038,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["src/common/db_services/votes/votedb.service.ts:68",{"_index":1040,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["src/common/db_services/votes/votedb.service.ts:72",{"_index":1043,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["src/common/db_services/votes/votedb.service.ts:76",{"_index":1045,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["src/common/db_services/votes/votedb.service.ts:80",{"_index":1047,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["src/common/db_services/watchlist/watchlistdb.module.ts",{"_index":1112,"title":{},"body":{"modules/WatchListDBModule.html":{}}}],["src/common/db_services/watchlist/watchlistdb.service.ts",{"_index":1114,"title":{},"body":{"injectables/WatchListDBService.html":{},"coverage.html":{}}}],["src/common/db_services/watchlist/watchlistdb.service.ts:10",{"_index":1119,"title":{},"body":{"injectables/WatchListDBService.html":{}}}],["src/common/db_services/watchlist/watchlistdb.service.ts:14",{"_index":1117,"title":{},"body":{"injectables/WatchListDBService.html":{}}}],["src/common/db_services/watchlist/watchlistdb.service.ts:18",{"_index":1118,"title":{},"body":{"injectables/WatchListDBService.html":{}}}],["src/common/db_services/watchlist/watchlistdb.service.ts:6",{"_index":1115,"title":{},"body":{"injectables/WatchListDBService.html":{}}}],["src/common/decorators/user.decorator.ts",{"_index":1173,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/event_service/event.module.ts",{"_index":444,"title":{},"body":{"modules/EventModule.html":{}}}],["src/common/event_service/jobs/announce.job.ts",{"_index":6,"title":{},"body":{"injectables/AnnounceJob.html":{},"coverage.html":{}}}],["src/common/event_service/jobs/announce.job.ts:11",{"_index":36,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["src/common/event_service/jobs/announce.job.ts:12",{"_index":24,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["src/common/event_service/jobs/announce.job.ts:28",{"_index":30,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["src/common/event_service/jobs/announce.job.ts:42",{"_index":34,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["src/common/event_service/jobs/history.job.ts",{"_index":492,"title":{},"body":{"injectables/HistoryJob.html":{},"coverage.html":{}}}],["src/common/event_service/jobs/history.job.ts:10",{"_index":495,"title":{},"body":{"injectables/HistoryJob.html":{}}}],["src/common/event_service/jobs/history.job.ts:18",{"_index":497,"title":{},"body":{"injectables/HistoryJob.html":{}}}],["src/common/event_service/jobs/watchlist.job.ts",{"_index":1123,"title":{},"body":{"injectables/WatchListJob.html":{},"coverage.html":{}}}],["src/common/event_service/jobs/watchlist.job.ts:13",{"_index":1130,"title":{},"body":{"injectables/WatchListJob.html":{}}}],["src/common/event_service/jobs/watchlist.job.ts:14",{"_index":1127,"title":{},"body":{"injectables/WatchListJob.html":{}}}],["src/common/event_service/jobs/watchlist.job.ts:22",{"_index":1128,"title":{},"body":{"injectables/WatchListJob.html":{}}}],["src/common/middleware/logger.middleware.ts",{"_index":547,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"coverage.html":{}}}],["src/common/middleware/logger.middleware.ts:5",{"_index":553,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["src/common/util_services/discord.service.ts",{"_index":356,"title":{},"body":{"injectables/DiscordService.html":{},"coverage.html":{}}}],["src/common/util_services/discord.service.ts:15",{"_index":362,"title":{},"body":{"injectables/DiscordService.html":{}}}],["src/common/util_services/discord.service.ts:6",{"_index":366,"title":{},"body":{"injectables/DiscordService.html":{}}}],["src/common/util_services/discord.service.ts:7",{"_index":360,"title":{},"body":{"injectables/DiscordService.html":{}}}],["src/common/util_services/email.service.ts",{"_index":381,"title":{},"body":{"injectables/EmailService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/util_services/email.service.ts:10",{"_index":403,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/common/util_services/email.service.ts:11",{"_index":389,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/common/util_services/email.service.ts:25",{"_index":398,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/common/util_services/email.service.ts:35",{"_index":401,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/common/util_services/email.service.ts:45",{"_index":395,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/common/util_services/email.service.ts:57",{"_index":391,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/common/util_services/email.service.ts:61",{"_index":393,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/common/util_services/gravatar.service.ts",{"_index":454,"title":{},"body":{"injectables/GravatarService.html":{},"coverage.html":{}}}],["src/common/util_services/gravatar.service.ts:5",{"_index":457,"title":{},"body":{"injectables/GravatarService.html":{}}}],["src/common/util_services/gravatar.service.ts:9",{"_index":459,"title":{},"body":{"injectables/GravatarService.html":{}}}],["src/common/util_services/password.service.ts",{"_index":771,"title":{},"body":{"injectables/PasswordService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/util_services/password.service.ts:13",{"_index":779,"title":{},"body":{"injectables/PasswordService.html":{}}}],["src/common/util_services/password.service.ts:17",{"_index":775,"title":{},"body":{"injectables/PasswordService.html":{}}}],["src/common/util_services/password.service.ts:9",{"_index":777,"title":{},"body":{"injectables/PasswordService.html":{}}}],["src/common/validation/config.validation.ts",{"_index":1177,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/validation/patterns/cron.pattern.ts",{"_index":1178,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/validation/patterns/discord_webhook.pattern.ts",{"_index":1180,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/validation/patterns/imdb_id.pattern.ts",{"_index":1182,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/validation/patterns/name.pattern.ts",{"_index":1183,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/validation/patterns/password.pattern.ts",{"_index":1184,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/validation/patterns/username.pattern.ts",{"_index":1185,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":1186,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/routes/auth/auth.controller.ts",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/routes/auth/auth.controller.ts:23",{"_index":170,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/routes/auth/auth.controller.ts:29",{"_index":184,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/routes/auth/auth.controller.ts:35",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/routes/auth/auth.controller.ts:41",{"_index":180,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/routes/auth/auth.controller.ts:47",{"_index":176,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/routes/auth/auth.guard.ts",{"_index":536,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["src/routes/auth/auth.module.ts",{"_index":229,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/routes/auth/auth.service.ts",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/routes/auth/auth.service.ts:108",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/routes/auth/auth.service.ts:20",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/routes/auth/auth.service.ts:29",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/routes/auth/auth.service.ts:46",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/routes/auth/auth.service.ts:53",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/routes/auth/auth.service.ts:79",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/routes/auth/auth.service.ts:93",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/routes/auth/jwt",{"_index":511,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/routes/auth/jwt.stategy.ts",{"_index":516,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/routes/auth/jwt.stategy.ts:16",{"_index":520,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/routes/auth/jwt.stategy.ts:7",{"_index":518,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/routes/auth/local.strategy.ts",{"_index":538,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/routes/auth/local.strategy.ts:12",{"_index":542,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/routes/auth/local.strategy.ts:7",{"_index":540,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/routes/movie/movie.controller.ts",{"_index":565,"title":{},"body":{"controllers/MovieController.html":{},"coverage.html":{}}}],["src/routes/movie/movie.controller.ts:24",{"_index":580,"title":{},"body":{"controllers/MovieController.html":{}}}],["src/routes/movie/movie.controller.ts:30",{"_index":590,"title":{},"body":{"controllers/MovieController.html":{}}}],["src/routes/movie/movie.controller.ts:36",{"_index":583,"title":{},"body":{"controllers/MovieController.html":{}}}],["src/routes/movie/movie.controller.ts:44",{"_index":588,"title":{},"body":{"controllers/MovieController.html":{}}}],["src/routes/movie/movie.controller.ts:52",{"_index":595,"title":{},"body":{"controllers/MovieController.html":{}}}],["src/routes/movie/movie.controller.ts:60",{"_index":577,"title":{},"body":{"controllers/MovieController.html":{}}}],["src/routes/movie/movie.module.ts",{"_index":671,"title":{},"body":{"modules/MovieModule.html":{}}}],["src/routes/movie/movie.service.ts",{"_index":679,"title":{},"body":{"injectables/MovieService.html":{},"coverage.html":{}}}],["src/routes/movie/movie.service.ts:105",{"_index":684,"title":{},"body":{"injectables/MovieService.html":{}}}],["src/routes/movie/movie.service.ts:122",{"_index":688,"title":{},"body":{"injectables/MovieService.html":{}}}],["src/routes/movie/movie.service.ts:138",{"_index":687,"title":{},"body":{"injectables/MovieService.html":{}}}],["src/routes/movie/movie.service.ts:18",{"_index":692,"title":{},"body":{"injectables/MovieService.html":{}}}],["src/routes/movie/movie.service.ts:19",{"_index":683,"title":{},"body":{"injectables/MovieService.html":{}}}],["src/routes/movie/movie.service.ts:30",{"_index":685,"title":{},"body":{"injectables/MovieService.html":{}}}],["src/routes/movie/movie.service.ts:38",{"_index":686,"title":{},"body":{"injectables/MovieService.html":{}}}],["src/routes/movie/movie.service.ts:58",{"_index":690,"title":{},"body":{"injectables/MovieService.html":{}}}],["src/routes/user/user.controller.ts",{"_index":815,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/routes/user/user.controller.ts:27",{"_index":841,"title":{},"body":{"controllers/UserController.html":{}}}],["src/routes/user/user.controller.ts:35",{"_index":853,"title":{},"body":{"controllers/UserController.html":{}}}],["src/routes/user/user.controller.ts:43",{"_index":838,"title":{},"body":{"controllers/UserController.html":{}}}],["src/routes/user/user.controller.ts:51",{"_index":834,"title":{},"body":{"controllers/UserController.html":{}}}],["src/routes/user/user.controller.ts:59",{"_index":845,"title":{},"body":{"controllers/UserController.html":{}}}],["src/routes/user/user.controller.ts:67",{"_index":828,"title":{},"body":{"controllers/UserController.html":{}}}],["src/routes/user/user.controller.ts:75",{"_index":825,"title":{},"body":{"controllers/UserController.html":{}}}],["src/routes/user/user.controller.ts:83",{"_index":831,"title":{},"body":{"controllers/UserController.html":{}}}],["src/routes/user/user.controller.ts:89",{"_index":849,"title":{},"body":{"controllers/UserController.html":{}}}],["src/routes/user/user.module.ts",{"_index":927,"title":{},"body":{"modules/UserModule.html":{}}}],["src/routes/user/user.service.ts",{"_index":930,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/routes/user/user.service.ts:128",{"_index":944,"title":{},"body":{"injectables/UserService.html":{}}}],["src/routes/user/user.service.ts:17",{"_index":934,"title":{},"body":{"injectables/UserService.html":{}}}],["src/routes/user/user.service.ts:27",{"_index":949,"title":{},"body":{"injectables/UserService.html":{}}}],["src/routes/user/user.service.ts:32",{"_index":951,"title":{},"body":{"injectables/UserService.html":{}}}],["src/routes/user/user.service.ts:37",{"_index":953,"title":{},"body":{"injectables/UserService.html":{}}}],["src/routes/user/user.service.ts:44",{"_index":939,"title":{},"body":{"injectables/UserService.html":{}}}],["src/routes/user/user.service.ts:67",{"_index":947,"title":{},"body":{"injectables/UserService.html":{}}}],["src/routes/user/user.service.ts:76",{"_index":937,"title":{},"body":{"injectables/UserService.html":{}}}],["src/routes/user/user.service.ts:97",{"_index":942,"title":{},"body":{"injectables/UserService.html":{}}}],["src/routes/vote/vote.controller.ts",{"_index":996,"title":{},"body":{"controllers/VoteController.html":{},"coverage.html":{}}}],["src/routes/vote/vote.controller.ts:22",{"_index":1008,"title":{},"body":{"controllers/VoteController.html":{}}}],["src/routes/vote/vote.controller.ts:28",{"_index":1003,"title":{},"body":{"controllers/VoteController.html":{}}}],["src/routes/vote/vote.controller.ts:36",{"_index":1010,"title":{},"body":{"controllers/VoteController.html":{}}}],["src/routes/vote/vote.controller.ts:44",{"_index":1013,"title":{},"body":{"controllers/VoteController.html":{}}}],["src/routes/vote/vote.module.ts",{"_index":1079,"title":{},"body":{"modules/VoteModule.html":{}}}],["src/routes/vote/vote.service.ts",{"_index":1081,"title":{},"body":{"injectables/VoteService.html":{},"coverage.html":{}}}],["src/routes/vote/vote.service.ts:10",{"_index":1083,"title":{},"body":{"injectables/VoteService.html":{}}}],["src/routes/vote/vote.service.ts:16",{"_index":1085,"title":{},"body":{"injectables/VoteService.html":{}}}],["src/routes/vote/vote.service.ts:24",{"_index":1086,"title":{},"body":{"injectables/VoteService.html":{}}}],["src/routes/vote/vote.service.ts:32",{"_index":1090,"title":{},"body":{"injectables/VoteService.html":{}}}],["src/routes/vote/vote.service.ts:50",{"_index":1088,"title":{},"body":{"injectables/VoteService.html":{}}}],["src/types/jwtuser.type.ts",{"_index":535,"title":{},"body":{"interfaces/JwtUser.html":{},"coverage.html":{}}}],["src/types/movie.types/movie_ext.type.ts",{"_index":661,"title":{},"body":{"interfaces/MovieExtType.html":{},"coverage.html":{}}}],["src/types/movie.types/watchlist_ext.type.ts",{"_index":1149,"title":{},"body":{"interfaces/WatchlistExtType.html":{},"coverage.html":{}}}],["src/types/res.dto.ts",{"_index":811,"title":{},"body":{"classes/ResDto.html":{},"coverage.html":{}}}],["src/types/res.dto.ts:3",{"_index":812,"title":{},"body":{"classes/ResDto.html":{}}}],["src/types/res.dto.ts:4",{"_index":813,"title":{},"body":{"classes/ResDto.html":{}}}],["src/types/user.dto/email_opt_in.dto.ts",{"_index":377,"title":{},"body":{"classes/EmailOptInDto.html":{},"coverage.html":{}}}],["src/types/user.dto/email_opt_in.dto.ts:3",{"_index":380,"title":{},"body":{"classes/EmailOptInDto.html":{}}}],["src/types/user.dto/login.dto.ts",{"_index":561,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/types/user.dto/login.dto.ts:3",{"_index":563,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/types/user.dto/login.dto.ts:4",{"_index":562,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/types/user.dto/password.dto.ts",{"_index":761,"title":{},"body":{"classes/PasswordDto.html":{},"coverage.html":{}}}],["src/types/user.dto/password.dto.ts:3",{"_index":763,"title":{},"body":{"classes/PasswordDto.html":{}}}],["src/types/user.dto/password.dto.ts:4",{"_index":764,"title":{},"body":{"classes/PasswordDto.html":{}}}],["src/types/user.dto/password_new.dto.ts",{"_index":766,"title":{},"body":{"classes/PasswordNewDto.html":{},"coverage.html":{}}}],["src/types/user.dto/password_new.dto.ts:3",{"_index":770,"title":{},"body":{"classes/PasswordNewDto.html":{}}}],["src/types/user.dto/password_new.dto.ts:4",{"_index":768,"title":{},"body":{"classes/PasswordNewDto.html":{}}}],["src/types/user.dto/password_new.dto.ts:5",{"_index":769,"title":{},"body":{"classes/PasswordNewDto.html":{}}}],["src/types/user.dto/profile.dto.ts",{"_index":802,"title":{},"body":{"classes/ProfileDto.html":{},"coverage.html":{}}}],["src/types/user.dto/profile.dto.ts:3",{"_index":804,"title":{},"body":{"classes/ProfileDto.html":{}}}],["src/types/user.dto/profile.dto.ts:4",{"_index":805,"title":{},"body":{"classes/ProfileDto.html":{}}}],["src/types/user.dto/register.dto.ts",{"_index":806,"title":{},"body":{"classes/RegisterDto.html":{},"coverage.html":{}}}],["src/types/user.dto/register.dto.ts:3",{"_index":810,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/types/user.dto/register.dto.ts:4",{"_index":807,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/types/user.dto/register.dto.ts:5",{"_index":808,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/types/user.dto/register.dto.ts:6",{"_index":809,"title":{},"body":{"classes/RegisterDto.html":{}}}],["stack",{"_index":1242,"title":{},"body":{"index.html":{}}}],["start",{"_index":716,"title":{},"body":{"injectables/MovieService.html":{},"injectables/UserService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["start:dev",{"_index":1346,"title":{},"body":{"index.html":{}}}],["start:docs",{"_index":1359,"title":{},"body":{"index.html":{}}}],["start:prod",{"_index":1290,"title":{},"body":{"index.html":{}}}],["start_time",{"_index":80,"title":{},"body":{"injectables/AnnounceJob.html":{},"injectables/MovieService.html":{},"injectables/WatchListJob.html":{},"interfaces/WatchlistExtType.html":{}}}],["started",{"_index":73,"title":{"index.html":{},"license.html":{}},"body":{"injectables/AnnounceJob.html":{},"injectables/HistoryJob.html":{},"injectables/WatchListJob.html":{}}}],["startup",{"_index":1296,"title":{},"body":{"index.html":{}}}],["statements",{"_index":1153,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":109,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{},"index.html":{}}}],["statically",{"_index":1350,"title":{},"body":{"index.html":{}}}],["step",{"_index":1365,"title":{},"body":{"index.html":{}}}],["still",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{}}}],["store",{"_index":1167,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["strategy",{"_index":522,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["string",{"_index":33,"title":{},"body":{"injectables/AnnounceJob.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"injectables/EmailService.html":{},"injectables/GravatarService.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"interfaces/JwtUser.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"controllers/MovieController.html":{},"injectables/MovieDBService.html":{},"interfaces/MovieExtType.html":{},"injectables/MovieService.html":{},"classes/PasswordDto.html":{},"classes/PasswordNewDto.html":{},"injectables/PasswordService.html":{},"classes/ProfileDto.html":{},"classes/RegisterDto.html":{},"classes/ResDto.html":{},"controllers/UserController.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"injectables/VoteDBService.html":{},"injectables/VoteService.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{},"interfaces/WatchlistExtType.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["string).next().todate",{"_index":1141,"title":{},"body":{"injectables/WatchListJob.html":{}}}],["structures",{"_index":1339,"title":{},"body":{"index.html":{}}}],["sub",{"_index":299,"title":{},"body":{"injectables/AuthService.html":{}}}],["subject",{"_index":419,"title":{},"body":{"injectables/EmailService.html":{},"license.html":{}}}],["sublicense",{"_index":1424,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":1436,"title":{},"body":{"license.html":{}}}],["success",{"_index":1602,"title":{},"body":{"miscellaneous/variables.html":{}}}],["successfully",{"_index":336,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MovieService.html":{}}}],["summary",{"_index":203,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MovieController.html":{},"controllers/UserController.html":{},"controllers/VoteController.html":{}}}],["super",{"_index":526,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["support",{"_index":1336,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":1464,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1303,"title":{},"body":{"index.html":{}}}],["table",{"_index":1197,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1196,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":1072,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["team\\n",{"_index":426,"title":{},"body":{"injectables/EmailService.html":{}}}],["text",{"_index":420,"title":{},"body":{"injectables/EmailService.html":{}}}],["then((vote",{"_index":742,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.$connect",{"_index":798,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$on('beforeexit",{"_index":799,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.announce_discord",{"_index":48,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["this.announce_email",{"_index":70,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["this.announcejob.run",{"_index":1148,"title":{},"body":{"injectables/WatchListJob.html":{}}}],["this.authservice.confirm(challenge",{"_index":214,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.login(user",{"_index":208,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.pw_reset(challenge",{"_index":220,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.pw_reset_request(username",{"_index":217,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.register(body",{"_index":211,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser(username",{"_index":545,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.discordservice.send_message(this.announce_discord(watchlist",{"_index":85,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["this.emailservice.generate_challenge_url(new_challenge",{"_index":985,"title":{},"body":{"injectables/UserService.html":{}}}],["this.emailservice.generate_challenge_url(user.challenge",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.emailservice.generate_pw_challenge_url(challenge",{"_index":340,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.emailservice.send_all_opt_in(this.announce_email(watchlist",{"_index":86,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["this.emailservice.send_challenge(user.username",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["this.emailservice.send_password_reset(user.username",{"_index":341,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.enabled",{"_index":368,"title":{},"body":{"injectables/DiscordService.html":{}}}],["this.get(imdb_id",{"_index":730,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.gravatarservice.generate_gravatar_url(new_username",{"_index":983,"title":{},"body":{"injectables/UserService.html":{}}}],["this.gravatarservice.generate_gravatar_url(user.username",{"_index":970,"title":{},"body":{"injectables/UserService.html":{}}}],["this.historydbservice.add(data",{"_index":506,"title":{},"body":{"injectables/HistoryJob.html":{}}}],["this.histroydbservice.get_all",{"_index":760,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.histroydbservice.has(imdb_id",{"_index":720,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.imdb",{"_index":700,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.imdb.get",{"_index":703,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.jwtservice.sign(payload",{"_index":302,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.loading",{"_index":1604,"title":{},"body":{"miscellaneous/variables.html":{}}}],["this.logged_in",{"_index":1613,"title":{},"body":{"miscellaneous/variables.html":{}}}],["this.max_proposeable_movies",{"_index":724,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.max_votes",{"_index":1099,"title":{},"body":{"injectables/VoteService.html":{}}}],["this.moviedbservice.add(moviedb_data).then((movie",{"_index":740,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.moviedbservice.delete(imdb_id",{"_index":750,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.moviedbservice.delete(movie.imdb_id",{"_index":509,"title":{},"body":{"injectables/HistoryJob.html":{},"injectables/MovieService.html":{}}}],["this.moviedbservice.delete_all_proposed(user_id",{"_index":993,"title":{},"body":{"injectables/UserService.html":{}}}],["this.moviedbservice.get(imdb_id",{"_index":744,"title":{},"body":{"injectables/MovieService.html":{},"injectables/VoteService.html":{}}}],["this.moviedbservice.get(movie.imdb_id",{"_index":79,"title":{},"body":{"injectables/AnnounceJob.html":{},"injectables/HistoryJob.html":{},"injectables/WatchListJob.html":{}}}],["this.moviedbservice.get(watch_movie.imdb_id",{"_index":754,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.moviedbservice.get(wl.imdb_id",{"_index":988,"title":{},"body":{"injectables/UserService.html":{}}}],["this.moviedbservice.get_all",{"_index":706,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.moviedbservice.get_all_proposed(proposer_id)).length",{"_index":723,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.moviedbservice.get_all_proposed(user_id",{"_index":956,"title":{},"body":{"injectables/UserService.html":{}}}],["this.moviedbservice.has(imdb_id",{"_index":722,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.movieservice.delete(imdb_id",{"_index":627,"title":{},"body":{"controllers/MovieController.html":{}}}],["this.movieservice.get(imdb_id",{"_index":619,"title":{},"body":{"controllers/MovieController.html":{}}}],["this.movieservice.get_all",{"_index":611,"title":{},"body":{"controllers/MovieController.html":{}}}],["this.movieservice.get_history",{"_index":615,"title":{},"body":{"controllers/MovieController.html":{}}}],["this.movieservice.get_watchlist",{"_index":613,"title":{},"body":{"controllers/MovieController.html":{}}}],["this.movieservice.save(imdb_id",{"_index":623,"title":{},"body":{"controllers/MovieController.html":{}}}],["this.passwordservice.compare(password",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["this.passwordservice.compare(password_old",{"_index":975,"title":{},"body":{"injectables/UserService.html":{}}}],["this.passwordservice.hash(data.password",{"_index":919,"title":{},"body":{"injectables/UserDBService.html":{}}}],["this.passwordservice.hash(password",{"_index":353,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.passwordservice.hash(password_new",{"_index":976,"title":{},"body":{"injectables/UserService.html":{}}}],["this.passwordservice.hash_md5(trim",{"_index":464,"title":{},"body":{"injectables/GravatarService.html":{}}}],["this.pause_time",{"_index":1147,"title":{},"body":{"injectables/WatchListJob.html":{}}}],["this.prisma.history.count",{"_index":490,"title":{},"body":{"injectables/HistoryDBService.html":{}}}],["this.prisma.history.create",{"_index":489,"title":{},"body":{"injectables/HistoryDBService.html":{}}}],["this.prisma.history.findmany",{"_index":488,"title":{},"body":{"injectables/HistoryDBService.html":{}}}],["this.prisma.movie.count",{"_index":655,"title":{},"body":{"injectables/MovieDBService.html":{}}}],["this.prisma.movie.create",{"_index":657,"title":{},"body":{"injectables/MovieDBService.html":{}}}],["this.prisma.movie.delete",{"_index":658,"title":{},"body":{"injectables/MovieDBService.html":{}}}],["this.prisma.movie.deletemany",{"_index":659,"title":{},"body":{"injectables/MovieDBService.html":{}}}],["this.prisma.movie.findmany",{"_index":654,"title":{},"body":{"injectables/MovieDBService.html":{}}}],["this.prisma.movie.findunique",{"_index":653,"title":{},"body":{"injectables/MovieDBService.html":{}}}],["this.prisma.user.count",{"_index":916,"title":{},"body":{"injectables/UserDBService.html":{}}}],["this.prisma.user.create",{"_index":920,"title":{},"body":{"injectables/UserDBService.html":{}}}],["this.prisma.user.delete",{"_index":923,"title":{},"body":{"injectables/UserDBService.html":{}}}],["this.prisma.user.findmany",{"_index":917,"title":{},"body":{"injectables/UserDBService.html":{}}}],["this.prisma.user.findunique",{"_index":915,"title":{},"body":{"injectables/UserDBService.html":{}}}],["this.prisma.user.update",{"_index":922,"title":{},"body":{"injectables/UserDBService.html":{}}}],["this.prisma.vote.count",{"_index":1065,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["this.prisma.vote.create",{"_index":1073,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["this.prisma.vote.delete",{"_index":1074,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["this.prisma.vote.deletemany",{"_index":1075,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["this.prisma.vote.findfirst",{"_index":1064,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["this.prisma.vote.findmany",{"_index":1066,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["this.prisma.vote.findunique",{"_index":1063,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["this.prisma.vote.groupby",{"_index":1068,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["this.prisma.watchlist.create",{"_index":1121,"title":{},"body":{"injectables/WatchListDBService.html":{}}}],["this.prisma.watchlist.delete",{"_index":1122,"title":{},"body":{"injectables/WatchListDBService.html":{}}}],["this.prisma.watchlist.findmany",{"_index":1120,"title":{},"body":{"injectables/WatchListDBService.html":{}}}],["this.project_name",{"_index":418,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.send_announce(output",{"_index":84,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["this.transporter",{"_index":408,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.transporter.sendmail",{"_index":417,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.userdbservice.create(payload",{"_index":315,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userdbservice.delete",{"_index":994,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userdbservice.get",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MovieService.html":{},"injectables/UserService.html":{}}}],["this.userdbservice.get({id",{"_index":732,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.userdbservice.get_all_opt_in",{"_index":430,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.userdbservice.has_user(new_username",{"_index":980,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userdbservice.update",{"_index":334,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["this.userservice.change_password(number(user.id",{"_index":882,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.change_profile(number(user.id",{"_index":865,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.change_username(number(user.id",{"_index":878,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.delete(number(user.id",{"_index":872,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.email_opt_in(number(user.id",{"_index":869,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.get(number(user.id",{"_index":862,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.get_public(number(user_id",{"_index":888,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.get_user_data(number(user.id",{"_index":875,"title":{},"body":{"controllers/UserController.html":{}}}],["this.votedbservice.add(votedb_data",{"_index":1104,"title":{},"body":{"injectables/VoteService.html":{}}}],["this.votedbservice.delete(votedb_data",{"_index":1107,"title":{},"body":{"injectables/VoteService.html":{}}}],["this.votedbservice.delete_all(imdb_id",{"_index":749,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.votedbservice.delete_all(movie.imdb_id",{"_index":507,"title":{},"body":{"injectables/HistoryJob.html":{}}}],["this.votedbservice.delete_all_user(user_id",{"_index":992,"title":{},"body":{"injectables/UserService.html":{}}}],["this.votedbservice.get_most_voted(this.num_of_movies",{"_index":1139,"title":{},"body":{"injectables/WatchListJob.html":{}}}],["this.votedbservice.get_num_of_votes(imdb_id",{"_index":1092,"title":{},"body":{"injectables/VoteService.html":{}}}],["this.votedbservice.get_num_of_votes(movie.imdb_id",{"_index":709,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.votedbservice.get_votes_movie(movie.imdb_id",{"_index":755,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.votedbservice.get_votes_user(user_id",{"_index":957,"title":{},"body":{"injectables/UserService.html":{}}}],["this.votedbservice.get_votes_user(user_id)).map(vote",{"_index":1095,"title":{},"body":{"injectables/VoteService.html":{}}}],["this.votedbservice.num_of(user_id",{"_index":1098,"title":{},"body":{"injectables/VoteService.html":{}}}],["this.voteservice.get_votes(imdb_id",{"_index":1020,"title":{},"body":{"controllers/VoteController.html":{}}}],["this.voteservice.get_votes_user(number(user.id",{"_index":1018,"title":{},"body":{"controllers/VoteController.html":{}}}],["this.voteservice.unvote(imdb_id",{"_index":1024,"title":{},"body":{"controllers/VoteController.html":{}}}],["this.voteservice.vote(imdb_id",{"_index":1022,"title":{},"body":{"controllers/VoteController.html":{}}}],["this.voteservice.vote(movie.imdb_id",{"_index":741,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.watchlistdbservice.add(data",{"_index":1142,"title":{},"body":{"injectables/WatchListJob.html":{}}}],["this.watchlistdbservice.delete(movie.imdb_id",{"_index":508,"title":{},"body":{"injectables/HistoryJob.html":{}}}],["this.watchlistdbservice.get_all",{"_index":76,"title":{},"body":{"injectables/AnnounceJob.html":{},"injectables/HistoryJob.html":{},"injectables/MovieService.html":{},"injectables/UserService.html":{}}}],["this.webhookclient",{"_index":369,"title":{},"body":{"injectables/DiscordService.html":{}}}],["this.webhookclient.send(message",{"_index":374,"title":{},"body":{"injectables/DiscordService.html":{}}}],["throw",{"_index":284,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"injectables/MovieService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["time",{"_index":977,"title":{},"body":{"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["times",{"_index":1534,"title":{},"body":{"miscellaneous/variables.html":{}}}],["title",{"_index":504,"title":{},"body":{"injectables/HistoryJob.html":{},"interfaces/MovieExtType.html":{},"injectables/MovieService.html":{},"interfaces/WatchlistExtType.html":{}}}],["token",{"_index":167,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["tokens",{"_index":1506,"title":{},"body":{"miscellaneous/variables.html":{}}}],["top_movies",{"_index":1138,"title":{},"body":{"injectables/WatchListJob.html":{}}}],["tort",{"_index":1459,"title":{},"body":{"license.html":{}}}],["total",{"_index":1518,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transmission",{"_index":1340,"title":{},"body":{"index.html":{}}}],["transporter",{"_index":383,"title":{},"body":{"injectables/EmailService.html":{}}}],["transportoptions",{"_index":406,"title":{},"body":{"injectables/EmailService.html":{}}}],["trim",{"_index":461,"title":{},"body":{"injectables/GravatarService.html":{}}}],["true",{"_index":123,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"injectables/MovieService.html":{},"controllers/UserController.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{},"injectables/VoteDBService.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":313,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MovieService.html":{},"injectables/VoteService.html":{}}}],["ts",{"_index":372,"title":{},"body":{"injectables/DiscordService.html":{}}}],["tt",{"_index":717,"title":{},"body":{"injectables/MovieService.html":{}}}],["tt[0",{"_index":1574,"title":{},"body":{"miscellaneous/variables.html":{}}}],["two",{"_index":1542,"title":{},"body":{"miscellaneous/variables.html":{}}}],["type",{"_index":28,"title":{},"body":{"injectables/AnnounceJob.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"classes/EmailOptInDto.html":{},"injectables/EmailService.html":{},"injectables/GravatarService.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"injectables/JwtStrategy.html":{},"interfaces/JwtUser.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoginDto.html":{},"controllers/MovieController.html":{},"injectables/MovieDBService.html":{},"interfaces/MovieExtType.html":{},"injectables/MovieService.html":{},"classes/PasswordDto.html":{},"classes/PasswordNewDto.html":{},"injectables/PasswordService.html":{},"injectables/PrismaService.html":{},"classes/ProfileDto.html":{},"classes/RegisterDto.html":{},"classes/ResDto.html":{},"controllers/UserController.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"injectables/VoteDBService.html":{},"injectables/VoteService.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{},"interfaces/WatchlistExtType.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["types/jwtuser.type",{"_index":191,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"controllers/MovieController.html":{},"controllers/UserController.html":{},"controllers/VoteController.html":{}}}],["types/movie.types/movie_ext.type",{"_index":602,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{}}}],["types/movie.types/watchlist_ext.type",{"_index":604,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{}}}],["types/res.dto",{"_index":196,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"controllers/UserController.html":{}}}],["types/user.dto/email_opt_in.dto",{"_index":857,"title":{},"body":{"controllers/UserController.html":{}}}],["types/user.dto/login.dto",{"_index":197,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["types/user.dto/password.dto",{"_index":193,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["types/user.dto/password_new.dto",{"_index":858,"title":{},"body":{"controllers/UserController.html":{}}}],["types/user.dto/profile.dto",{"_index":856,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["types/user.dto/register.dto",{"_index":194,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["typescript",{"_index":1316,"title":{},"body":{"index.html":{}}}],["ui",{"_index":1255,"title":{},"body":{"index.html":{}}}],["unauthorizedexception",{"_index":544,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["und",{"_index":66,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["under",{"_index":1389,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"injectables/HistoryDBService.html":{},"injectables/MovieDBService.html":{},"injectables/MovieService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/VoteDBService.html":{},"injectables/VoteService.html":{},"injectables/WatchListDBService.html":{},"miscellaneous/variables.html":{}}}],["unvote",{"_index":1000,"title":{},"body":{"controllers/VoteController.html":{},"injectables/VoteService.html":{}}}],["unvote(@user",{"_index":1023,"title":{},"body":{"controllers/VoteController.html":{}}}],["unvote(imdb_id",{"_index":1087,"title":{},"body":{"injectables/VoteService.html":{}}}],["unvote(user",{"_index":1011,"title":{},"body":{"controllers/VoteController.html":{}}}],["up",{"_index":1354,"title":{},"body":{"index.html":{}}}],["update",{"_index":823,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserDBService.html":{}}}],["update(params",{"_index":911,"title":{},"body":{"injectables/UserDBService.html":{}}}],["update_loading(loading",{"_index":1603,"title":{},"body":{"miscellaneous/variables.html":{}}}],["update_logged_in",{"_index":1605,"title":{},"body":{"miscellaneous/variables.html":{}}}],["update_profile",{"_index":821,"title":{},"body":{"controllers/UserController.html":{}}}],["update_profile(@user",{"_index":864,"title":{},"body":{"controllers/UserController.html":{}}}],["update_profile(user",{"_index":850,"title":{},"body":{"controllers/UserController.html":{}}}],["updated",{"_index":972,"title":{},"body":{"injectables/UserService.html":{}}}],["url",{"_index":370,"title":{},"body":{"injectables/DiscordService.html":{},"miscellaneous/variables.html":{}}}],["usable",{"_index":1257,"title":{},"body":{"index.html":{}}}],["use",{"_index":548,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/UserService.html":{},"index.html":{},"license.html":{}}}],["use(req",{"_index":549,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["use_gravatar",{"_index":803,"title":{},"body":{"classes/ProfileDto.html":{},"injectables/UserService.html":{}}}],["used",{"_index":1312,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["usefully",{"_index":1335,"title":{},"body":{"index.html":{}}}],["useguards",{"_index":185,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MovieController.html":{},"controllers/UserController.html":{},"controllers/VoteController.html":{}}}],["useguards(jwtauthguard",{"_index":616,"title":{},"body":{"controllers/MovieController.html":{},"controllers/UserController.html":{},"controllers/VoteController.html":{}}}],["useguards(localauthguard",{"_index":204,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/EmailService.html":{},"injectables/LocalStrategy.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"controllers/UserController.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"injectables/VoteDBService.html":{},"injectables/VoteService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["user'})@apibearerauth()@useguards(jwtauthguard)@delete",{"_index":833,"title":{},"body":{"controllers/UserController.html":{}}}],["user'})@post('register",{"_index":183,"title":{},"body":{"controllers/AuthController.html":{}}}],["user.controller",{"_index":928,"title":{},"body":{"modules/UserModule.html":{}}}],["user.id",{"_index":300,"title":{},"body":{"injectables/AuthService.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{}}}],["user.name",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MovieService.html":{},"injectables/UserService.html":{}}}],["user.name},\\n\\n${body}\\ndear\\n${this.project_name",{"_index":432,"title":{},"body":{"injectables/EmailService.html":{}}}],["user.password",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["user.pw_reset",{"_index":351,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.service",{"_index":855,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user.username",{"_index":312,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EmailService.html":{},"injectables/UserService.html":{}}}],["user.verified",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{}}}],["user_id",{"_index":644,"title":{},"body":{"injectables/MovieDBService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/VoteDBService.html":{},"injectables/VoteService.html":{}}}],["user_id'})@get(':user_id",{"_index":848,"title":{},"body":{"controllers/UserController.html":{}}}],["user_name",{"_index":397,"title":{},"body":{"injectables/EmailService.html":{}}}],["user_name},\\n\\nplease",{"_index":422,"title":{},"body":{"injectables/EmailService.html":{}}}],["usercontroller",{"_index":814,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userdb",{"_index":314,"title":{},"body":{"injectables/AuthService.html":{}}}],["userdb.service",{"_index":893,"title":{},"body":{"modules/UserDBModule.html":{}}}],["userdbmodule",{"_index":225,"title":{"modules/UserDBModule.html":{}},"body":{"modules/AuthModule.html":{},"modules/EventModule.html":{},"modules/MovieModule.html":{},"modules/UserDBModule.html":{},"modules/UserModule.html":{},"modules/VoteModule.html":{},"modules.html":{},"overview.html":{}}}],["userdbservice",{"_index":250,"title":{"injectables/UserDBService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/EmailService.html":{},"injectables/MovieService.html":{},"modules/UserDBModule.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"coverage.html":{},"overview.html":{}}}],["usermodule",{"_index":98,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":168,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/GravatarService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/MovieService.html":{},"classes/RegisterDto.html":{},"controllers/UserController.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["username.trim().tolowercase",{"_index":462,"title":{},"body":{"injectables/GravatarService.html":{}}}],["username_pattern",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["username_pattern.test(new_username",{"_index":979,"title":{},"body":{"injectables/UserService.html":{}}}],["username_pattern.test(user.username",{"_index":304,"title":{},"body":{"injectables/AuthService.html":{}}}],["users",{"_index":1251,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["userservice",{"_index":854,"title":{"injectables/UserService.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["userwhereuniqueinput",{"_index":906,"title":{},"body":{"injectables/UserDBService.html":{}}}],["uses",{"_index":1319,"title":{},"body":{"index.html":{}}}],["util_services/discord.service",{"_index":39,"title":{},"body":{"injectables/AnnounceJob.html":{},"modules/EventModule.html":{}}}],["util_services/email.service",{"_index":44,"title":{},"body":{"injectables/AnnounceJob.html":{},"modules/EventModule.html":{}}}],["util_services/password.service",{"_index":894,"title":{},"body":{"modules/UserDBModule.html":{},"injectables/UserDBService.html":{}}}],["valid",{"_index":884,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["valid'})@apibearerauth()@useguards(jwtauthguard)@get('check",{"_index":830,"title":{},"body":{"controllers/UserController.html":{}}}],["validate",{"_index":517,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":519,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(username",{"_index":541,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validated",{"_index":1295,"title":{},"body":{"index.html":{}}}],["validateuser",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(username",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{}}}],["validation",{"_index":310,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["validationschema",{"_index":124,"title":{},"body":{"modules/AppModule.html":{}}}],["value",{"_index":364,"title":{},"body":{"injectables/DiscordService.html":{},"injectables/EmailService.html":{},"injectables/MovieService.html":{},"injectables/VoteService.html":{},"injectables/WatchListJob.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":1280,"title":{},"body":{"index.html":{}}}],["variable",{"_index":1155,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1477,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verification",{"_index":1250,"title":{},"body":{"index.html":{}}}],["verified",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["version",{"_index":1268,"title":{},"body":{"index.html":{},"properties.html":{}}}],["via",{"_index":1259,"title":{},"body":{"index.html":{}}}],["view",{"_index":1376,"title":{},"body":{"index.html":{}}}],["views",{"_index":1381,"title":{},"body":{"index.html":{}}}],["void",{"_index":552,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["vote",{"_index":605,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{},"controllers/VoteController.html":{},"injectables/VoteService.html":{},"index.html":{}}}],["vote(imdb_id",{"_index":1089,"title":{},"body":{"injectables/VoteService.html":{}}}],["vote.controller",{"_index":1080,"title":{},"body":{"modules/VoteModule.html":{}}}],["vote.imdb_id",{"_index":1096,"title":{},"body":{"injectables/VoteService.html":{}}}],["vote.service",{"_index":1014,"title":{},"body":{"controllers/VoteController.html":{},"modules/VoteModule.html":{}}}],["vote.user.id",{"_index":759,"title":{},"body":{"injectables/MovieService.html":{}}}],["vote/vote.service",{"_index":676,"title":{},"body":{"modules/MovieModule.html":{},"injectables/MovieService.html":{}}}],["votecontroller",{"_index":995,"title":{"controllers/VoteController.html":{}},"body":{"controllers/VoteController.html":{},"modules/VoteModule.html":{},"coverage.html":{}}}],["voted",{"_index":1006,"title":{},"body":{"controllers/VoteController.html":{},"injectables/VoteService.html":{},"index.html":{}}}],["votedb.service",{"_index":1029,"title":{},"body":{"modules/VoteDBModule.html":{}}}],["votedb_data",{"_index":1101,"title":{},"body":{"injectables/VoteService.html":{}}}],["votedbmodule",{"_index":440,"title":{"modules/VoteDBModule.html":{}},"body":{"modules/EventModule.html":{},"modules/MovieModule.html":{},"modules/UserModule.html":{},"modules/VoteDBModule.html":{},"modules/VoteModule.html":{},"modules.html":{},"overview.html":{}}}],["votedbservice",{"_index":494,"title":{"injectables/VoteDBService.html":{}},"body":{"injectables/HistoryJob.html":{},"injectables/MovieService.html":{},"injectables/UserService.html":{},"modules/VoteDBModule.html":{},"injectables/VoteDBService.html":{},"injectables/VoteService.html":{},"injectables/WatchListJob.html":{},"coverage.html":{},"overview.html":{}}}],["votemodule",{"_index":99,"title":{"modules/VoteModule.html":{}},"body":{"modules/AppModule.html":{},"modules/VoteModule.html":{},"modules.html":{},"overview.html":{}}}],["votes",{"_index":664,"title":{},"body":{"interfaces/MovieExtType.html":{},"injectables/MovieService.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"injectables/VoteService.html":{},"miscellaneous/variables.html":{}}}],["votes.map((vote",{"_index":758,"title":{},"body":{"injectables/MovieService.html":{}}}],["voteservice",{"_index":670,"title":{"injectables/VoteService.html":{}},"body":{"modules/MovieModule.html":{},"injectables/MovieService.html":{},"controllers/VoteController.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"coverage.html":{},"overview.html":{}}}],["voting",{"_index":1245,"title":{},"body":{"index.html":{},"properties.html":{}}}],["vue",{"_index":1368,"title":{},"body":{"index.html":{}}}],["vue.js",{"_index":1367,"title":{},"body":{"index.html":{}}}],["wahl",{"_index":51,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["warranties",{"_index":1443,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":1439,"title":{},"body":{"license.html":{}}}],["watch",{"_index":1473,"title":{},"body":{"properties.html":{}}}],["watch_list",{"_index":502,"title":{},"body":{"injectables/HistoryJob.html":{}}}],["watch_movie",{"_index":753,"title":{},"body":{"injectables/MovieService.html":{}}}],["watch_movie.start_time",{"_index":756,"title":{},"body":{"injectables/MovieService.html":{}}}],["watchlist",{"_index":35,"title":{},"body":{"injectables/AnnounceJob.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["watchlist.map((movie",{"_index":746,"title":{},"body":{"injectables/MovieService.html":{}}}],["watchlist_imdbs",{"_index":745,"title":{},"body":{"injectables/MovieService.html":{}}}],["watchlist_imdbs.includes(imdb_id",{"_index":747,"title":{},"body":{"injectables/MovieService.html":{}}}],["watchlist_proposer_ids",{"_index":986,"title":{},"body":{"injectables/UserService.html":{}}}],["watchlist_proposer_ids.includes(user_id",{"_index":990,"title":{},"body":{"injectables/UserService.html":{}}}],["watchlistdb.service",{"_index":1113,"title":{},"body":{"modules/WatchListDBModule.html":{}}}],["watchlistdbmodule",{"_index":441,"title":{"modules/WatchListDBModule.html":{}},"body":{"modules/EventModule.html":{},"modules/MovieModule.html":{},"modules/UserModule.html":{},"modules/WatchListDBModule.html":{},"modules.html":{},"overview.html":{}}}],["watchlistdbservice",{"_index":20,"title":{"injectables/WatchListDBService.html":{}},"body":{"injectables/AnnounceJob.html":{},"injectables/HistoryJob.html":{},"injectables/MovieService.html":{},"injectables/UserService.html":{},"modules/WatchListDBModule.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{},"coverage.html":{},"overview.html":{}}}],["watchlistexttype",{"_index":603,"title":{"interfaces/WatchlistExtType.html":{}},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{},"interfaces/WatchlistExtType.html":{},"coverage.html":{}}}],["watchlistjob",{"_index":443,"title":{"injectables/WatchListJob.html":{}},"body":{"modules/EventModule.html":{},"injectables/WatchListJob.html":{},"coverage.html":{},"overview.html":{}}}],["webhook",{"_index":1529,"title":{},"body":{"miscellaneous/variables.html":{}}}],["webhookclient",{"_index":358,"title":{},"body":{"injectables/DiscordService.html":{}}}],["website",{"_index":1305,"title":{},"body":{"index.html":{},"properties.html":{}}}],["werden",{"_index":56,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["whether",{"_index":1456,"title":{},"body":{"license.html":{}}}],["whole",{"_index":1314,"title":{},"body":{"index.html":{}}}],["without",{"_index":1258,"title":{},"body":{"index.html":{},"license.html":{}}}],["wl",{"_index":987,"title":{},"body":{"injectables/UserService.html":{}}}],["written",{"_index":1315,"title":{},"body":{"index.html":{}}}],["year",{"_index":665,"title":{},"body":{"interfaces/MovieExtType.html":{},"injectables/MovieService.html":{}}}],["yes",{"_index":1238,"title":{},"body":{"miscellaneous/functions.html":{}}}],["z0",{"_index":1625,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z])(?=.*[a",{"_index":1577,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z]).{8",{"_index":1579,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z].{2,20",{"_index":1575,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z]{2,4",{"_index":1627,"title":{},"body":{"miscellaneous/variables.html":{}}}],["za",{"_index":1578,"title":{},"body":{"miscellaneous/variables.html":{}}}],["zoom",{"_index":100,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventModule.html":{},"modules/HistoryDBModule.html":{},"modules/MovieDBModule.html":{},"modules/MovieModule.html":{},"modules/UserDBModule.html":{},"modules/UserModule.html":{},"modules/VoteDBModule.html":{},"modules/VoteModule.html":{},"modules/WatchListDBModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"injectables/AnnounceJob.html":{"url":"injectables/AnnounceJob.html","title":"injectable - AnnounceJob","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AnnounceJob\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/event_service/jobs/announce.job.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                announce_discord\n                            \n                            \n                                    Private\n                                    Readonly\n                                announce_email\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                run\n                            \n                            \n                                    Private\n                                    Async\n                                send_announce\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(discordService: DiscordService, watchListDBService: WatchListDBService, movieDBService: MovieDBService, emailService: EmailService)\n                    \n                \n                        \n                            \n                                Defined in src/common/event_service/jobs/announce.job.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        discordService\n                                                  \n                                                        \n                                                                        DiscordService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        watchListDBService\n                                                  \n                                                        \n                                                                        WatchListDBService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        movieDBService\n                                                  \n                                                        \n                                                                        MovieDBService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        emailService\n                                                  \n                                                        \n                                                                        EmailService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        run\n                        \n                    \n                \n            \n            \n                \n                    \n                    run()\n                \n            \n\n\n            \n                \n                    Defined in src/common/event_service/jobs/announce.job.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        send_announce\n                        \n                    \n                \n            \n            \n                \n                    \n                    send_announce(watchlist: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/common/event_service/jobs/announce.job.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    watchlist\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        announce_discord\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/common/event_service/jobs/announce.job.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        announce_email\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/common/event_service/jobs/announce.job.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { DiscordService } from \"../../util_services/discord.service\";\nimport { WatchListDBService } from \"../../db_services/watchlist/watchListDB.service\";\nimport { MovieDBService } from \"../../db_services/movies/movieDB.service\";\nimport { Movie } from \"@prisma/client\";\nimport { EmailService } from \"../../util_services/email.service\";\n\n@Injectable()\nexport class AnnounceJob {\n\n  private readonly announce_discord;\n  private readonly announce_email\n\n  constructor(private readonly discordService: DiscordService,\n              private readonly watchListDBService: WatchListDBService,\n              private readonly movieDBService: MovieDBService,\n              private readonly emailService: EmailService) {\n    this.announce_discord = (watchlist: string[]) => `\\n` +\n      `Die Wahl ist durch, diese Filme werden geschaut:\\n${watchlist.join(\"\\n\")}\\n` +\n      `Mehr Infos siehe auch ${process.env.FRONTEND_URL}\\n\\n` +\n      `Es gibt Getränke und Atmosphäre auf Spendenbasis!\\n\\n`\n\n    this.announce_email = (watchlist: string[]) => `Die Wahl ist durch, diese Filme werden geschaut:\\n${watchlist.join(\"\\n\")}\\n` +\n      `Mehr Infos siehe auch ${process.env.FRONTEND_URL}\\n\\n` +\n      `Es gibt Getränke und Atmosphäre auf Spendenbasis!\\n\\n`\n  }\n\n  async run() {\n    console.log(\"Announce job started\");\n    const watchlist = await this.watchListDBService.get_all();\n    const output = [] as string[];\n\n    for (const movie of watchlist) {\n      const movie_data = await this.movieDBService.get(movie.imdb_id) as Movie;\n      const start_time = movie.start_time.toLocaleString();\n      output.push(`${start_time} - ${movie_data.title}`);\n    }\n\n    await this.send_announce(output);\n  }\n\n  private async send_announce(watchlist: string[]) {\n    await this.discordService.send_message(this.announce_discord(watchlist));\n    await this.emailService.send_all_opt_in(this.announce_email(watchlist));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nEventModule\n\nEventModule\n\nAppModule -->\n\nEventModule->AppModule\n\n\n\n\n\nMovieModule\n\nMovieModule\n\nAppModule -->\n\nMovieModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nVoteModule\n\nVoteModule\n\nAppModule -->\n\nVoteModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            EventModule\n                        \n                        \n                            MovieModule\n                        \n                        \n                            UserModule\n                        \n                        \n                            VoteModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthModule } from './routes/auth/auth.module';\nimport { UserModule } from './routes/user/user.module';\nimport { ServeStaticModule } from \"@nestjs/serve-static\";\nimport { MovieModule } from './routes/movie/movie.module';\nimport { VoteModule } from './routes/vote/vote.module';\nimport { EventModule } from \"./common/event_service/event.module\";\nimport { ScheduleModule } from \"@nestjs/schedule\";\nimport { ConfigModule } from \"@nestjs/config\";\nimport { config_validation_schema } from \"./common/validation/config.validation\";\nimport { join } from \"path\";\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n      validationSchema: config_validation_schema\n    }),\n    AuthModule, UserModule, MovieModule, VoteModule, EventModule,\n    ServeStaticModule.forRoot({\n      serveRoot: '/docs/backend',\n      rootPath: join(__dirname, '..', 'docs'),\n    }),\n    ServeStaticModule.forRoot({\n      rootPath: join(__dirname, '..', 'client/dist'),\n    }),\n    ScheduleModule.forRoot()\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n            \n                Description\n            \n            \n                Controller for authentication related routes\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                confirm\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                pw_reset\n                            \n                            \n                                    Async\n                                pw_reset_request\n                            \n                            \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        confirm\n                        \n                    \n                \n            \n            \n                \n                    \n                    confirm(challenge: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'GET confirm email address by providing user challenge'})@Get('confirm/:challenge')\n                \n            \n\n            \n                \n                    Defined in src/routes/auth/auth.controller.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    challenge\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(user: JwtUser, body: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'POST issue jwt access token by providing username (email) and password'})@UseGuards(LocalAuthGuard)@Post('login')\n                \n            \n\n            \n                \n                    Defined in src/routes/auth/auth.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                JwtUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        pw_reset\n                        \n                    \n                \n            \n            \n                \n                    \n                    pw_reset(challenge: string, body: PasswordDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'POST reset password by providing user challenge and new password'})@Post('reset/:challenge')\n                \n            \n\n            \n                \n                    Defined in src/routes/auth/auth.controller.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    challenge\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                PasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        pw_reset_request\n                        \n                    \n                \n            \n            \n                \n                    \n                    pw_reset_request(username: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'GET request a password reset by providing an username (email)'})@Get('reset/:username')\n                \n            \n\n            \n                \n                    Defined in src/routes/auth/auth.controller.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(body: RegisterDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'POST register new user'})@Post('register')\n                \n            \n\n            \n                \n                    Defined in src/routes/auth/auth.controller.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                RegisterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, UseGuards, Get, Param, Body } from \"@nestjs/common\";\nimport { LocalAuthGuard } from './auth.guard';\nimport { AuthService } from './auth.service';\nimport { JwtUser } from \"../../types/jwtuser.type\";\nimport { User } from \"../../common/decorators/user.decorator\";\nimport { PasswordDto } from \"../../types/user.dto/password.dto\";\nimport { RegisterDto } from \"../../types/user.dto/register.dto\";\nimport { ResDto } from \"../../types/res.dto\";\nimport { LoginDto } from \"../../types/user.dto/login.dto\";\nimport { ApiOperation, ApiTags } from \"@nestjs/swagger\";\n\n/**\n * Controller for authentication related routes\n */\n@ApiTags('auth')\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @ApiOperation({ summary: 'POST issue jwt access token by providing username (email) and password' })\n  @UseGuards(LocalAuthGuard)\n  @Post('login')\n  async login(@User() user: JwtUser, @Body() body: LoginDto): Promise {\n    return await this.authService.login(user);\n  }\n\n  @ApiOperation({ summary: 'POST register new user' })\n  @Post('register')\n  async register(@Body() body: RegisterDto): Promise {\n    return await this.authService.register(body)\n  }\n\n  @ApiOperation({ summary: 'GET confirm email address by providing user challenge' })\n  @Get('confirm/:challenge')\n  async confirm(@Param('challenge') challenge: string): Promise {\n    return await this.authService.confirm(challenge)\n  }\n\n  @ApiOperation({ summary: 'GET request a password reset by providing an username (email)' })\n  @Get('reset/:username')\n  async pw_reset_request(@Param('username') username: string): Promise {\n    return await this.authService.pw_reset_request(username)\n  }\n\n  @ApiOperation({ summary: 'POST reset password by providing user challenge and new password' })\n  @Post('reset/:challenge')\n  async pw_reset(@Param('challenge') challenge: string, @Body() body: PasswordDto): Promise {\n    return await this.authService.pw_reset(challenge, body.password)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_imports\n\n\n\n\nUserDBModule\n\nUserDBModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUserDBModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nEmailService\n\nEmailService\n\nAuthModule -->\n\nEmailService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nPasswordService\n\nPasswordService\n\nAuthModule -->\n\nPasswordService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/routes/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            EmailService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                        \n                            PasswordService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserDBModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { AuthService } from './auth.service';\nimport { UserDBModule } from '../../common/db_services/users/userDB.module';\nimport { PassportModule } from '@nestjs/passport';\nimport { LocalStrategy } from './local.strategy';\nimport { AuthController } from './auth.controller';\nimport { JwtModule } from '@nestjs/jwt';\nimport { JwtStrategy } from './jwt.stategy';\nimport { EmailService } from \"../../common/util_services/email.service\";\nimport { PasswordService } from \"../../common/util_services/password.service\";\n\n@Module({\n  imports: [\n    UserDBModule,\n    PassportModule,\n    JwtModule.register({\n      secret: process.env.JWT_SECRET,\n      signOptions: { expiresIn: process.env.JWT_EXPIRATION },\n    }),\n  ],\n  providers: [AuthService, LocalStrategy, JwtStrategy, EmailService, PasswordService],\n  controllers: [AuthController],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                confirm\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                pw_reset\n                            \n                            \n                                    Async\n                                pw_reset_request\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userDBService: UserDBService, jwtService: JwtService, emailService: EmailService, passwordService: PasswordService)\n                    \n                \n                        \n                            \n                                Defined in src/routes/auth/auth.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userDBService\n                                                  \n                                                        \n                                                                        UserDBService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        emailService\n                                                  \n                                                        \n                                                                        EmailService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        passwordService\n                                                  \n                                                        \n                                                                        PasswordService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        confirm\n                        \n                    \n                \n            \n            \n                \n                    \n                    confirm(challenge: string)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/auth/auth.service.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    challenge\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(user: any)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/auth/auth.service.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        pw_reset\n                        \n                    \n                \n            \n            \n                \n                    \n                    pw_reset(challenge: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/auth/auth.service.ts:108\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    challenge\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        pw_reset_request\n                        \n                    \n                \n            \n            \n                \n                    \n                    pw_reset_request(username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/auth/auth.service.ts:93\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(user: RegisterDto)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/auth/auth.service.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                RegisterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(username: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/auth/auth.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ConflictException,\n  ForbiddenException,\n  Injectable,\n  InternalServerErrorException,\n  NotFoundException\n} from \"@nestjs/common\";\nimport { UserDBService } from '../../common/db_services/users/userDB.service';\nimport { JwtService } from '@nestjs/jwt';\nimport { PrismaClientKnownRequestError } from \"@prisma/client/runtime\";\nimport { EmailService } from \"../../common/util_services/email.service\";\nimport { PasswordService } from \"../../common/util_services/password.service\";\nimport cuid from \"cuid\";\nimport { RegisterDto } from \"../../types/user.dto/register.dto\";\nimport { name_pattern } from \"../../common/validation/patterns/name.pattern\";\nimport { username_pattern } from \"../../common/validation/patterns/username.pattern\";\nimport { password_pattern } from \"../../common/validation/patterns/password.pattern\";\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private readonly userDBService: UserDBService,\n    private readonly jwtService: JwtService,\n    private readonly emailService: EmailService,\n    private readonly passwordService: PasswordService,\n  ) {\n  }\n\n  async validateUser(username: string, password: string): Promise {\n    const user = await this.userDBService.get({\n      username: username\n    });\n    if (user && (await this.passwordService.compare(password, user.password))) {\n      if (!user.verified) {\n        const challenge_url = this.emailService.generate_challenge_url(user.challenge);\n        await this.emailService.send_challenge(user.username, user.name, challenge_url);\n        throw new ForbiddenException('Email not verified. Please check your inbox! If you did not receive an email, please check your spam folder. If you still cannot find it, please contact us.');\n      }\n\n      const { password, ...result } = user;\n      return result;\n    }\n    throw new ForbiddenException('Invalid username or password');\n  }\n\n  async login(user: any) {\n    const payload = { sub: user.id };\n    return {\n      access_token: this.jwtService.sign(payload),\n    };\n  }\n\n  async register(user: RegisterDto) {\n    if (!name_pattern.test(user.name) || !username_pattern.test(user.username) || !password_pattern.test(user.password)) {\n      throw new ForbiddenException('Invalid input. Your inputs failed to pass the validation checks.');\n    }\n\n    const payload = { username: user.username, name: user.name, password: user.password };\n    try {\n      const userDB = await this.userDBService.create(payload);\n      const challenge_url = `${process.env.FRONTEND_URL}login/${userDB.challenge}`;\n      await this.emailService.send_challenge(user.username, user.name, challenge_url);\n      return {\n        message: \"Please confirm you email address by clicking the link that was sent to your inbox. \" +\n          \"If you did not receive an email, please check your spam folder. \" +\n          \"If you still cannot find it, try to log in to receive another confirmation mail!\",\n        show_alert: true\n      };\n\n    } catch (error) {\n      if (error instanceof PrismaClientKnownRequestError) {\n        throw new ConflictException('E-Mail already exists');\n      } else {\n        throw new InternalServerErrorException('Unable to create user');\n      }\n    }\n  }\n\n  async confirm(challenge: string) {\n    const user = await this.userDBService.get({\n      challenge: challenge,\n    });\n    if (user && !user.verified) {\n      await this.userDBService.update({\n        where: { challenge },\n        data: { verified: true },\n      })\n      return { message: \"Email successfully verified! You can now log in.\", show_alert: true };\n    }\n    throw new NotFoundException('Email already verified or challenge not found');\n  }\n\n  async pw_reset_request(username: string) {\n    const user = await this.userDBService.get({ username })\n    if (user) {\n      const challenge = cuid();\n      const challenge_url = this.emailService.generate_pw_challenge_url(challenge);\n      await this.userDBService.update( {where: { username }, data: { pw_reset: true, challenge } } )\n      await this.emailService.send_password_reset(user.username, user.name, challenge_url);\n    }\n\n    return {\n      message: \"A password reset request was sent to the given email if this user account exists\",\n      show_alert: true\n    };\n  }\n\n  async pw_reset(challenge: string, password: string) {\n    if (!password_pattern.test(password)) {\n      throw new ForbiddenException('Invalid new password. Password must be minimum eight characters, at least one letter and one number!');\n    }\n\n    const user = await this.userDBService.get({ challenge })\n    if (user && user.pw_reset) {\n      const hashed_password = await this.passwordService.hash(password);\n      await this.userDBService.update({ where: { challenge }, data: { password: hashed_password, pw_reset: false } } )\n      return { message: \"Password successfully reset! You can now log in.\", show_alert: true };\n    }\n    throw new NotFoundException('Password already reset or challenge not found');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DiscordService.html":{"url":"injectables/DiscordService.html","title":"injectable - DiscordService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DiscordService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/util_services/discord.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                enabled\n                            \n                            \n                                    Private\n                                    Readonly\n                                webhookClient\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                send_message\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/common/util_services/discord.service.ts:7\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        send_message\n                        \n                    \n                \n            \n            \n                \n                    \n                    send_message(message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/util_services/discord.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        enabled\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.DISCORD_ENABLE === 'true'\n                    \n                \n                    \n                        \n                                Defined in src/common/util_services/discord.service.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        webhookClient\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/common/util_services/discord.service.ts:6\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { WebhookClient } from 'discord.js';\nimport { Injectable } from \"@nestjs/common\";\n\n@Injectable()\nexport class DiscordService {\n  private readonly webhookClient;\n  private readonly enabled = process.env.DISCORD_ENABLE === 'true';\n\n  constructor() {\n    if (this.enabled) {\n      this.webhookClient = new WebhookClient({ url: process.env.DISCORD_WEBHOOK_URL as string });\n    }\n  }\n\n  async send_message(message: string) {\n    if (this.enabled) {\n      // @ts-ignore\n      return this.webhookClient.send(message);\n    }\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EmailOptInDto.html":{"url":"classes/EmailOptInDto.html","title":"class - EmailOptInDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EmailOptInDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/user.dto/email_opt_in.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email_opt_in\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email_opt_in\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/types/user.dto/email_opt_in.dto.ts:3\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class EmailOptInDto {\n  email_opt_in!: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EmailService.html":{"url":"injectables/EmailService.html","title":"injectable - EmailService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EmailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/util_services/email.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                project_name\n                            \n                            \n                                    Private\n                                transporter\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                generate_challenge_url\n                            \n                            \n                                generate_pw_challenge_url\n                            \n                            \n                                    Async\n                                send_all_opt_in\n                            \n                            \n                                    Async\n                                send_challenge\n                            \n                            \n                                    Async\n                                send_password_reset\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userDBService: UserDBService)\n                    \n                \n                        \n                            \n                                Defined in src/common/util_services/email.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userDBService\n                                                  \n                                                        \n                                                                        UserDBService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        generate_challenge_url\n                        \n                    \n                \n            \n            \n                \ngenerate_challenge_url(challenge: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/util_services/email.service.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    challenge\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        generate_pw_challenge_url\n                        \n                    \n                \n            \n            \n                \ngenerate_pw_challenge_url(challenge: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/util_services/email.service.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    challenge\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        send_all_opt_in\n                        \n                    \n                \n            \n            \n                \n                    \n                    send_all_opt_in(body: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/util_services/email.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        send_challenge\n                        \n                    \n                \n            \n            \n                \n                    \n                    send_challenge(dest_mail: string, user_name: string, challenge_url: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/util_services/email.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dest_mail\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user_name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    challenge_url\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        send_password_reset\n                        \n                    \n                \n            \n            \n                \n                    \n                    send_password_reset(dest_mail: string, user_name: string, challenge_url: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/util_services/email.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dest_mail\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user_name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    challenge_url\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        project_name\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.PROJECT_NAME\n                    \n                \n                    \n                        \n                                Defined in src/common/util_services/email.service.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        transporter\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/common/util_services/email.service.ts:10\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\n\nconst nodemailer = require(\"nodemailer\");\nimport { TransportOptions } from \"nodemailer\";\nimport { UserDBService } from \"../db_services/users/userDB.service\";\n\n@Injectable()\nexport class EmailService {\n\n  private transporter;\n  private readonly project_name = process.env.PROJECT_NAME;\n\n  constructor(private readonly userDBService: UserDBService) {\n    this.transporter = nodemailer.createTransport({\n      host: process.env.EMAIL_HOST,\n      port: process.env.EMAIL_PORT,\n      secure: false,\n      auth: {\n        user: process.env.EMAIL_HOST_USER,\n        pass: process.env.EMAIL_HOST_PASSWORD\n      }\n    } as TransportOptions);\n  }\n\n  async send_challenge(dest_mail: string, user_name: string, challenge_url: string) {\n    await this.transporter.sendMail({\n      from: `\"${this.project_name}\" `,\n      to: dest_mail,\n      subject: `[${this.project_name}] Confirm your email!`,\n      text: `Hello ${user_name},\\n\\nplease confirm your email by clicking the following link:\\n${challenge_url}\\n\\n` +\n        `Dear\\n${this.project_name} Team\\n`\n    });\n  }\n\n  async send_password_reset(dest_mail: string, user_name: string, challenge_url: string) {\n    await this.transporter.sendMail({\n      from: `\"${this.project_name}\" `,\n      to: dest_mail,\n      subject: `[${this.project_name}] Password Reset Request!`,\n      text: `Hello ${user_name},\\n\\nplease reset your password by clicking the following link:\\n` +\n        `${challenge_url}\\n\\nDear\\n${this.project_name} Team\\n`\n    });\n  }\n\n  async send_all_opt_in(body: string) {\n    const opt_in_users = await this.userDBService.get_all_opt_in();\n    for (const user of opt_in_users) {\n      await this.transporter.sendMail({\n        from: `\"${this.project_name}\" `,\n        to: user.username,\n        subject: `[${this.project_name}] Announcement!`,\n        text: `Hello ${user.name},\\n\\n${body}\\nDear\\n${this.project_name} Team\\n`\n      });\n    }\n  }\n\n  generate_challenge_url(challenge: string) {\n    return `${process.env.FRONTEND_URL}login/${challenge}`;\n  }\n\n  generate_pw_challenge_url(challenge: string) {\n    return `${process.env.FRONTEND_URL}reset/${challenge}`;\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EventModule.html":{"url":"modules/EventModule.html","title":"module - EventModule","body":"\n                   \n\n\n\n\n    Modules\n    EventModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_EventModule\n\n\n\ncluster_EventModule_providers\n\n\n\ncluster_EventModule_imports\n\n\n\n\nHistoryDBModule\n\nHistoryDBModule\n\n\n\nEventModule\n\nEventModule\n\nEventModule -->\n\nHistoryDBModule->EventModule\n\n\n\n\n\nMovieDBModule\n\nMovieDBModule\n\nEventModule -->\n\nMovieDBModule->EventModule\n\n\n\n\n\nUserDBModule\n\nUserDBModule\n\nEventModule -->\n\nUserDBModule->EventModule\n\n\n\n\n\nVoteDBModule\n\nVoteDBModule\n\nEventModule -->\n\nVoteDBModule->EventModule\n\n\n\n\n\nWatchListDBModule\n\nWatchListDBModule\n\nEventModule -->\n\nWatchListDBModule->EventModule\n\n\n\n\n\nAnnounceJob\n\nAnnounceJob\n\nEventModule -->\n\nAnnounceJob->EventModule\n\n\n\n\n\nDiscordService\n\nDiscordService\n\nEventModule -->\n\nDiscordService->EventModule\n\n\n\n\n\nEmailService\n\nEmailService\n\nEventModule -->\n\nEmailService->EventModule\n\n\n\n\n\nHistoryJob\n\nHistoryJob\n\nEventModule -->\n\nHistoryJob->EventModule\n\n\n\n\n\nWatchListJob\n\nWatchListJob\n\nEventModule -->\n\nWatchListJob->EventModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/event_service/event.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AnnounceJob\n                        \n                        \n                            DiscordService\n                        \n                        \n                            EmailService\n                        \n                        \n                            HistoryJob\n                        \n                        \n                            WatchListJob\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            HistoryDBModule\n                        \n                        \n                            MovieDBModule\n                        \n                        \n                            UserDBModule\n                        \n                        \n                            VoteDBModule\n                        \n                        \n                            WatchListDBModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { HistoryJob } from \"./jobs/history.job\";\nimport { WatchListJob } from \"./jobs/watchlist.job\";\nimport { MovieDBModule } from \"../db_services/movies/movieDB.module\";\nimport { WatchListDBModule } from \"../db_services/watchlist/watchListDB.module\";\nimport { VoteDBModule } from \"../db_services/votes/voteDB.module\";\nimport { HistoryDBModule } from \"../db_services/histroy/historyDB.module\";\nimport { DiscordService } from \"../util_services/discord.service\";\nimport { AnnounceJob } from \"./jobs/announce.job\";\nimport { EmailService } from \"../util_services/email.service\";\nimport { UserDBModule } from \"../db_services/users/userDB.module\";\n\n@Module({\n  imports: [MovieDBModule, WatchListDBModule, VoteDBModule, HistoryDBModule, UserDBModule],\n  providers: [HistoryJob, WatchListJob, AnnounceJob, DiscordService, EmailService]\n})\nexport class EventModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GravatarService.html":{"url":"injectables/GravatarService.html","title":"injectable - GravatarService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GravatarService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/util_services/gravatar.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                generate_gravatar_url\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(passwordService: PasswordService)\n                    \n                \n                        \n                            \n                                Defined in src/common/util_services/gravatar.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        passwordService\n                                                  \n                                                        \n                                                                        PasswordService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        generate_gravatar_url\n                        \n                    \n                \n            \n            \n                \ngenerate_gravatar_url(username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/util_services/gravatar.service.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { PasswordService } from \"./password.service\";\n\n@Injectable()\nexport class GravatarService {\n\n  constructor(private readonly passwordService: PasswordService) {}\n\n  generate_gravatar_url(username: string): string {\n    const trim = username.trim().toLowerCase();\n    const hash = this.passwordService.hash_md5(trim);\n    return `https://www.gravatar.com/avatar/${hash}`;\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HistoryDBModule.html":{"url":"modules/HistoryDBModule.html","title":"module - HistoryDBModule","body":"\n                   \n\n\n\n\n    Modules\n    HistoryDBModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_HistoryDBModule\n\n\n\ncluster_HistoryDBModule_providers\n\n\n\ncluster_HistoryDBModule_exports\n\n\n\n\nHistoryDBService \n\nHistoryDBService \n\n\n\nHistoryDBModule\n\nHistoryDBModule\n\nHistoryDBService  -->\n\nHistoryDBModule->HistoryDBService \n\n\n\n\n\nHistoryDBService\n\nHistoryDBService\n\nHistoryDBModule -->\n\nHistoryDBService->HistoryDBModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nHistoryDBModule -->\n\nPrismaService->HistoryDBModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/db_services/histroy/historyDB.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            HistoryDBService\n                        \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            HistoryDBService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { HistoryDBService } from './historyDB.service';\nimport { PrismaService } from \"../prisma.service\";\n\n@Module({\n  providers: [HistoryDBService, PrismaService],\n  exports: [HistoryDBService]\n})\nexport class HistoryDBModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HistoryDBService.html":{"url":"injectables/HistoryDBService.html","title":"injectable - HistoryDBService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HistoryDBService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/db_services/histroy/historyDB.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                add\n                            \n                            \n                                    Async\n                                get_all\n                            \n                            \n                                    Async\n                                has\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/common/db_services/histroy/historyDB.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        add\n                        \n                    \n                \n            \n            \n                \n                    \n                    add(data: Prisma.HistoryCreateInput)\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/histroy/historyDB.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            Prisma.HistoryCreateInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get_all\n                        \n                    \n                \n            \n            \n                \n                    \n                    get_all()\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/histroy/historyDB.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        has\n                        \n                    \n                \n            \n            \n                \n                    \n                    has(imdb_id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/histroy/historyDB.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    imdb_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { PrismaService } from \"../prisma.service\";\nimport { Prisma } from \"@prisma/client\";\n\n@Injectable()\nexport class HistoryDBService {\n\n  constructor(private readonly prisma: PrismaService) {}\n\n  async get_all() {\n    return await this.prisma.history.findMany();\n  }\n\n  async add(data: Prisma.HistoryCreateInput) {\n    return await this.prisma.history.create({ data });\n  }\n\n  async has(imdb_id: string) {\n    return (await this.prisma.history.count({ where: { imdb_id } })) > 0;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HistoryJob.html":{"url":"injectables/HistoryJob.html","title":"injectable - HistoryJob","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HistoryJob\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/event_service/jobs/history.job.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                run\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(movieDBService: MovieDBService, historyDBService: HistoryDBService, watchListDBService: WatchListDBService, voteDBService: VoteDBService)\n                    \n                \n                        \n                            \n                                Defined in src/common/event_service/jobs/history.job.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        movieDBService\n                                                  \n                                                        \n                                                                        MovieDBService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        historyDBService\n                                                  \n                                                        \n                                                                        HistoryDBService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        watchListDBService\n                                                  \n                                                        \n                                                                        WatchListDBService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        voteDBService\n                                                  \n                                                        \n                                                                        VoteDBService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        run\n                        \n                    \n                \n            \n            \n                \n                    \n                    run()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Cron(: string)\n                \n            \n\n            \n                \n                    Defined in src/common/event_service/jobs/history.job.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { MovieDBService } from \"../../db_services/movies/movieDB.service\";\nimport { HistoryDBService } from \"../../db_services/histroy/historyDB.service\";\nimport { WatchListDBService } from \"../../db_services/watchlist/watchListDB.service\";\nimport { Movie, Prisma } from \"@prisma/client\";\nimport { VoteDBService } from \"../../db_services/votes/voteDB.service\";\nimport { Cron } from \"@nestjs/schedule\";\n\n@Injectable()\nexport class HistoryJob {\n\n  constructor(private readonly movieDBService: MovieDBService,\n              private readonly historyDBService: HistoryDBService,\n              private readonly watchListDBService: WatchListDBService,\n              private readonly voteDBService: VoteDBService) {}\n\n  @Cron(process.env.SCHEDULE_HISTORY as string)\n  async run() {\n    console.log('History job started');\n    const watch_list = await this.watchListDBService.get_all()\n    for (const movie of watch_list) {\n      const movie_data = await this.movieDBService.get(movie.imdb_id) as Movie\n      const data = {\n        imdb_id: movie.imdb_id,\n        title: movie_data.title,\n        link: movie_data.link\n      } as Prisma.HistoryCreateInput\n      await this.historyDBService.add(data)\n      await this.voteDBService.delete_all(movie.imdb_id)\n      await this.watchListDBService.delete(movie.imdb_id)\n      await this.movieDBService.delete(movie.imdb_id)\n    }\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/auth/jwt-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/auth/jwt.stategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/routes/auth/jwt.stategy.ts:7\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/auth/jwt.stategy.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { JwtUser } from \"../../types/jwtuser.type\";\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: process.env.JWT_SECRET,\n    });\n  }\n\n  async validate(payload: any) : Promise {\n    return { id: payload.sub };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JwtUser.html":{"url":"interfaces/JwtUser.html","title":"interface - JwtUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  JwtUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/jwtuser.type.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface JwtUser {\n  id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/auth/auth.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard('local') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/auth/local.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/routes/auth/local.strategy.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(username: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/auth/local.strategy.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy } from 'passport-local';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { AuthService } from './auth.service';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private authService: AuthService) {\n    super();\n  }\n\n  async validate(username: string, password: string): Promise {\n    const user = await this.authService.validateUser(username, password);\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggerMiddleware.html":{"url":"injectables/LoggerMiddleware.html","title":"injectable - LoggerMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggerMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/middleware/logger.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(req: any, res: any, next: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/logger.middleware.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware } from '@nestjs/common';\n\n@Injectable()\nexport class LoggerMiddleware implements NestMiddleware {\n  use(req: any, res: any, next: () => void) {\n    console.log('----------------------------------');\n    console.log('Request Body');\n    console.log('----------------------------------');\n    console.log(req.body)\n    console.log('----------------------------------');\n    next();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/user.dto/login.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/types/user.dto/login.dto.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/types/user.dto/login.dto.ts:3\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class LoginDto {\n  username!: string;\n  password!: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MovieController.html":{"url":"controllers/MovieController.html","title":"controller - MovieController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MovieController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/movie/movie.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                movie\n            \n\n\n            \n                Description\n            \n            \n                Controller for movie related routes\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                delete_media\n                            \n                            \n                                    Async\n                                get_all_media\n                            \n                            \n                                    Async\n                                get_history\n                            \n                            \n                                    Async\n                                get_media\n                            \n                            \n                                    Async\n                                get_watchlist\n                            \n                            \n                                    Async\n                                post_media\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete_media\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete_media(user: JwtUser, imdb_id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'DEL remove a movie from the movie database by a given imdb_id, when the given user is the proposer'})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@Delete(':imdb_id')\n                \n            \n\n            \n                \n                    Defined in src/routes/movie/movie.controller.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                JwtUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    imdb_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get_all_media\n                        \n                    \n                \n            \n            \n                \n                    \n                    get_all_media()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'GET all movies with its related data'})@Get('all')\n                \n            \n\n            \n                \n                    Defined in src/routes/movie/movie.controller.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get_history\n                        \n                    \n                \n            \n            \n                \n                    \n                    get_history()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'GET all movies from history with its related data'})@Get('history')\n                \n            \n\n            \n                \n                    Defined in src/routes/movie/movie.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get_media\n                        \n                    \n                \n            \n            \n                \n                    \n                    get_media(imdb_id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'GET information about a specific movie given by its imdb_id'})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@Get(':imdb_id')\n                \n            \n\n            \n                \n                    Defined in src/routes/movie/movie.controller.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    imdb_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get_watchlist\n                        \n                    \n                \n            \n            \n                \n                    \n                    get_watchlist()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'GET all movies from watchlist with its related data'})@Get('watchlist')\n                \n            \n\n            \n                \n                    Defined in src/routes/movie/movie.controller.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        post_media\n                        \n                    \n                \n            \n            \n                \n                    \n                    post_media(user: JwtUser, imdb_id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'POST add a movie to the movie database by a given imdb_id. This is only possible if the movie is not already in the movie, watchlist or history database! The given user will be the proposer of the movie'})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@Post(':imdb_id')\n                \n            \n\n            \n                \n                    Defined in src/routes/movie/movie.controller.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                JwtUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    imdb_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, Post, UseGuards } from \"@nestjs/common\";\nimport { ApiBearerAuth, ApiOperation, ApiTags } from \"@nestjs/swagger\";\nimport { MovieService } from \"./movie.service\";\nimport { JwtAuthGuard } from \"../auth/jwt-auth.guard\";\nimport { User } from \"../../common/decorators/user.decorator\";\nimport { JwtUser } from \"../../types/jwtuser.type\";\nimport { MovieExtType } from \"../../types/movie.types/movie_ext.type\";\nimport { WatchlistExtType } from \"../../types/movie.types/watchlist_ext.type\";\nimport { History, Vote, Movie } from \"@prisma/client\";\nimport { ResDto } from \"../../types/res.dto\";\nimport imdb from \"imdb-api\";\n\n/**\n * Controller for movie related routes\n */\n@ApiTags('movie')\n@Controller('movie')\nexport class MovieController {\n\n  constructor(private readonly movieService: MovieService) {}\n\n  @ApiOperation({ summary: 'GET all movies with its related data' })\n  @Get('all')\n  async get_all_media() : Promise {\n    return await this.movieService.get_all()\n  }\n\n  @ApiOperation({ summary: 'GET all movies from watchlist with its related data' })\n  @Get('watchlist')\n  async get_watchlist() : Promise {\n    return await this.movieService.get_watchlist()\n  }\n\n  @ApiOperation({ summary: 'GET all movies from history with its related data' })\n  @Get('history')\n  async get_history() : Promise {\n    return await this.movieService.get_history()\n  }\n\n  @ApiOperation({ summary: 'GET information about a specific movie given by its imdb_id' })\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @Get(':imdb_id')\n  async get_media(@Param('imdb_id') imdb_id: string) : Promise {\n    return await this.movieService.get(imdb_id)\n  }\n\n  @ApiOperation({ summary: 'POST add a movie to the movie database by a given imdb_id. This is only possible if the movie is not already in the movie, watchlist or history database! The given user will be the proposer of the movie' })\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @Post(':imdb_id')\n  async post_media(@User() user: JwtUser, @Param('imdb_id') imdb_id: string): Promise {\n    return await this.movieService.save(imdb_id, Number(user.id))\n  }\n\n  @ApiOperation({ summary: \"DEL remove a movie from the movie database by a given imdb_id, when the given user is the proposer\" })\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @Delete(':imdb_id')\n  async delete_media(@User() user: JwtUser, @Param('imdb_id') imdb_id: string) : Promise {\n    return await this.movieService.delete(imdb_id, user.id)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MovieDBModule.html":{"url":"modules/MovieDBModule.html","title":"module - MovieDBModule","body":"\n                   \n\n\n\n\n    Modules\n    MovieDBModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_MovieDBModule\n\n\n\ncluster_MovieDBModule_providers\n\n\n\ncluster_MovieDBModule_exports\n\n\n\n\nMovieDBService \n\nMovieDBService \n\n\n\nMovieDBModule\n\nMovieDBModule\n\nMovieDBService  -->\n\nMovieDBModule->MovieDBService \n\n\n\n\n\nMovieDBService\n\nMovieDBService\n\nMovieDBModule -->\n\nMovieDBService->MovieDBModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nMovieDBModule -->\n\nPrismaService->MovieDBModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/db_services/movies/movieDB.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MovieDBService\n                        \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MovieDBService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MovieDBService } from './movieDB.service';\nimport { PrismaService } from \"../prisma.service\";\n\n@Module({\n  providers: [MovieDBService, PrismaService],\n  exports: [MovieDBService]\n})\nexport class MovieDBModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MovieDBService.html":{"url":"injectables/MovieDBService.html","title":"injectable - MovieDBService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MovieDBService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/db_services/movies/movieDB.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                add\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                delete_all_proposed\n                            \n                            \n                                    Async\n                                get\n                            \n                            \n                                    Async\n                                get_all\n                            \n                            \n                                    Async\n                                get_all_proposed\n                            \n                            \n                                    Async\n                                get_imdb\n                            \n                            \n                                    Async\n                                has\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/common/db_services/movies/movieDB.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        add\n                        \n                    \n                \n            \n            \n                \n                    \n                    add(data: Prisma.MovieCreateInput)\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/movies/movieDB.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            Prisma.MovieCreateInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(imdb_id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/movies/movieDB.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    imdb_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete_all_proposed\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete_all_proposed(user_id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/movies/movieDB.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user_id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(imdb_id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/movies/movieDB.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    imdb_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get_all\n                        \n                    \n                \n            \n            \n                \n                    \n                    get_all()\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/movies/movieDB.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get_all_proposed\n                        \n                    \n                \n            \n            \n                \n                    \n                    get_all_proposed(user_id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/movies/movieDB.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user_id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get_imdb\n                        \n                    \n                \n            \n            \n                \n                    \n                    get_imdb(imdb_id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/movies/movieDB.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    imdb_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        has\n                        \n                    \n                \n            \n            \n                \n                    \n                    has(imdb_id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/movies/movieDB.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    imdb_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PrismaService } from \"../prisma.service\";\nimport { Prisma } from \"@prisma/client\";\n\n@Injectable()\nexport class MovieDBService {\n\n  constructor(private readonly prisma: PrismaService) {}\n\n  async get(imdb_id : string) {\n    return await this.prisma.movie.findUnique({\n      where: { imdb_id },\n    });\n  }\n\n  async get_imdb(imdb_id: string) {\n    return await this.prisma.movie.findUnique({\n      where: { imdb_id },\n    });\n  }\n\n  async get_all() {\n    return await this.prisma.movie.findMany();\n  }\n\n  async has(imdb_id: string) {\n    return (await this.prisma.movie.count({ where: { imdb_id } })) > 0;\n  }\n\n  async get_all_proposed(user_id : number) {\n    return await this.prisma.movie.findMany({\n      where: { proposer_id: user_id }\n    });\n  }\n\n  async add(data: Prisma.MovieCreateInput) {\n    return await this.prisma.movie.create({ data });\n  }\n\n  async delete(imdb_id: string) {\n    return await this.prisma.movie.delete({ where: { imdb_id } });\n  }\n\n  async delete_all_proposed(user_id : number) {\n    return await this.prisma.movie.deleteMany({\n      where: { proposer_id: user_id } as Prisma.MovieWhereUniqueInput\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MovieExtType.html":{"url":"interfaces/MovieExtType.html","title":"interface - MovieExtType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MovieExtType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/movie.types/movie_ext.type.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            createdAt\n                                        \n                                \n                                \n                                        \n                                            genre\n                                        \n                                \n                                \n                                        \n                                            imdb_id\n                                        \n                                \n                                \n                                        \n                                            link\n                                        \n                                \n                                \n                                        \n                                            proposer\n                                        \n                                \n                                \n                                        \n                                            proposer_id\n                                        \n                                \n                                \n                                        \n                                            title\n                                        \n                                \n                                \n                                        \n                                            votes\n                                        \n                                \n                                \n                                        \n                                            year\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        createdAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        createdAt:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        genre\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        genre:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        imdb_id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        imdb_id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        link\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        link:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        proposer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        proposer:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        proposer_id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        proposer_id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        votes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        votes:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        year\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        year:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface MovieExtType {\n  imdb_id: string,\n  title: string,\n  link: string,\n  year: number,\n  genre: string,\n  proposer: string,\n  proposer_id: number,\n  createdAt: Date,\n  votes: number\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MovieModule.html":{"url":"modules/MovieModule.html","title":"module - MovieModule","body":"\n                   \n\n\n\n\n    Modules\n    MovieModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_MovieModule\n\n\n\ncluster_MovieModule_imports\n\n\n\ncluster_MovieModule_providers\n\n\n\n\nHistoryDBModule\n\nHistoryDBModule\n\n\n\nMovieModule\n\nMovieModule\n\nMovieModule -->\n\nHistoryDBModule->MovieModule\n\n\n\n\n\nMovieDBModule\n\nMovieDBModule\n\nMovieModule -->\n\nMovieDBModule->MovieModule\n\n\n\n\n\nUserDBModule\n\nUserDBModule\n\nMovieModule -->\n\nUserDBModule->MovieModule\n\n\n\n\n\nVoteDBModule\n\nVoteDBModule\n\nMovieModule -->\n\nVoteDBModule->MovieModule\n\n\n\n\n\nWatchListDBModule\n\nWatchListDBModule\n\nMovieModule -->\n\nWatchListDBModule->MovieModule\n\n\n\n\n\nMovieService\n\nMovieService\n\nMovieModule -->\n\nMovieService->MovieModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nMovieModule -->\n\nPrismaService->MovieModule\n\n\n\n\n\nVoteService\n\nVoteService\n\nMovieModule -->\n\nVoteService->MovieModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/routes/movie/movie.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MovieService\n                        \n                        \n                            PrismaService\n                        \n                        \n                            VoteService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MovieController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            HistoryDBModule\n                        \n                        \n                            MovieDBModule\n                        \n                        \n                            UserDBModule\n                        \n                        \n                            VoteDBModule\n                        \n                        \n                            WatchListDBModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MovieController } from './movie.controller';\nimport { MovieService } from './movie.service';\nimport { PrismaService } from \"../../common/db_services/prisma.service\";\nimport { MovieDBModule } from \"../../common/db_services/movies/movieDB.module\";\nimport { UserDBModule } from \"../../common/db_services/users/userDB.module\";\nimport { VoteDBModule } from \"../../common/db_services/votes/voteDB.module\";\nimport { VoteService } from \"../vote/vote.service\";\nimport { HistoryDBModule } from \"../../common/db_services/histroy/historyDB.module\";\nimport { WatchListDBModule } from \"../../common/db_services/watchlist/watchListDB.module\";\n\n@Module({\n  imports: [MovieDBModule, UserDBModule, VoteDBModule, HistoryDBModule, WatchListDBModule],\n  controllers: [MovieController],\n  providers: [PrismaService, MovieService, VoteService]\n})\nexport class MovieModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MovieService.html":{"url":"injectables/MovieService.html","title":"injectable - MovieService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MovieService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/movie/movie.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                imdb\n                            \n                            \n                                    Private\n                                    Readonly\n                                max_proposeable_movies\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                get\n                            \n                            \n                                    Async\n                                get_all\n                            \n                            \n                                    Async\n                                get_history\n                            \n                            \n                                    Async\n                                get_watchlist\n                            \n                            \n                                    Async\n                                save\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(movieDBService: MovieDBService, userDBService: UserDBService, voteDBService: VoteDBService, histroyDBService: HistoryDBService, watchlistDBService: WatchListDBService, voteService: VoteService)\n                    \n                \n                        \n                            \n                                Defined in src/routes/movie/movie.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        movieDBService\n                                                  \n                                                        \n                                                                        MovieDBService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userDBService\n                                                  \n                                                        \n                                                                        UserDBService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        voteDBService\n                                                  \n                                                        \n                                                                        VoteDBService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        histroyDBService\n                                                  \n                                                        \n                                                                        HistoryDBService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        watchlistDBService\n                                                  \n                                                        \n                                                                        WatchListDBService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        voteService\n                                                  \n                                                        \n                                                                        VoteService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(imdb_id: string, proposer_id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/movie/movie.service.ts:105\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    imdb_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    proposer_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(imdb_id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/movie/movie.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    imdb_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get_all\n                        \n                    \n                \n            \n            \n                \n                    \n                    get_all()\n                \n            \n\n\n            \n                \n                    Defined in src/routes/movie/movie.service.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get_history\n                        \n                    \n                \n            \n            \n                \n                    \n                    get_history()\n                \n            \n\n\n            \n                \n                    Defined in src/routes/movie/movie.service.ts:138\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get_watchlist\n                        \n                    \n                \n            \n            \n                \n                    \n                    get_watchlist()\n                \n            \n\n\n            \n                \n                    Defined in src/routes/movie/movie.service.ts:122\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        save\n                        \n                    \n                \n            \n            \n                \n                    \n                    save(imdb_id: string, proposer_id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/movie/movie.service.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    imdb_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    proposer_id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        imdb\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Client\n\n                    \n                \n                    \n                        \n                                Defined in src/routes/movie/movie.service.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        max_proposeable_movies\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Number(process.env.MAX_PROPOSEABLE_MOVIES)\n                    \n                \n                    \n                        \n                                Defined in src/routes/movie/movie.service.ts:19\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, ForbiddenException, Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Client } from \"imdb-api\";\nimport { MovieDBService } from \"../../common/db_services/movies/movieDB.service\";\nimport { Prisma, User, Movie } from \"@prisma/client\";\nimport { UserDBService } from \"../../common/db_services/users/userDB.service\";\nimport { VoteDBService } from \"../../common/db_services/votes/voteDB.service\";\nimport { VoteService } from \"../vote/vote.service\";\nimport { HistoryDBService } from \"../../common/db_services/histroy/historyDB.service\";\nimport { WatchListDBService } from \"../../common/db_services/watchlist/watchListDB.service\";\nimport { MovieExtType } from \"../../types/movie.types/movie_ext.type\";\nimport { WatchlistExtType } from \"../../types/movie.types/watchlist_ext.type\";\nimport { ResDto } from \"../../types/res.dto\";\nimport { imdb_id_pattern } from \"../../common/validation/patterns/imdb_id.pattern\";\n\n@Injectable()\nexport class MovieService {\n\n  private readonly imdb: Client\n  private readonly max_proposeable_movies = Number(process.env.MAX_PROPOSEABLE_MOVIES)\n\n  constructor(private readonly movieDBService: MovieDBService,\n              private readonly userDBService: UserDBService,\n              private readonly voteDBService: VoteDBService,\n              private readonly histroyDBService: HistoryDBService,\n              private readonly watchlistDBService: WatchListDBService,\n              private readonly voteService: VoteService) {\n    this.imdb = new Client({apiKey: process.env.OMDB_API_KEY})\n  }\n\n  async get(imdb_id: string) {\n    try {\n      return await this.imdb.get({ id: imdb_id })\n    } catch (e) {\n      throw new NotFoundException('Movie not found')\n    }\n  }\n\n  async get_all() {\n    const movies = await this.movieDBService.get_all()\n    return await Promise.all(movies.map(async (movie) => {\n      const user = await this.userDBService.get({ id: movie.proposer_id }) as User\n      const votes = await this.voteDBService.get_num_of_votes(movie.imdb_id)\n\n      return {\n        imdb_id: movie.imdb_id,\n        title: movie.title,\n        link: movie.link,\n        year: movie.year,\n        genre: movie.genre,\n        proposer: user.name,\n        proposer_id: user.id,\n        createdAt: movie.createdAt,\n        votes\n      } as MovieExtType;\n    }));\n  }\n\n  async save(imdb_id: string, proposer_id: number) {\n    if (!imdb_id_pattern.test(imdb_id)) {\n      throw new ForbiddenException('Invalid imdb id. The id must start with tt and contain only numbers!')\n    }\n\n    if (await this.histroyDBService.has(imdb_id)) {\n      throw new ConflictException('Movie is already in history')\n    }\n\n    if (await this.movieDBService.has(imdb_id)) {\n      throw new ConflictException('Movie is already in database')\n    }\n\n    if ((await this.movieDBService.get_all_proposed(proposer_id)).length >= this.max_proposeable_movies) {\n      throw new ConflictException('You have reached the maximum number of proposed movies! ' +\n        'You can only propose ' + this.max_proposeable_movies + ' movies!')\n    }\n\n    const movie = await this.get(imdb_id)\n    const { username } : Prisma.UserCreateInput = await this.userDBService.get({id: proposer_id}) as User\n\n    const movieDB_data: Prisma.MovieCreateInput = {\n      imdb_id: imdb_id,\n      title: movie.title,\n      year: movie.year,\n      genre: movie.genres,\n      link: movie.imdburl,\n      proposer: { connect: { username } } as Prisma.UserCreateNestedOneWithoutMovieInput,\n      runtime: Number((movie.runtime.split(\" \"))[0])\n    }\n\n    try {\n      return this.movieDBService.add(movieDB_data).then((movie) => {\n        return this.voteService.vote(movie.imdb_id, proposer_id)\n          .then((vote) => {\n            return { movie, vote }\n          })\n          .catch((e) => {\n            this.movieDBService.delete(movie.imdb_id)\n            throw e\n          })\n      })\n    } catch (e) {\n      throw new ConflictException('Movie already exists')\n    }\n  }\n\n  async delete(imdb_id: string, proposer_id: string) {\n    const movie = await this.movieDBService.get(imdb_id) as Movie\n    const watchlist = await this.watchlistDBService.get_all()\n    const watchlist_imdbs = watchlist.map((movie) => movie.imdb_id)\n\n    if (watchlist_imdbs.includes(imdb_id)) {\n      throw new ConflictException('Movie is in watchlist')\n    }\n    else if (movie.proposer_id === Number(proposer_id)) {\n      await this.voteDBService.delete_all(imdb_id)\n      await this.movieDBService.delete(imdb_id)\n      return { message: \"Successfully deleted movie: \" + movie.title, show_alert: true } as ResDto\n    } else {\n      throw new NotFoundException('Movie not found or you are not the proposer')\n    }\n  }\n\n  async get_watchlist() {\n    const watchlist = await this.watchlistDBService.get_all()\n\n    return await Promise.all(watchlist.map(async (watch_movie) => {\n      const movie = await this.movieDBService.get(watch_movie.imdb_id) as Movie\n      const votes = await this.voteDBService.get_votes_movie(movie.imdb_id)\n      return {\n        imdb_id: movie.imdb_id,\n        title: movie.title,\n        link: movie.link,\n        start_time: watch_movie.start_time,\n        interested: votes.map((vote) => vote.user.id)\n      } as WatchlistExtType\n    }))\n  }\n\n  async get_history() {\n    return await this.histroyDBService.get_all()\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PasswordDto.html":{"url":"classes/PasswordDto.html","title":"class - PasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/user.dto/password.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                    Optional\n                                password_confirm\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/types/user.dto/password.dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        password_confirm\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/types/user.dto/password.dto.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class PasswordDto {\n  password!: string;\n  password_confirm?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PasswordNewDto.html":{"url":"classes/PasswordNewDto.html","title":"class - PasswordNewDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PasswordNewDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/user.dto/password_new.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                    Optional\n                                password_confirm\n                            \n                            \n                                password_old\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/types/user.dto/password_new.dto.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        password_confirm\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/types/user.dto/password_new.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password_old\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/types/user.dto/password_new.dto.ts:3\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class PasswordNewDto {\n  password_old!: string;\n  password!: string;\n  password_confirm?: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PasswordService.html":{"url":"injectables/PasswordService.html","title":"injectable - PasswordService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PasswordService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/util_services/password.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                compare\n                            \n                            \n                                    Async\n                                hash\n                            \n                            \n                                hash_md5\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        compare\n                        \n                    \n                \n            \n            \n                \n                    \n                    compare(password: string, hash: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/util_services/password.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    hash\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        hash\n                        \n                    \n                \n            \n            \n                \n                    \n                    hash(password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/util_services/password.service.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hash_md5\n                        \n                    \n                \n            \n            \n                \nhash_md5(string: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/util_services/password.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    string\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\n\nconst bcrypt = require('bcrypt');\nimport md5 from \"crypto-js/md5\";\n\n@Injectable()\nexport class PasswordService {\n\n  async hash(password: string): Promise {\n    return bcrypt.hash(password, 10);\n  }\n\n  hash_md5(string: string): string {\n    return md5(string).toString();\n  }\n\n  async compare(password: string, hash: string): Promise {\n    return bcrypt.compare(password, hash);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/db_services/prisma.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                enableShutdownHooks\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        enableShutdownHooks\n                        \n                    \n                \n            \n            \n                \n                    \n                    enableShutdownHooks(app: INestApplication)\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/prisma.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n                                    \n                                            INestApplication\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/prisma.service.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { INestApplication, Injectable, OnModuleInit } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n@Injectable()\nexport class PrismaService extends PrismaClient implements OnModuleInit {\n  async onModuleInit() {\n    await this.$connect();\n  }\n\n  async enableShutdownHooks(app: INestApplication) {\n    this.$on('beforeExit', async () => {\n      await app.close();\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProfileDto.html":{"url":"classes/ProfileDto.html","title":"class - ProfileDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProfileDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/user.dto/profile.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                            \n                                    Optional\n                                use_gravatar\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/types/user.dto/profile.dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        use_gravatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/types/user.dto/profile.dto.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class ProfileDto {\n  name!: string;\n  use_gravatar?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterDto.html":{"url":"classes/RegisterDto.html","title":"class - RegisterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/user.dto/register.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                    Optional\n                                password_confirm\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/types/user.dto/register.dto.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/types/user.dto/register.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        password_confirm\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/types/user.dto/register.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/types/user.dto/register.dto.ts:3\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class RegisterDto {\n  username!: string;\n  name!: string;\n  password!: string;\n  password_confirm?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ResDto.html":{"url":"classes/ResDto.html","title":"class - ResDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ResDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/res.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                message\n                            \n                            \n                                    Optional\n                                show_alert\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/types/res.dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        show_alert\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/types/res.dto.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class ResDto {\n  message!: string;\n  show_alert?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n            \n                Description\n            \n            \n                Controller for user related routes\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                change_password\n                            \n                            \n                                    Async\n                                change_username\n                            \n                            \n                                    Async\n                                check_profile\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                email_opt_in\n                            \n                            \n                                    Async\n                                get\n                            \n                            \n                                    Async\n                                get_data\n                            \n                            \n                                    Async\n                                get_user\n                            \n                            \n                                    Async\n                                update_profile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        change_password\n                        \n                    \n                \n            \n            \n                \n                    \n                    change_password(user: JwtUser, body: PasswordNewDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'POST update password'})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@Post('password')\n                \n            \n\n            \n                \n                    Defined in src/routes/user/user.controller.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                JwtUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                PasswordNewDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        change_username\n                        \n                    \n                \n            \n            \n                \n                    \n                    change_username(user: JwtUser, body: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'POST update username (email)'})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@Post('username')\n                \n            \n\n            \n                \n                    Defined in src/routes/user/user.controller.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                JwtUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        check_profile\n                        \n                    \n                \n            \n            \n                \n                    \n                    check_profile()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'GET check if bearer token is valid'})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@Get('check')\n                \n            \n\n            \n                \n                    Defined in src/routes/user/user.controller.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(user: JwtUser, body: PasswordDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'DELETE user'})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@Delete()\n                \n            \n\n            \n                \n                    Defined in src/routes/user/user.controller.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                JwtUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                PasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        email_opt_in\n                        \n                    \n                \n            \n            \n                \n                    \n                    email_opt_in(user: JwtUser, body: EmailOptInDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'POST update email_opt_in (set/unset on newsletter)'})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@Post('email_opt_in')\n                \n            \n\n            \n                \n                    Defined in src/routes/user/user.controller.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                JwtUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                EmailOptInDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(user: JwtUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'GET user data'})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@Get()\n                \n            \n\n            \n                \n                    Defined in src/routes/user/user.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                JwtUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get_data\n                        \n                    \n                \n            \n            \n                \n                    \n                    get_data(user: JwtUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'GET all saved user data'})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@Get('data')\n                \n            \n\n            \n                \n                    Defined in src/routes/user/user.controller.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                JwtUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get_user\n                        \n                    \n                \n            \n            \n                \n                    \n                    get_user(user_id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'GET public user data from given user_id'})@Get(':user_id')\n                \n            \n\n            \n                \n                    Defined in src/routes/user/user.controller.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update_profile\n                        \n                    \n                \n            \n            \n                \n                    \n                    update_profile(user: JwtUser, body: ProfileDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'POST update profile information (name, gravatar)'})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@Post()\n                \n            \n\n            \n                \n                    Defined in src/routes/user/user.controller.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                JwtUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                ProfileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, UseGuards, Post, Delete, Param, Body } from \"@nestjs/common\";\nimport { JwtAuthGuard } from '../auth/jwt-auth.guard';\nimport { UserService } from \"./user.service\";\nimport { User } from \"../../common/decorators/user.decorator\";\nimport { JwtUser } from \"../../types/jwtuser.type\";\nimport { ProfileDto } from \"../../types/user.dto/profile.dto\";\nimport { EmailOptInDto } from \"../../types/user.dto/email_opt_in.dto\";\nimport { PasswordDto } from \"../../types/user.dto/password.dto\";\nimport { LoginDto } from \"../../types/user.dto/login.dto\";\nimport { PasswordNewDto } from \"../../types/user.dto/password_new.dto\";\nimport { ResDto } from \"../../types/res.dto\";\nimport { ApiBearerAuth, ApiOperation, ApiTags } from \"@nestjs/swagger\";\n\n/**\n * Controller for user related routes\n */\n@ApiTags('user')\n@Controller('user')\nexport class UserController {\n\n  constructor(private readonly userService: UserService) {}\n\n  @ApiOperation({ summary: 'GET user data' })\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @Get()\n  async get(@User() user: JwtUser) {\n    return await this.userService.get(Number(user.id));\n  }\n\n  @ApiOperation({ summary: 'POST update profile information (name, gravatar)' })\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @Post()\n  async update_profile(@User() user: JwtUser, @Body() body: ProfileDto): Promise {\n    return await this.userService.change_profile(Number(user.id), body);\n  }\n\n  @ApiOperation({ summary: 'POST update email_opt_in (set/unset on newsletter)' })\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @Post('email_opt_in')\n  async email_opt_in(@User() user: JwtUser, @Body() body: EmailOptInDto): Promise {\n    return await this.userService.email_opt_in(Number(user.id), Boolean(body.email_opt_in));\n  }\n\n  @ApiOperation({ summary: 'DELETE user' })\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @Delete()\n  async delete(@User() user: JwtUser, @Body() body: PasswordDto): Promise {\n    return await this.userService.delete(Number(user.id), body.password);\n  }\n\n  @ApiOperation({ summary: 'GET all saved user data' })\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @Get('data')\n  async get_data(@User() user: JwtUser) {\n    return await this.userService.get_user_data(Number(user.id));\n  }\n\n  @ApiOperation({ summary: 'POST update username (email)' })\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @Post('username')\n  async change_username(@User() user: JwtUser, @Body() body: LoginDto): Promise {\n    return await this.userService.change_username(Number(user.id), body.username, body.password);\n  }\n\n  @ApiOperation({ summary: 'POST update password' })\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @Post('password')\n  async change_password(@User() user: JwtUser, @Body() body: PasswordNewDto): Promise {\n    return await this.userService.change_password(Number(user.id), body.password, body.password_old);\n  }\n\n  @ApiOperation({ summary: 'GET check if bearer token is valid' })\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @Get('check')\n  async check_profile() {\n    return true;\n  }\n\n  @ApiOperation({ summary: 'GET public user data from given user_id' })\n  @Get(':user_id')\n  async get_user(@Param('user_id') user_id: string) {\n    return await this.userService.get_public(Number(user_id));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserDBModule.html":{"url":"modules/UserDBModule.html","title":"module - UserDBModule","body":"\n                   \n\n\n\n\n    Modules\n    UserDBModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserDBModule\n\n\n\ncluster_UserDBModule_providers\n\n\n\ncluster_UserDBModule_exports\n\n\n\n\nUserDBService \n\nUserDBService \n\n\n\nUserDBModule\n\nUserDBModule\n\nUserDBService  -->\n\nUserDBModule->UserDBService \n\n\n\n\n\nPasswordService\n\nPasswordService\n\nUserDBModule -->\n\nPasswordService->UserDBModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nUserDBModule -->\n\nPrismaService->UserDBModule\n\n\n\n\n\nUserDBService\n\nUserDBService\n\nUserDBModule -->\n\nUserDBService->UserDBModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/db_services/users/userDB.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PasswordService\n                        \n                        \n                            PrismaService\n                        \n                        \n                            UserDBService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserDBService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UserDBService } from './userDB.service';\nimport { PrismaService } from '../prisma.service';\nimport { PasswordService } from \"../../util_services/password.service\";\n\n@Module({\n  providers: [UserDBService, PrismaService, PasswordService],\n  exports: [UserDBService],\n})\nexport class UserDBModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserDBService.html":{"url":"injectables/UserDBService.html","title":"injectable - UserDBService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserDBService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/db_services/users/userDB.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                get\n                            \n                            \n                                    Async\n                                get_all\n                            \n                            \n                                    Async\n                                get_all_opt_in\n                            \n                            \n                                    Async\n                                has_user\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService, passwordService: PasswordService)\n                    \n                \n                        \n                            \n                                Defined in src/common/db_services/users/userDB.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        passwordService\n                                                  \n                                                        \n                                                                        PasswordService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data: Prisma.UserCreateInput)\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/users/userDB.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                Prisma.UserCreateInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(where: Prisma.UserWhereUniqueInput)\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/users/userDB.service.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    where\n                                    \n                                                Prisma.UserWhereUniqueInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(userWhereUniqueInput: Prisma.UserWhereUniqueInput)\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/users/userDB.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userWhereUniqueInput\n                                    \n                                                Prisma.UserWhereUniqueInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get_all\n                        \n                    \n                \n            \n            \n                \n                    \n                    get_all()\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/users/userDB.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get_all_opt_in\n                        \n                    \n                \n            \n            \n                \n                    \n                    get_all_opt_in()\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/users/userDB.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        has_user\n                        \n                    \n                \n            \n            \n                \n                    \n                    has_user(username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/users/userDB.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(params: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/users/userDB.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PrismaService } from '../prisma.service';\nimport { User, Prisma } from '@prisma/client';\nimport { PasswordService } from \"../../util_services/password.service\";\n\n@Injectable()\nexport class UserDBService {\n  constructor(private readonly prisma: PrismaService,\n              private readonly passwordService: PasswordService) {}\n\n  async get(\n    userWhereUniqueInput: Prisma.UserWhereUniqueInput,\n  ): Promise {\n    return this.prisma.user.findUnique({\n      where: userWhereUniqueInput,\n    });\n  }\n\n  async has_user(username: string): Promise {\n    return (await this.prisma.user.count({ where: {username} })) > 0;\n  }\n\n  async get_all(): Promise {\n    return this.prisma.user.findMany();\n  }\n\n  async get_all_opt_in() : Promise {\n    return this.prisma.user.findMany({ where: { email_opt_in: true } });\n  }\n\n  async create(data: Prisma.UserCreateInput): Promise {\n    data.password = await this.passwordService.hash(data.password);\n    return this.prisma.user.create({ data });\n  }\n\n  async update(params: {\n    where: Prisma.UserWhereUniqueInput;\n    data: Prisma.UserUpdateInput;\n  }): Promise {\n    const { where, data } = params;\n    return this.prisma.user.update({\n      data,\n      where,\n    });\n  }\n\n  async delete(where: Prisma.UserWhereUniqueInput): Promise {\n    return this.prisma.user.delete({ where });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserModule\n\n\n\ncluster_UserModule_imports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nMovieDBModule\n\nMovieDBModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nMovieDBModule->UserModule\n\n\n\n\n\nUserDBModule\n\nUserDBModule\n\nUserModule -->\n\nUserDBModule->UserModule\n\n\n\n\n\nVoteDBModule\n\nVoteDBModule\n\nUserModule -->\n\nVoteDBModule->UserModule\n\n\n\n\n\nWatchListDBModule\n\nWatchListDBModule\n\nUserModule -->\n\nWatchListDBModule->UserModule\n\n\n\n\n\nEmailService\n\nEmailService\n\nUserModule -->\n\nEmailService->UserModule\n\n\n\n\n\nGravatarService\n\nGravatarService\n\nUserModule -->\n\nGravatarService->UserModule\n\n\n\n\n\nPasswordService\n\nPasswordService\n\nUserModule -->\n\nPasswordService->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/routes/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EmailService\n                        \n                        \n                            GravatarService\n                        \n                        \n                            PasswordService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            MovieDBModule\n                        \n                        \n                            UserDBModule\n                        \n                        \n                            VoteDBModule\n                        \n                        \n                            WatchListDBModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UserController } from './user.controller';\nimport { UserService } from \"./user.service\";\nimport { UserDBModule } from \"../../common/db_services/users/userDB.module\";\nimport { MovieDBModule } from \"../../common/db_services/movies/movieDB.module\";\nimport { VoteDBModule } from \"../../common/db_services/votes/voteDB.module\";\nimport { PasswordService } from \"../../common/util_services/password.service\";\nimport { EmailService } from \"../../common/util_services/email.service\";\nimport { GravatarService } from \"../../common/util_services/gravatar.service\";\nimport { WatchListDBModule } from \"../../common/db_services/watchlist/watchListDB.module\";\n\n@Module({\n  imports: [UserDBModule, MovieDBModule, VoteDBModule, WatchListDBModule],\n  controllers: [UserController],\n  providers: [UserService, PasswordService, EmailService, GravatarService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                change_password\n                            \n                            \n                                    Async\n                                change_profile\n                            \n                            \n                                    Async\n                                change_username\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                email_opt_in\n                            \n                            \n                                    Async\n                                get\n                            \n                            \n                                    Async\n                                get_public\n                            \n                            \n                                    Async\n                                get_user_data\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(movieDBService: MovieDBService, userDBService: UserDBService, voteDBService: VoteDBService, watchListDBService: WatchListDBService, passwordService: PasswordService, emailService: EmailService, gravatarService: GravatarService)\n                    \n                \n                        \n                            \n                                Defined in src/routes/user/user.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        movieDBService\n                                                  \n                                                        \n                                                                        MovieDBService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userDBService\n                                                  \n                                                        \n                                                                        UserDBService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        voteDBService\n                                                  \n                                                        \n                                                                        VoteDBService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        watchListDBService\n                                                  \n                                                        \n                                                                        WatchListDBService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        passwordService\n                                                  \n                                                        \n                                                                        PasswordService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        emailService\n                                                  \n                                                        \n                                                                        EmailService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        gravatarService\n                                                  \n                                                        \n                                                                        GravatarService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        change_password\n                        \n                    \n                \n            \n            \n                \n                    \n                    change_password(user_id: number, password_new: string, password_old: string)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/user/user.service.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user_id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password_new\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password_old\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        change_profile\n                        \n                    \n                \n            \n            \n                \n                    \n                    change_profile(user_id: number, data: ProfileDto)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/user/user.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user_id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                ProfileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        change_username\n                        \n                    \n                \n            \n            \n                \n                    \n                    change_username(user_id: number, new_username: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/user/user.service.ts:97\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user_id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    new_username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(user_id: number, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/user/user.service.ts:128\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user_id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        email_opt_in\n                        \n                    \n                \n            \n            \n                \n                    \n                    email_opt_in(user_id: number, opt_in: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/user/user.service.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user_id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    opt_in\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(user_id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/user/user.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user_id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get_public\n                        \n                    \n                \n            \n            \n                \n                    \n                    get_public(user_id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/user/user.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user_id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get_user_data\n                        \n                    \n                \n            \n            \n                \n                    \n                    get_user_data(user_id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/user/user.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user_id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, ForbiddenException, Injectable } from \"@nestjs/common\";\nimport { UserDBService } from \"../../common/db_services/users/userDB.service\";\nimport { Movie, Prisma, User } from \"@prisma/client\";\nimport { MovieDBService } from \"../../common/db_services/movies/movieDB.service\";\nimport { VoteDBService } from \"../../common/db_services/votes/voteDB.service\";\nimport { PasswordService } from \"../../common/util_services/password.service\";\nimport { EmailService } from \"../../common/util_services/email.service\";\nimport { GravatarService } from \"../../common/util_services/gravatar.service\";\nimport { WatchListDBService } from \"../../common/db_services/watchlist/watchListDB.service\";\nimport { ProfileDto } from \"../../types/user.dto/profile.dto\";\nimport { name_pattern } from \"../../common/validation/patterns/name.pattern\";\nimport { username_pattern } from \"../../common/validation/patterns/username.pattern\";\nimport { password_pattern } from \"../../common/validation/patterns/password.pattern\";\nimport cuid from \"cuid\";\n\n@Injectable()\nexport class UserService {\n\n  constructor(private readonly movieDBService: MovieDBService,\n              private readonly userDBService: UserDBService,\n              private readonly voteDBService: VoteDBService,\n              private readonly watchListDBService: WatchListDBService,\n              private readonly passwordService: PasswordService,\n              private readonly emailService: EmailService,\n              private readonly gravatarService: GravatarService) {}\n\n  async get(user_id: number) {\n    const { password, verified, challenge, pw_reset, ...result } = await this.userDBService.get({ id: user_id }) as User;\n    return result\n  }\n\n  async get_public(user_id: number) {\n    const { name, gravatar_url, use_gravatar } = await this.userDBService.get({ id: user_id }) as User;\n    return { name, gravatar_url, use_gravatar };\n  }\n\n  async get_user_data(user_id: number) {\n    const user = await this.userDBService.get({ id: user_id }) as User;\n    const proposed_movies = await this.movieDBService.get_all_proposed(user_id);\n    const votes = await this.voteDBService.get_votes_user(user_id);\n    return { user, movies: proposed_movies, votes };\n  }\n\n  async change_profile(user_id: number, data: ProfileDto) {\n    if (!name_pattern.test(data.name)) {\n      throw new ForbiddenException(\"Invalid name! Name must be between 3 and 20 characters and start with a capital letter!\");\n    }\n\n    const user = await this.userDBService.get({ id: user_id }) as User;\n    const data_to_update = {\n      name: data.name\n    } as Prisma.UserUpdateInput;\n\n    if (data.hasOwnProperty(\"use_gravatar\") && data.use_gravatar) {\n      data_to_update[\"use_gravatar\"] = true;\n      data_to_update[\"gravatar_url\"] = this.gravatarService.generate_gravatar_url(user.username);\n\n    } else {\n      data_to_update[\"use_gravatar\"] = false;\n      data_to_update[\"gravatar_url\"] = null;\n    }\n\n    await this.userDBService.update({ where: { id: user_id }, data: data_to_update });\n    return { message: \"Profile updated!\", show_alert: true };\n  }\n\n  async email_opt_in(user_id: number, opt_in: boolean) {\n    await this.userDBService.update({ where: { id: user_id },\n      data: {\n        email_opt_in: opt_in\n      }\n    });\n    return { message: \"Email option updated!\", show_alert: true };\n  }\n\n  async change_password(user_id: number, password_new: string, password_old: string) {\n    if (!password_pattern.test(password_new)) {\n      throw new ForbiddenException(\"Invalid password! Password must be minimum eight characters, at least one letter and one number!\");\n    }\n\n    const user = await this.userDBService.get({ id: user_id }) as User;\n    if (await this.passwordService.compare(password_old, user.password)) {\n      await this.userDBService.update({ where: { id: user_id },\n        data: {\n          password: await this.passwordService.hash(password_new),\n        }\n      });\n      return { message: \"Password updated! \" +\n          \"The next time you log in, you will need to log in with your email address and new password.\",\n        show_alert: true };\n\n    } else {\n      throw new ForbiddenException(\"Invalid password\");\n    }\n  }\n\n  async change_username(user_id: number, new_username: string, password: string) {\n    if (!username_pattern.test(new_username)) {\n      throw new ForbiddenException(\"Invalid username! Username must be a valid email address!\");\n    }\n\n    const user = await this.userDBService.get({ id: user_id }) as User;\n    if ((user.username === new_username) || (await this.userDBService.has_user(new_username))) {\n      throw new ConflictException(\"Email is already in use\");\n    }\n\n    if (await this.passwordService.compare(password, user.password)) {\n      const new_challenge = cuid();\n      await this.userDBService.update({ where: { id: user_id },\n        data: {\n          username: new_username,\n          verified: false,\n          challenge: new_challenge,\n          gravatar_url: this.gravatarService.generate_gravatar_url(new_username)\n        }\n      });\n      const new_challenge_url = this.emailService.generate_challenge_url(new_challenge);\n      await this.emailService.send_challenge(user.username, user.name, new_challenge_url);\n      return { message: \"Please confirm your new email address by clicking the link sent to your new inbox. \" +\n          \"The next time you log in, you will need to log in with your new verified email address and password.\",\n        show_alert: true };\n\n    } else {\n      throw new ForbiddenException(\"Invalid password\");\n    }\n  }\n\n  async delete(user_id: number, password: string) {\n    const watchlist = await this.watchListDBService.get_all()\n    const watchlist_proposer_ids = await Promise.all(watchlist.map(async wl => {\n      return ((await this.movieDBService.get(wl.imdb_id)) as Movie).proposer_id\n    }));\n    if (watchlist_proposer_ids.includes(user_id)) {\n      throw new ForbiddenException(\"You cannot delete your account while you have movies in the watchlist\");\n    }\n\n    const user = await this.userDBService.get({ id: user_id }) as User;\n    if (await this.passwordService.compare(password, user.password)) {\n      await this.voteDBService.delete_all_user(user_id);\n      await this.movieDBService.delete_all_proposed(user_id);\n      await this.userDBService.delete({ id: user_id });\n      return { message: \"Your account, votes and proposed movies has been deleted.\", show_alert: true };\n\n    } else {\n      throw new ForbiddenException(\"Invalid password\");\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/VoteController.html":{"url":"controllers/VoteController.html","title":"controller - VoteController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  VoteController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/vote/vote.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                vote\n            \n\n\n            \n                Description\n            \n            \n                Controller for the vote routes\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                get_vote\n                            \n                            \n                                    Async\n                                get_votes\n                            \n                            \n                                    Async\n                                save_vote\n                            \n                            \n                                    Async\n                                unvote\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get_vote\n                        \n                    \n                \n            \n            \n                \n                    \n                    get_vote(imdb_id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'GET number of votes for a movie'})@Get(':imdb_id')\n                \n            \n\n            \n                \n                    Defined in src/routes/vote/vote.controller.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    imdb_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get_votes\n                        \n                    \n                \n            \n            \n                \n                    \n                    get_votes(user: JwtUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'GET imdb_ids for the movies, the given user voted for'})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@Get()\n                \n            \n\n            \n                \n                    Defined in src/routes/vote/vote.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                JwtUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        save_vote\n                        \n                    \n                \n            \n            \n                \n                    \n                    save_vote(user: JwtUser, imdb_id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'POST vote for a movie'})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@Post(':imdb_id')\n                \n            \n\n            \n                \n                    Defined in src/routes/vote/vote.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                JwtUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    imdb_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        unvote\n                        \n                    \n                \n            \n            \n                \n                    \n                    unvote(user: JwtUser, imdb_id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'DELETE unvote for a movie'})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@Delete(':imdb_id')\n                \n            \n\n            \n                \n                    Defined in src/routes/vote/vote.controller.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                JwtUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    imdb_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, Post, UseGuards } from \"@nestjs/common\";\nimport { JwtAuthGuard } from \"../auth/jwt-auth.guard\";\nimport { VoteService } from \"./vote.service\";\nimport { User } from \"../../common/decorators/user.decorator\";\nimport { JwtUser } from \"../../types/jwtuser.type\";\nimport { Vote } from \"@prisma/client\";\nimport { ApiBearerAuth, ApiOperation, ApiTags } from \"@nestjs/swagger\";\n\n/**\n * Controller for the vote routes\n */\n@ApiTags('vote')\n@Controller('vote')\nexport class VoteController {\n\n  constructor(private readonly voteService: VoteService) {}\n\n  @ApiOperation({ summary: 'GET imdb_ids for the movies, the given user voted for' })\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @Get()\n  async get_votes(@User() user: JwtUser): Promise {\n    return this.voteService.get_votes_user(Number(user.id));\n  }\n\n  @ApiOperation({ summary: 'GET number of votes for a movie' })\n  @Get(':imdb_id')\n  async get_vote(@Param('imdb_id') imdb_id: string) : Promise {\n    return this.voteService.get_votes(imdb_id);\n  }\n\n  @ApiOperation({ summary: 'POST vote for a movie' })\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @Post(':imdb_id')\n  async save_vote(@User() user: JwtUser, @Param('imdb_id') imdb_id: string) : Promise {\n    return this.voteService.vote(imdb_id, Number(user.id));\n  }\n\n  @ApiOperation({ summary: 'DELETE unvote for a movie' })\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @Delete(':imdb_id')\n  async unvote(@User() user: JwtUser, @Param('imdb_id') imdb_id: string) : Promise {\n    return this.voteService.unvote(imdb_id, Number(user.id));\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/VoteDBModule.html":{"url":"modules/VoteDBModule.html","title":"module - VoteDBModule","body":"\n                   \n\n\n\n\n    Modules\n    VoteDBModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_VoteDBModule\n\n\n\ncluster_VoteDBModule_exports\n\n\n\ncluster_VoteDBModule_providers\n\n\n\n\nVoteDBService \n\nVoteDBService \n\n\n\nVoteDBModule\n\nVoteDBModule\n\nVoteDBService  -->\n\nVoteDBModule->VoteDBService \n\n\n\n\n\nPrismaService\n\nPrismaService\n\nVoteDBModule -->\n\nPrismaService->VoteDBModule\n\n\n\n\n\nVoteDBService\n\nVoteDBService\n\nVoteDBModule -->\n\nVoteDBService->VoteDBModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/db_services/votes/voteDB.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                        \n                            VoteDBService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            VoteDBService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { VoteDBService } from './voteDB.service';\nimport { PrismaService } from \"../prisma.service\";\n\n@Module({\n  providers: [VoteDBService, PrismaService],\n  exports: [VoteDBService]\n})\nexport class VoteDBModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/VoteDBService.html":{"url":"injectables/VoteDBService.html","title":"injectable - VoteDBService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  VoteDBService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/db_services/votes/voteDB.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                add\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                delete_all\n                            \n                            \n                                    Async\n                                delete_all_user\n                            \n                            \n                                    Async\n                                get\n                            \n                            \n                                    Async\n                                get_most_voted\n                            \n                            \n                                    Async\n                                get_num_of_votes\n                            \n                            \n                                    Async\n                                get_votes_movie\n                            \n                            \n                                    Async\n                                get_votes_user\n                            \n                            \n                                    Async\n                                has\n                            \n                            \n                                    Async\n                                num_of\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/common/db_services/votes/voteDB.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        add\n                        \n                    \n                \n            \n            \n                \n                    \n                    add(data: Prisma.VoteCreateInput)\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/votes/voteDB.service.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            Prisma.VoteCreateInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(data: Prisma.VoteWhereUniqueInput)\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/votes/voteDB.service.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            Prisma.VoteWhereUniqueInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete_all\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete_all(imdb_id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/votes/voteDB.service.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    imdb_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete_all_user\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete_all_user(user_id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/votes/voteDB.service.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user_id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(data: Prisma.VoteWhereUniqueInput)\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/votes/voteDB.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            Prisma.VoteWhereUniqueInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get_most_voted\n                        \n                    \n                \n            \n            \n                \n                    \n                    get_most_voted(count: number)\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/votes/voteDB.service.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    count\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get_num_of_votes\n                        \n                    \n                \n            \n            \n                \n                    \n                    get_num_of_votes(imdb_id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/votes/voteDB.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    imdb_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get_votes_movie\n                        \n                    \n                \n            \n            \n                \n                    \n                    get_votes_movie(imdb_id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/votes/voteDB.service.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    imdb_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get_votes_user\n                        \n                    \n                \n            \n            \n                \n                    \n                    get_votes_user(user_id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/votes/voteDB.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user_id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        has\n                        \n                    \n                \n            \n            \n                \n                    \n                    has(user_id: Prisma.UserWhereUniqueInput, imdb_id: Prisma.MovieWhereUniqueInput)\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/votes/voteDB.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user_id\n                                    \n                                                Prisma.UserWhereUniqueInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    imdb_id\n                                    \n                                            Prisma.MovieWhereUniqueInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        num_of\n                        \n                    \n                \n            \n            \n                \n                    \n                    num_of(user_id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/votes/voteDB.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user_id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PrismaService } from \"../prisma.service\";\nimport { Prisma } from \"@prisma/client\";\n\n@Injectable()\nexport class VoteDBService {\n\n  constructor(private readonly prisma: PrismaService) {}\n\n  async get(data : Prisma.VoteWhereUniqueInput) {\n    return await this.prisma.vote.findUnique({\n      where: data,\n    });\n  }\n\n  async has(user_id: Prisma.UserWhereUniqueInput, imdb_id: Prisma.MovieWhereUniqueInput) {\n    return await this.prisma.vote.findFirst({\n      where: {\n        user: user_id,\n        movie: imdb_id\n      }\n    })\n  }\n\n  async num_of(user_id: number) {\n    return await this.prisma.vote.count({\n      where: {\n        user: { id: user_id }\n      }\n    })\n  }\n\n  async get_num_of_votes(imdb_id: string) {\n    return await this.prisma.vote.count({\n      where: { movie: { imdb_id } }\n    });\n  }\n\n  async get_votes_user(user_id: number) {\n    return await this.prisma.vote.findMany({\n      where: { user: { id: user_id } },\n      select: { imdb_id: true }\n    });\n  }\n\n  async get_votes_movie(imdb_id: string) {\n    return await this.prisma.vote.findMany({\n      where: { movie: { imdb_id } },\n      select: { user: true }\n    })\n  }\n\n  async get_most_voted(count: number) {\n    return await this.prisma.vote.groupBy({\n      by: ['imdb_id'],\n      _count: {\n        user_id: true,\n      },\n      orderBy: {\n        _count: {\n          user_id: 'desc'\n        }\n      },\n      take: count,\n    })\n  }\n\n  async add(data: Prisma.VoteCreateInput) {\n    return await this.prisma.vote.create({ data });\n  }\n\n  async delete(data : Prisma.VoteWhereUniqueInput) {\n    return await this.prisma.vote.delete({ where: data });\n  }\n\n  async delete_all(imdb_id: string) {\n    return await this.prisma.vote.deleteMany({ where: { imdb_id } });\n  }\n\n  async delete_all_user(user_id: number) {\n    return await this.prisma.vote.deleteMany({ where: { user_id } });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/VoteModule.html":{"url":"modules/VoteModule.html","title":"module - VoteModule","body":"\n                   \n\n\n\n\n    Modules\n    VoteModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_VoteModule\n\n\n\ncluster_VoteModule_providers\n\n\n\ncluster_VoteModule_imports\n\n\n\n\nMovieDBModule\n\nMovieDBModule\n\n\n\nVoteModule\n\nVoteModule\n\nVoteModule -->\n\nMovieDBModule->VoteModule\n\n\n\n\n\nUserDBModule\n\nUserDBModule\n\nVoteModule -->\n\nUserDBModule->VoteModule\n\n\n\n\n\nVoteDBModule\n\nVoteDBModule\n\nVoteModule -->\n\nVoteDBModule->VoteModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nVoteModule -->\n\nPrismaService->VoteModule\n\n\n\n\n\nVoteService\n\nVoteService\n\nVoteModule -->\n\nVoteService->VoteModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/routes/vote/vote.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                        \n                            VoteService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            VoteController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            MovieDBModule\n                        \n                        \n                            UserDBModule\n                        \n                        \n                            VoteDBModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { VoteController } from \"./vote.controller\";\nimport { VoteService } from \"./vote.service\";\nimport { VoteDBModule } from \"../../common/db_services/votes/voteDB.module\";\nimport { UserDBModule } from \"../../common/db_services/users/userDB.module\";\nimport { MovieDBModule } from \"../../common/db_services/movies/movieDB.module\";\nimport { PrismaService } from \"../../common/db_services/prisma.service\";\n\n@Module({\n  imports: [VoteDBModule, UserDBModule, MovieDBModule],\n  controllers: [VoteController],\n  providers: [PrismaService, VoteService]\n})\nexport class VoteModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/VoteService.html":{"url":"injectables/VoteService.html","title":"injectable - VoteService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  VoteService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/vote/vote.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                max_votes\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                get_votes\n                            \n                            \n                                    Async\n                                get_votes_user\n                            \n                            \n                                    Async\n                                unvote\n                            \n                            \n                                    Async\n                                vote\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(movieDBService: MovieDBService, userDBService: UserDBService, voteDBService: VoteDBService)\n                    \n                \n                        \n                            \n                                Defined in src/routes/vote/vote.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        movieDBService\n                                                  \n                                                        \n                                                                        MovieDBService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userDBService\n                                                  \n                                                        \n                                                                        UserDBService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        voteDBService\n                                                  \n                                                        \n                                                                        VoteDBService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get_votes\n                        \n                    \n                \n            \n            \n                \n                    \n                    get_votes(imdb_id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/vote/vote.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    imdb_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get_votes_user\n                        \n                    \n                \n            \n            \n                \n                    \n                    get_votes_user(user_id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/vote/vote.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user_id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        unvote\n                        \n                    \n                \n            \n            \n                \n                    \n                    unvote(imdb_id: string, user_id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/vote/vote.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    imdb_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user_id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        vote\n                        \n                    \n                \n            \n            \n                \n                    \n                    vote(imdb_id: string, user_id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/vote/vote.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    imdb_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user_id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        max_votes\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Number(process.env.MAX_VOTES)\n                    \n                \n                    \n                        \n                                Defined in src/routes/vote/vote.service.ts:10\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, InternalServerErrorException } from \"@nestjs/common\";\nimport { MovieDBService } from \"../../common/db_services/movies/movieDB.service\";\nimport { UserDBService } from \"../../common/db_services/users/userDB.service\";\nimport { VoteDBService } from \"../../common/db_services/votes/voteDB.service\";\nimport { Movie, Prisma } from \"@prisma/client\";\n\n@Injectable()\nexport class VoteService {\n\n  private readonly max_votes = Number(process.env.MAX_VOTES)\n\n  constructor(private readonly movieDBService: MovieDBService,\n              private readonly userDBService: UserDBService,\n              private readonly voteDBService: VoteDBService) {}\n\n  async get_votes(imdb_id: string) {\n    try {\n      return await this.voteDBService.get_num_of_votes(imdb_id)\n    } catch (e) {\n      throw new InternalServerErrorException('Error getting votes')\n    }\n  }\n\n  async get_votes_user(user_id: number) {\n    try {\n      return (await this.voteDBService.get_votes_user(user_id)).map(vote => vote.imdb_id)\n    } catch (e) {\n      throw new InternalServerErrorException('Error getting votes')\n    }\n  }\n\n  async vote(imdb_id: string, user_id: number) {\n    const num_of_votes = await this.voteDBService.num_of(user_id)\n    if (num_of_votes >= this.max_votes) {\n      throw new ConflictException(`You have already voted for the maximum number of movies! You can only vote for ${this.max_votes} movies`)\n    }\n\n    const voteDB_data: Prisma.VoteCreateInput = {\n      movie: { connect: { imdb_id } } as Prisma.MovieCreateNestedOneWithoutVoteInput,\n      user: { connect: { id: user_id } } as Prisma.UserCreateNestedOneWithoutVoteInput\n    }\n\n    try {\n      return await this.voteDBService.add(voteDB_data)\n    } catch (e) {\n      throw new ConflictException('Vote already exists')\n    }\n  }\n\n  async unvote(imdb_id: string, user_id: number) {\n    const movie = await this.movieDBService.get(imdb_id) as Movie\n    if (movie.proposer_id === user_id) {\n      throw new ConflictException('You cannot unvote a movie you proposed')\n    }\n\n    const voteDB_data: Prisma.VoteWhereUniqueInput = {\n      imdb_id_user_id: { imdb_id, user_id: user_id }\n    }\n\n    try {\n      return await this.voteDBService.delete(voteDB_data)\n    } catch (e) {\n      throw new ConflictException('Vote does not exist')\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/WatchListDBModule.html":{"url":"modules/WatchListDBModule.html","title":"module - WatchListDBModule","body":"\n                   \n\n\n\n\n    Modules\n    WatchListDBModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_WatchListDBModule\n\n\n\ncluster_WatchListDBModule_exports\n\n\n\ncluster_WatchListDBModule_providers\n\n\n\n\nWatchListDBService \n\nWatchListDBService \n\n\n\nWatchListDBModule\n\nWatchListDBModule\n\nWatchListDBService  -->\n\nWatchListDBModule->WatchListDBService \n\n\n\n\n\nPrismaService\n\nPrismaService\n\nWatchListDBModule -->\n\nPrismaService->WatchListDBModule\n\n\n\n\n\nWatchListDBService\n\nWatchListDBService\n\nWatchListDBModule -->\n\nWatchListDBService->WatchListDBModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/db_services/watchlist/watchListDB.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                        \n                            WatchListDBService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            WatchListDBService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { WatchListDBService } from './watchListDB.service';\nimport { PrismaService } from \"../prisma.service\";\n\n@Module({\n  providers: [WatchListDBService, PrismaService],\n  exports: [WatchListDBService]\n})\nexport class WatchListDBModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/WatchListDBService.html":{"url":"injectables/WatchListDBService.html","title":"injectable - WatchListDBService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  WatchListDBService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/db_services/watchlist/watchListDB.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                add\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                get_all\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/common/db_services/watchlist/watchListDB.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        add\n                        \n                    \n                \n            \n            \n                \n                    \n                    add(data: Prisma.WatchListCreateInput)\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/watchlist/watchListDB.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            Prisma.WatchListCreateInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(imdb_id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/watchlist/watchListDB.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    imdb_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get_all\n                        \n                    \n                \n            \n            \n                \n                    \n                    get_all()\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/watchlist/watchListDB.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { PrismaService } from \"../prisma.service\";\nimport { Prisma } from \"@prisma/client\";\n\n@Injectable()\nexport class WatchListDBService {\n\n  constructor(private readonly prisma: PrismaService) {}\n\n  async get_all() {\n    return await this.prisma.watchList.findMany()\n  }\n\n  async add(data: Prisma.WatchListCreateInput) {\n    return await this.prisma.watchList.create({ data })\n  }\n\n  async delete(imdb_id: string) {\n    return await this.prisma.watchList.delete({\n      where: {\n        imdb_id\n      }\n    })\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/WatchListJob.html":{"url":"injectables/WatchListJob.html","title":"injectable - WatchListJob","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  WatchListJob\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/event_service/jobs/watchlist.job.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                num_of_movies\n                            \n                            \n                                    Private\n                                    Readonly\n                                pause_time\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                run\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(voteDBService: VoteDBService, watchListDBService: WatchListDBService, movieDBService: MovieDBService, announceJob: AnnounceJob)\n                    \n                \n                        \n                            \n                                Defined in src/common/event_service/jobs/watchlist.job.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        voteDBService\n                                                  \n                                                        \n                                                                        VoteDBService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        watchListDBService\n                                                  \n                                                        \n                                                                        WatchListDBService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        movieDBService\n                                                  \n                                                        \n                                                                        MovieDBService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        announceJob\n                                                  \n                                                        \n                                                                        AnnounceJob\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        run\n                        \n                    \n                \n            \n            \n                \n                    \n                    run()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Cron(: string)\n                \n            \n\n            \n                \n                    Defined in src/common/event_service/jobs/watchlist.job.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        num_of_movies\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Number(process.env.NUM_OF_MOVIES as string)\n                    \n                \n                    \n                        \n                                Defined in src/common/event_service/jobs/watchlist.job.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        pause_time\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Number(process.env.PAUSE_TIME_MIN as string) * 60000\n                    \n                \n                    \n                        \n                                Defined in src/common/event_service/jobs/watchlist.job.ts:14\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { WatchListDBService } from \"../../db_services/watchlist/watchListDB.service\";\nimport { VoteDBService } from \"../../db_services/votes/voteDB.service\";\nimport { MovieDBService } from \"../../db_services/movies/movieDB.service\";\nimport { parseExpression } from \"cron-parser\"\nimport { Movie, Prisma } from \"@prisma/client\";\nimport { Cron } from \"@nestjs/schedule\";\nimport { AnnounceJob } from \"./announce.job\";\n\n@Injectable()\nexport class WatchListJob {\n\n  private readonly num_of_movies = Number(process.env.NUM_OF_MOVIES as string);\n  private readonly pause_time = Number(process.env.PAUSE_TIME_MIN as string) * 60000;\n\n  constructor(private readonly voteDBService: VoteDBService,\n              private readonly watchListDBService: WatchListDBService,\n              private readonly movieDBService: MovieDBService,\n              private readonly announceJob: AnnounceJob) {}\n\n  @Cron(process.env.SCHEDULE_WATCHLIST as string)\n  async run() {\n    console.log('Watchlist job started');\n    const top_movies = await this.voteDBService.get_most_voted(this.num_of_movies)\n    let start_time = parseExpression(process.env.SCHEDULE_START as string).next().toDate()\n\n    for (const movie of top_movies) {\n      const data = {\n        movie: { connect: { imdb_id: movie.imdb_id } },\n        start_time: start_time,\n      } as Prisma.WatchListCreateInput\n      await this.watchListDBService.add(data)\n\n      const movie_data = await this.movieDBService.get(movie.imdb_id) as Movie\n      const round_duration_ms = (Math.round(movie_data.runtime/15) * 15) * 60000\n      start_time = new Date(start_time.getTime() + round_duration_ms + this.pause_time)\n    }\n\n    await this.announceJob.run()\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/WatchlistExtType.html":{"url":"interfaces/WatchlistExtType.html","title":"interface - WatchlistExtType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  WatchlistExtType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/movie.types/watchlist_ext.type.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            imdb_id\n                                        \n                                \n                                \n                                        \n                                            interested\n                                        \n                                \n                                \n                                        \n                                            link\n                                        \n                                \n                                \n                                        \n                                            start_time\n                                        \n                                \n                                \n                                        \n                                            title\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        imdb_id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        imdb_id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        interested\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        interested:     number[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        link\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        link:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        start_time\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        start_time:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface WatchlistExtType {\n  imdb_id: string,\n  title: string,\n  link: string,\n  start_time: Date,\n  interested: number[]\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                client/src/main.ts\n            \n            variable\n            app\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/src/router/router.ts\n            \n            variable\n            router\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/src/util/api.ts\n            \n            function\n            call\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/src/util/cookie.ts\n            \n            variable\n            get_cookie\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/src/util/cookie.ts\n            \n            variable\n            get_cookie_all\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/src/util/cookie.ts\n            \n            variable\n            remove_cookie\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/src/util/cookie.ts\n            \n            variable\n            set_cookie\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/src/util/store.ts\n            \n            variable\n            store\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/db_services/histroy/historyDB.service.ts\n            \n            injectable\n            HistoryDBService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/common/db_services/movies/movieDB.service.ts\n            \n            injectable\n            MovieDBService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/common/db_services/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/db_services/users/userDB.service.ts\n            \n            injectable\n            UserDBService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/common/db_services/votes/voteDB.service.ts\n            \n            injectable\n            VoteDBService\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/common/db_services/watchlist/watchListDB.service.ts\n            \n            injectable\n            WatchListDBService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/common/decorators/user.decorator.ts\n            \n            variable\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/event_service/jobs/announce.job.ts\n            \n            injectable\n            AnnounceJob\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/common/event_service/jobs/history.job.ts\n            \n            injectable\n            HistoryJob\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/event_service/jobs/watchlist.job.ts\n            \n            injectable\n            WatchListJob\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/common/middleware/logger.middleware.ts\n            \n            injectable\n            LoggerMiddleware\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/util_services/discord.service.ts\n            \n            injectable\n            DiscordService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/common/util_services/email.service.ts\n            \n            injectable\n            EmailService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/common/util_services/email.service.ts\n            \n            variable\n            nodemailer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/util_services/gravatar.service.ts\n            \n            injectable\n            GravatarService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/util_services/password.service.ts\n            \n            injectable\n            PasswordService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/util_services/password.service.ts\n            \n            variable\n            bcrypt\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/validation/config.validation.ts\n            \n            variable\n            config_validation_schema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/validation/patterns/cron.pattern.ts\n            \n            variable\n            cron_pattern\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/validation/patterns/discord_webhook.pattern.ts\n            \n            variable\n            discord_webhook_pattern\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/validation/patterns/imdb_id.pattern.ts\n            \n            variable\n            imdb_id_pattern\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/validation/patterns/name.pattern.ts\n            \n            variable\n            name_pattern\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/validation/patterns/password.pattern.ts\n            \n            variable\n            password_pattern\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/validation/patterns/username.pattern.ts\n            \n            variable\n            username_pattern\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/routes/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                src/routes/auth/auth.guard.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/routes/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/routes/auth/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/routes/auth/jwt.stategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/routes/auth/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/routes/movie/movie.controller.ts\n            \n            controller\n            MovieController\n            \n                14 %\n                (1/7)\n            \n        \n        \n            \n                \n                src/routes/movie/movie.service.ts\n            \n            injectable\n            MovieService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/routes/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                10 %\n                (1/10)\n            \n        \n        \n            \n                \n                src/routes/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/routes/vote/vote.controller.ts\n            \n            controller\n            VoteController\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/routes/vote/vote.service.ts\n            \n            injectable\n            VoteService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/types/jwtuser.type.ts\n            \n            interface\n            JwtUser\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/types/movie.types/movie_ext.type.ts\n            \n            interface\n            MovieExtType\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/types/movie.types/watchlist_ext.type.ts\n            \n            interface\n            WatchlistExtType\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/types/res.dto.ts\n            \n            class\n            ResDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/types/user.dto/email_opt_in.dto.ts\n            \n            class\n            EmailOptInDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/types/user.dto/login.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/types/user.dto/password.dto.ts\n            \n            class\n            PasswordDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/types/user.dto/password_new.dto.ts\n            \n            class\n            PasswordNewDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/types/user.dto/profile.dto.ts\n            \n            class\n            ProfileDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/types/user.dto/register.dto.ts\n            \n            class\n            RegisterDto\n            \n                0 %\n                (0/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/config : ^2.2.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/jwt : ^9.0.0\n        \n            @nestjs/passport : ^9.0.0\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/schedule : ^2.1.0\n        \n            @nestjs/serve-static : ^3.0.0\n        \n            @nestjs/swagger : ^6.1.4\n        \n            @prisma/client : ^4.5.0\n        \n            bcrypt : ^5.0.1\n        \n            cron-parser : ^4.7.0\n        \n            crypto-js : ^4.1.1\n        \n            cuid : ^2.1.8\n        \n            discord.js : ^14.6.0\n        \n            helmet : ^5.1.1\n        \n            imdb-api : ^4.4.1\n        \n            joi : ^17.7.0\n        \n            nodemailer : ^6.8.0\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            prisma : ^4.7.1\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            call   (client/.../api.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    client/src/util/api.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        call\n                        \n                    \n                \n            \n            \n                \ncall(route: string, method?: string, body?: any)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    route\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    method\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n\nMovie Monday Manager\nA full stack management application for voting movies for cyclic movie events.\nFeatures\n\naccount-registration with email verification\nusers can vote, add and remove movies\nusers can manage own profile\nclean and responsive Bootstrap-UI\n100% usable without client (via REST-API)\nautomatic management of voted movies around movie events\nautomatic notifications for movie events with the list of interested users\n\nInstallation\n\nYou need node.js installed (version 18.12.1 or newer).\nDownload the newest version of the code\nRename the .env file from .env.tmp to .env\nOpen the configuration file (now .env) and set values (see config-section below).\nBuild the project with npm run build:all\nRun the server with npm run start:prod\n\nConfiguration\nThe configuration file is located in the root directory of the project and is called .env. It will be validated on startup via the Joi library. To see the validation schema, see the config.validation.ts file.\nAPI-Docs\nThis project is 100% usable without client via a REST-API!\nThe routes start with the prefix /api (e.g. http://[::1]:3000/api). \nThe api is documented with Swagger at /docs/api route of the website (e.g. http://[::1]:3000/docs/api).\nDev-Docs\nThis small guide assumes, that you have already some knowledge about node.js and the used frameworks. \nThe whole project is written in Typescript.\nMoMoMat (Backend)\nThe backend uses the NestJS framework to handle the REST-API with all its corresponding services. It is also documented with compodoc at /docs/backend route of the website (e.g. http://[::1]:3000/docs/backend).\nThis project (/src folder) is dived into 3 main parts: \nThe routes (controllers) to handle incoming requests; \na common section with lots of usefully functions and classes to support the other parts; \nand type definitions for internal data structures and data transmission objects (dto's).\nTo run the backend in development mode, you need to npm install the dependencies and run npm run start:dev in the root folder of the project. Note, that the client has to be built via npm run build:client because the client is only statically served from the  /client/dist folder. So every change in the client has to be built to show up in the backend project. Also note, that the database should also be built (see MoMoMat-DB below). The backend can generate docs as static website by run npm run build:docs and shown by npm run start:docs. The backend itself can be build with npm run build. The build files are located in the /dist folder. The npm run build:all command can be used to build everything in with just one step.\nMoMoMat-Client (Frontend)\nThe frontend uses the Vue.js framework to handle the user interface. \nIt can be found in the /client folder.\nThe frontend uses the Vue Router defined in /client/src/router folder to handle the navigation between the different pages as singe page application. \nThe router shows different view components depending on the current route. These view components are defined in the /client/src/views folder. Some views use special components defined in the /client/src/components folder.\nTo run the client in development mode, you need to npm install the dependencies and run npm run dev in the /client folder.\nBut in this mode, the backend is disabled and the website cannot interact with any backend route. \nTo build the client for production, you need to run npm run build in the /client folder. The build files are located in the /client/dist folder.\nMoMoMat-DB (Database)\nThe database use Prisma as ORM to handle the database connection and management. \nIts database schema is defined in the /prisma folder. \nWhich database is used under the hood can be defined in the .env file.\nThe scheme can be formatted with npx prisma format in /prisma folder. \nA database can be created via npx prisma migrate dev from /prisma folder or npm run build:db from root folder. \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2022 Elias Schaut\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EventModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HistoryDBModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MovieDBModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MovieModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserDBModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        VoteDBModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        VoteModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        WatchListDBModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_EventModule\n\n\n\ncluster_EventModule_imports\n\n\n\ncluster_EventModule_providers\n\n\n\ncluster_HistoryDBModule\n\n\n\ncluster_HistoryDBModule_exports\n\n\n\ncluster_HistoryDBModule_providers\n\n\n\ncluster_MovieDBModule\n\n\n\ncluster_MovieDBModule_exports\n\n\n\ncluster_MovieDBModule_providers\n\n\n\ncluster_MovieModule\n\n\n\ncluster_MovieModule_providers\n\n\n\ncluster_UserDBModule\n\n\n\ncluster_UserDBModule_exports\n\n\n\ncluster_UserDBModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_VoteDBModule\n\n\n\ncluster_VoteDBModule_exports\n\n\n\ncluster_VoteDBModule_providers\n\n\n\ncluster_WatchListDBModule\n\n\n\ncluster_WatchListDBModule_exports\n\n\n\ncluster_WatchListDBModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nEventModule\n\nEventModule\n\nAppModule -->\n\nEventModule->AppModule\n\n\n\n\n\nMovieModule\n\nMovieModule\n\nAppModule -->\n\nMovieModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nVoteModule\n\nVoteModule\n\nAppModule -->\n\nVoteModule->AppModule\n\n\n\n\n\nUserDBModule\n\nUserDBModule\n\nAuthModule -->\n\nUserDBModule->AuthModule\n\n\n\nEventModule -->\n\nUserDBModule->EventModule\n\n\n\nMovieModule -->\n\nUserDBModule->MovieModule\n\n\n\nUserModule -->\n\nUserDBModule->UserModule\n\n\n\nVoteModule -->\n\nUserDBModule->VoteModule\n\n\n\n\n\nUserDBService \n\nUserDBService \n\nUserDBService  -->\n\nUserDBModule->UserDBService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nEmailService\n\nEmailService\n\nAuthModule -->\n\nEmailService->AuthModule\n\n\n\nEventModule -->\n\nEmailService->EventModule\n\n\n\nUserModule -->\n\nEmailService->UserModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nPasswordService\n\nPasswordService\n\nAuthModule -->\n\nPasswordService->AuthModule\n\n\n\nUserModule -->\n\nPasswordService->UserModule\n\n\n\nUserDBModule -->\n\nPasswordService->UserDBModule\n\n\n\n\n\nHistoryDBModule\n\nHistoryDBModule\n\nEventModule -->\n\nHistoryDBModule->EventModule\n\n\n\nMovieModule -->\n\nHistoryDBModule->MovieModule\n\n\n\n\n\nHistoryDBService \n\nHistoryDBService \n\nHistoryDBService  -->\n\nHistoryDBModule->HistoryDBService \n\n\n\n\n\nMovieDBModule\n\nMovieDBModule\n\nEventModule -->\n\nMovieDBModule->EventModule\n\n\n\nMovieModule -->\n\nMovieDBModule->MovieModule\n\n\n\nUserModule -->\n\nMovieDBModule->UserModule\n\n\n\nVoteModule -->\n\nMovieDBModule->VoteModule\n\n\n\n\n\nMovieDBService \n\nMovieDBService \n\nMovieDBService  -->\n\nMovieDBModule->MovieDBService \n\n\n\n\n\nVoteDBModule\n\nVoteDBModule\n\nEventModule -->\n\nVoteDBModule->EventModule\n\n\n\nMovieModule -->\n\nVoteDBModule->MovieModule\n\n\n\nUserModule -->\n\nVoteDBModule->UserModule\n\n\n\nVoteModule -->\n\nVoteDBModule->VoteModule\n\n\n\n\n\nVoteDBService \n\nVoteDBService \n\nVoteDBService  -->\n\nVoteDBModule->VoteDBService \n\n\n\n\n\nWatchListDBModule\n\nWatchListDBModule\n\nEventModule -->\n\nWatchListDBModule->EventModule\n\n\n\nMovieModule -->\n\nWatchListDBModule->MovieModule\n\n\n\nUserModule -->\n\nWatchListDBModule->UserModule\n\n\n\n\n\nWatchListDBService \n\nWatchListDBService \n\nWatchListDBService  -->\n\nWatchListDBModule->WatchListDBService \n\n\n\n\n\nAnnounceJob\n\nAnnounceJob\n\nEventModule -->\n\nAnnounceJob->EventModule\n\n\n\n\n\nDiscordService\n\nDiscordService\n\nEventModule -->\n\nDiscordService->EventModule\n\n\n\n\n\nHistoryJob\n\nHistoryJob\n\nEventModule -->\n\nHistoryJob->EventModule\n\n\n\n\n\nWatchListJob\n\nWatchListJob\n\nEventModule -->\n\nWatchListJob->EventModule\n\n\n\n\n\nHistoryDBService\n\nHistoryDBService\n\nHistoryDBModule -->\n\nHistoryDBService->HistoryDBModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nMovieModule -->\n\nPrismaService->MovieModule\n\n\n\nVoteModule -->\n\nPrismaService->VoteModule\n\n\n\nUserDBModule -->\n\nPrismaService->UserDBModule\n\n\n\nHistoryDBModule -->\n\nPrismaService->HistoryDBModule\n\n\n\nMovieDBModule -->\n\nPrismaService->MovieDBModule\n\n\n\nVoteDBModule -->\n\nPrismaService->VoteDBModule\n\n\n\nWatchListDBModule -->\n\nPrismaService->WatchListDBModule\n\n\n\n\n\nMovieDBService\n\nMovieDBService\n\nMovieDBModule -->\n\nMovieDBService->MovieDBModule\n\n\n\n\n\nMovieService\n\nMovieService\n\nMovieModule -->\n\nMovieService->MovieModule\n\n\n\n\n\nVoteService\n\nVoteService\n\nMovieModule -->\n\nVoteService->MovieModule\n\n\n\nVoteModule -->\n\nVoteService->VoteModule\n\n\n\n\n\nUserDBService\n\nUserDBService\n\nUserDBModule -->\n\nUserDBService->UserDBModule\n\n\n\n\n\nGravatarService\n\nGravatarService\n\nUserModule -->\n\nGravatarService->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\nVoteDBService\n\nVoteDBService\n\nVoteDBModule -->\n\nVoteDBService->VoteDBModule\n\n\n\n\n\nWatchListDBService\n\nWatchListDBService\n\nWatchListDBModule -->\n\nWatchListDBService->WatchListDBModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        11 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    22 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    7 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 1.0.0-alpha.5\n        \n            Description : A website for adding and voting movies for the next watch party\n        \n            License : MIT\n        \n            Author : EliasSchaut\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            app   (client/.../main.ts)\n                        \n                        \n                            bcrypt   (src/.../password.service.ts)\n                        \n                        \n                            config_validation_schema   (src/.../config.validation.ts)\n                        \n                        \n                            cron_pattern   (src/.../cron.pattern.ts)\n                        \n                        \n                            discord_webhook_pattern   (src/.../discord_webhook.pattern.ts)\n                        \n                        \n                            get_cookie   (client/.../cookie.ts)\n                        \n                        \n                            get_cookie_all   (client/.../cookie.ts)\n                        \n                        \n                            imdb_id_pattern   (src/.../imdb_id.pattern.ts)\n                        \n                        \n                            name_pattern   (src/.../name.pattern.ts)\n                        \n                        \n                            nodemailer   (src/.../email.service.ts)\n                        \n                        \n                            password_pattern   (src/.../password.pattern.ts)\n                        \n                        \n                            remove_cookie   (client/.../cookie.ts)\n                        \n                        \n                            router   (client/.../router.ts)\n                        \n                        \n                            set_cookie   (client/.../cookie.ts)\n                        \n                        \n                            store   (client/.../store.ts)\n                        \n                        \n                               (src/.../main.ts)\n                        \n                        \n                            User   (src/.../user.decorator.ts)\n                        \n                        \n                            username_pattern   (src/.../username.pattern.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    client/src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        app\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createApp(App)\n                    \n                \n\n\n        \n    \n\n    src/common/util_services/password.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bcrypt\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require('bcrypt')\n                    \n                \n\n\n        \n    \n\n    src/common/validation/config.validation.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        config_validation_schema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Joi.object({\n  PROJECT_NAME: Joi.string().required()\n    .description('The name of the project'),\n  FRONTEND_URL: Joi.string().required().uri()\n    .description('The URL of the client application (frontend). This is used for CORS and the email confirmation link'),\n  PORT: Joi.number().required().default(\"3000\").port()\n    .description('The port the server should listen on'),\n\n  DATABASE_URL: Joi.string().required().default(\"file:./dev.db\")\n    .description('The URL of the database'),\n  JWT_SECRET: Joi.string().required().default(\"secret\")\n    .description('The secret used to sign the JWT tokens. The JWT tokens are used to authenticate the users'),\n  JWT_EXPIRATION: Joi.string().required().default(\"2h\")\n    .description('The expiration time of the JWT tokens'),\n  OMDB_API_KEY: Joi.string().required().token()\n    .description('The API key for the OMDB API. Request a free key at https://www.omdbapi.com/apikey.aspx'),\n  MAX_VOTES: Joi.number().required().default(\"20\")\n    .description('The maximum number of votes a user can cast in total for all movies'),\n  MAX_PROPOSEABLE_MOVIES: Joi.number().required().default(\"5\")\n    .description('The maximum number of movies a user can propose'),\n\n  SCHEDULE_WATCHLIST: Joi.string().required().default(\"0 15 * * 1\").pattern(cron_pattern)\n    .description('The cron pattern for the schedule that creates the watchlist for new movies and sends notifications per mail and Discord webhook'),\n  SCHEDULE_START: Joi.string().required().default(\"0 19 * * 1\").pattern(cron_pattern)\n    .description('The cron pattern for the beginning of the movie event. This value is used to calculate the start times of the movies in the watchlist'),\n  SCHEDULE_HISTORY: Joi.string().required().default(\"45 23 * * 1\").pattern(cron_pattern)\n    .description('The cron pattern for the schedule that creates the history for the movies in the watchlist and clears the watchlist'),\n  PAUSE_TIME_MIN: Joi.number().required().default(\"15\")\n    .description('The minimum pause time between two movies in minutes'),\n  NUM_OF_MOVIES: Joi.number().required().default(\"2\")\n    .description('The number of movies that will be in the watchlist at the same time'),\n\n  EMAIL_HOST: Joi.string().required().domain()\n    .description('The host of the SMTP server used to send emails'),\n  EMAIL_PORT: Joi.number().required().default(\"587\")\n    .description('The port of the SMTP server used to send emails'),\n  EMAIL_HOST_USER: Joi.string().required().email()\n    .description('The username of the SMTP server used to send emails'),\n  EMAIL_HOST_PASSWORD: Joi.string().required()\n    .description('The password of the SMTP server used to send emails'),\n\n  DISCORD_ENABLE: Joi.boolean().required().default(\"false\")\n    .description('Whether the Discord webhook should be used to send notifications'),\n  DISCORD_WEBHOOK_URL: Joi.string().when('DISCORD_ENABLE', { is: true, then: Joi.required() }).pattern(discord_webhook_pattern)\n    .description('The URL of the Discord webhook used to send notifications. This is optional if DISCORD_ENABLE is false'),\n})\n                    \n                \n\n\n        \n    \n\n    src/common/validation/patterns/cron.pattern.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        cron_pattern\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /(@(annually|yearly|monthly|weekly|daily|hourly|reboot))|(@every (\\d+(ns|us|µs|ms|s|m|h))+)|((((\\d+,)+\\d+|(\\d+(\\/|-)\\d+)|\\d+|\\*) ?){5,7})/\n                    \n                \n\n\n        \n    \n\n    src/common/validation/patterns/discord_webhook.pattern.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        discord_webhook_pattern\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^https:\\/\\/discord.com\\/api\\/webhooks\\/[0-9]+\\/.+$/\n                    \n                \n\n\n        \n    \n\n    client/src/util/cookie.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        get_cookie\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (key: string) => {\n  return Cookies.get(key)\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get_cookie_all\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {\n  return Cookies.get()\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove_cookie\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (key: string) => {\n  Cookies.remove(key)\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        set_cookie\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (key: string, value: string) => {\n  Cookies.set(key, value, {\n    expires: 7,\n  })\n}\n                    \n                \n\n\n        \n    \n\n    src/common/validation/patterns/imdb_id.pattern.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        imdb_id_pattern\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^tt[0-9]+$/\n                    \n                \n\n\n        \n    \n\n    src/common/validation/patterns/name.pattern.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        name_pattern\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^[A-Z].{2,20}$/\n                    \n                \n\n\n        \n    \n\n    src/common/util_services/email.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        nodemailer\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require(\"nodemailer\")\n                    \n                \n\n\n        \n    \n\n    src/common/validation/patterns/password.pattern.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        password_pattern\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{8,}$/\n                    \n                \n\n\n        \n    \n\n    client/src/router/router.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        router\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createRouter({\n  history: createWebHistory(import.meta.env.BASE_URL),\n  routes: [\n    {\n      path: '/',\n      name: 'home',\n      component: HomeView\n    },\n    {\n      path: '/login/:challenge?',\n      name: 'login',\n      component: LoginView\n    },\n    {\n      path: '/reset',\n      name: 'reset_request',\n      component: ResetRequestView\n    },\n    {\n      path: '/reset/:challenge',\n      name: 'reset',\n      component: ResetView\n    },\n    {\n      path: '/register',\n      name: 'register',\n      component: RegisterView\n    },\n    {\n      path: '/profile',\n      name: 'profile',\n      component: ProfileView\n    },\n    {\n      path: '/history',\n      name: 'history',\n      component: HistoryView\n    },\n    {\n      path: '/privacy',\n      name: 'privacy',\n      component: PrivacyView\n    },\n    {\n      path: '/docs',\n      name: 'docs',\n      component: DocsView\n    }\n  ]\n})\n                    \n                \n\n\n        \n    \n\n    client/src/util/store.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        store\n                        \n                    \n                \n            \n                \n                    \n                        Default value : reactive({\n  logged_in: false,\n  loading: false,\n  alert: {\n    show: false,\n    msg: \"\",\n    type: \"success\",\n  },\n\n  update_loading(loading: boolean) {\n    this.loading = loading;\n  },\n\n  async update_logged_in() {\n    const check = (await fetch(\"/api/user/check\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": \"Bearer \" + (get_cookie(\"access_token\") ?? \"\"),\n      }\n    }));\n    const data = await check.text()\n    this.logged_in = data === \"true\"\n  },\n\n  generate_type(http_code: number) {\n    if (http_code >= 200 && http_code = 400 && http_code = 500 && http_code \n                    \n                \n\n\n        \n    \n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                        \n                    \n                \n            \n                \n                    \n                        Default value : require('./../package.json')\n                    \n                \n\n\n        \n    \n\n    src/common/decorators/user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        User\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: unknown, ctx: ExecutionContext) : JwtUser => {\n    const request = ctx.switchToHttp().getRequest();\n    return request.user;\n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/common/validation/patterns/username.pattern.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        username_pattern\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$/\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
