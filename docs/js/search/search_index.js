var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/injectables/AnnounceJob.html",[0,0.212,1,2.2]],["body/injectables/AnnounceJob.html",[0,0.254,1,2.63,2,0.734,3,0.157,4,0.157,5,0.122,6,2.628,7,0.362,8,1.492,9,2.761,10,2.1,11,5.19,12,5.19,13,1.009,14,1.508,15,3.96,16,4.42,17,0.983,18,3.059,19,3.739,20,2.996,21,2.834,22,2.996,23,1.377,24,4.42,25,0.961,26,0.019,27,0.825,28,0.523,29,0.783,30,3.059,31,1.009,32,4.42,33,0.945,34,3.059,35,4.2,36,3.059,37,0.696,38,0.317,39,2.628,40,2.343,41,2.343,42,2.4,43,1.086,44,2.628,45,0.157,46,0.339,47,0.936,48,3.059,49,3.059,50,4.42,51,4.42,52,4.42,53,4.42,54,4.42,55,4.42,56,4.42,57,4.42,58,4.42,59,4.42,60,4.42,61,4.42,62,4.42,63,4.42,64,4.42,65,4.42,66,4.42,67,4.42,68,4.42,69,4.42,70,3.059,71,3.059,72,2.343,73,1.961,74,2.37,75,1.757,76,2.131,77,3.059,78,2.343,79,2.343,80,2.131,81,3.059,82,3.059,83,2.628,84,3.059,85,3.059,86,3.059,87,0.011,88,0.011]],["title/modules/AppModule.html",[89,0.932,90,2.576]],["body/modules/AppModule.html",[3,0.209,4,0.209,5,0.162,26,0.019,37,0.798,38,0.422,45,0.209,46,0.451,87,0.013,88,0.013,89,1.358,90,5.193,91,1.521,92,2.012,93,3.5,94,3.5,95,4.405,96,4.405,97,4.405,98,4.405,99,4.405,100,2.234,101,1.446,102,1.602,103,4.075,104,3.207,105,4.075,106,4.075,107,4.075,108,3.5,109,3.5,110,4.075,111,3.5,112,4.075,113,4.075,114,4.075,115,4.075,116,2.838,117,4.075,118,4.075,119,4.075,120,4.075,121,4.075]],["title/controllers/AuthController.html",[122,1.812,123,2.576]],["body/controllers/AuthController.html",[3,0.173,4,0.173,5,0.134,7,0.399,13,1.082,14,1.752,23,1.43,25,1.36,26,0.019,27,1.168,28,0.74,29,1.108,31,1.43,33,1.04,37,0.607,38,0.349,45,0.173,46,0.374,47,1.032,75,1.824,87,0.012,88,0.012,122,1.653,123,3.301,124,1.653,125,2.898,126,2.35,127,2.898,128,3.301,129,3.63,130,3.63,131,4.071,132,3.63,133,2.898,134,3.724,135,4.74,136,3.374,137,4.139,138,2.593,139,3.374,140,3.374,141,3.374,142,5.727,143,2.898,144,4.74,145,3.374,146,2.898,147,4.74,148,3.374,149,2.323,150,3.374,151,4.74,152,3.374,153,3.301,154,2.35,155,2.35,156,2.35,157,2.35,158,2.35,159,3.043,160,2.584,161,3.374,162,3.374,163,3.374,164,3.374,165,1.738,166,3.374,167,3.374,168,3.374,169,3.374,170,3.374,171,3.374,172,3.374,173,3.374,174,3.374,175,3.374]],["title/modules/AuthModule.html",[89,0.932,95,2.371]],["body/modules/AuthModule.html",[3,0.197,4,0.197,5,0.152,22,3.123,26,0.019,37,0.797,38,0.397,45,0.197,46,0.425,87,0.013,88,0.013,89,1.304,91,1.432,92,1.933,95,4.784,100,2.145,101,1.362,102,1.508,104,3.081,123,4.083,124,2.538,159,3.751,160,2.939,176,3.295,177,3.295,178,3.295,179,3.31,180,4.329,181,4.329,182,2.953,183,3.837,184,2.395,185,2.672,186,5.179,187,2.283,188,3.837,189,3.837,190,3.837,191,2.939,192,3.837,193,2.672,194,2.672,195,3.837,196,3.837,197,3.295,198,3.837,199,3.837,200,3.837]],["title/injectables/AuthService.html",[0,0.212,159,2.054]],["body/injectables/AuthService.html",[0,0.178,2,0.462,3,0.099,4,0.099,5,0.076,7,0.228,9,1.754,10,1.365,13,0.708,14,1.627,17,0.996,22,2.543,23,1.256,25,1.195,26,0.019,27,1.067,28,0.65,29,0.974,31,1.194,33,1.019,37,0.609,38,0.199,45,0.099,46,0.213,74,2.521,75,1.87,87,0.008,88,0.008,101,1.381,128,2.711,129,2.374,130,3.418,131,2.662,132,2.374,133,2.662,137,4.316,138,2.027,143,2.662,146,2.662,149,2.803,153,1.34,159,1.722,165,1.452,182,2.405,191,1.474,193,1.34,194,1.34,201,1.653,202,3.1,203,1.653,204,2.418,205,5.498,206,1.924,207,1.924,208,3.1,209,1.924,210,2.521,211,3.094,212,1.924,213,1.924,214,3.1,215,1.924,216,3.1,217,1.924,218,1.614,219,1.34,220,1.653,221,1.653,222,1.653,223,1.34,224,3.1,225,1.924,226,2.981,227,3.418,228,1.653,229,2.662,230,3.1,231,4.491,232,1.924,233,2.662,234,3.418,235,3.352,236,2.723,237,1.924,238,3.833,239,4.202,240,2.981,241,2.662,242,3.892,243,3.137,244,3.1,245,2.662,246,2.662,247,3.1,248,1.924,249,2.662,250,1.924,251,2.662,252,1.924,253,1.474,254,1.924,255,1.924,256,1.474,257,2.374,258,1.924,259,1.924,260,1.924,261,2.861,262,1.653,263,1.474,264,1.145,265,2.662,266,3.343,267,1.924,268,1.924,269,3.1,270,3.108,271,2.904,272,1.474,273,3.1,274,1.924,275,1.924,276,2.495,277,2.374,278,1.924,279,1.653,280,3.343,281,1.612,282,2.662,283,2.662,284,1.924,285,2.662,286,1.924,287,1.924,288,1.34,289,1.474,290,1.924,291,3.1,292,1.924,293,1.234,294,1.924]],["title/injectables/DiscordService.html",[0,0.212,19,2.2]],["body/injectables/DiscordService.html",[0,0.333,2,1.096,3,0.235,4,0.235,5,0.181,7,0.54,8,1.96,9,2.508,10,1.953,13,1.326,14,1.531,17,2.051,19,3.454,23,1.458,25,0.993,26,0.019,27,0.852,28,0.54,29,0.809,31,1.043,33,1.009,37,0.643,38,0.473,45,0.235,46,0.506,87,0.014,88,0.014,138,1.893,165,1.268,236,2.379,261,2.929,295,3.924,296,6.933,297,5.806,298,5.806,299,5.806,300,4.568,301,3.924,302,4.568,303,4.568,304,4.568,305,4.568]],["title/interfaces/EmailOptInDto.html",[306,1.078,307,2.576]],["body/interfaces/EmailOptInDto.html",[3,0.281,4,0.281,5,0.218,7,0.648,8,2.192,26,0.018,28,0.648,33,1.04,45,0.281,87,0.016,88,0.016,306,1.597,307,4.522,308,2.535,309,4.707,310,4.983]],["title/injectables/EmailService.html",[0,0.212,22,1.71]],["body/injectables/EmailService.html",[0,0.234,2,0.659,3,0.141,4,0.141,5,0.109,7,0.325,8,1.379,9,2.378,10,1.652,13,0.933,14,1.578,17,0.883,22,1.889,23,1.47,25,1.315,26,0.019,27,1.129,28,0.715,29,1.071,31,1.318,33,1.123,37,0.54,38,0.284,45,0.141,46,0.304,47,0.841,74,1.917,75,1.574,87,0.01,88,0.01,101,1.45,127,2.36,128,2.846,137,2.846,153,1.914,165,1.134,203,2.36,204,2.798,210,1.606,211,2.002,231,5.196,243,2.619,256,2.104,263,3.129,293,1.761,311,2.104,312,4.877,313,4.877,314,4.085,315,4.085,316,4.085,317,4.085,318,4.085,319,4.085,320,4.085,321,2.747,322,4.085,323,2.747,324,4.085,325,2.747,326,1.914,327,4.085,328,6.049,329,2.747,330,5.4,331,4.085,332,2.747,333,2.104,334,2.104,335,4.085,336,2.747,337,2.846,338,2.36,339,4.085,340,2.747,341,2.747,342,2.747,343,2.747,344,2.747,345,2.747,346,2.747,347,2.747,348,2.747,349,2.747,350,2.747,351,4.877,352,6.049,353,4.189,354,4.877,355,4.877,356,4.085,357,3.509,358,2.747,359,2.747,360,4.877,361,2.747,362,2.747,363,4.085,364,2.747,365,2.747,366,2.747,367,2.747,368,2.747]],["title/modules/EventModule.html",[89,0.932,96,2.371]],["body/modules/EventModule.html",[1,3.956,3,0.187,4,0.187,5,0.145,19,3.956,22,3.075,26,0.019,37,0.796,38,0.377,39,3.128,44,3.128,45,0.187,46,0.404,87,0.012,88,0.012,89,1.259,91,1.36,92,1.866,96,4.865,100,2.071,101,1.293,102,1.432,104,2.974,179,3.259,184,2.312,369,3.128,370,3.128,371,3.128,372,3.956,373,3.463,374,3.463,375,3.693,376,4.263,377,4.263,378,3.642,379,3.642,380,3.642,381,3.642,382,3.642,383,3.642,384,3.642,385,3.642,386,3.642]],["title/injectables/GravatarService.html",[0,0.212,387,2.2]],["body/injectables/GravatarService.html",[0,0.336,2,1.113,3,0.238,4,0.238,5,0.184,7,0.549,10,1.419,13,1.339,17,1.491,23,1.339,25,1.274,26,0.019,27,1.094,28,0.693,29,1.038,31,1.059,33,1.047,37,0.649,38,0.48,45,0.238,46,0.514,47,1.419,74,2.304,87,0.015,88,0.015,149,2.273,165,1.288,182,3.111,387,3.488,388,3.984,389,5.863,390,4.639,391,4.639,392,5.863,393,4.639,394,4.639,395,4.639,396,4.639,397,3.984,398,4.639,399,4.639]],["title/modules/HistoryDBModule.html",[89,0.932,372,2.2]],["body/modules/HistoryDBModule.html",[3,0.243,4,0.243,5,0.188,26,0.019,37,0.719,38,0.491,45,0.243,46,0.525,87,0.015,88,0.015,89,1.497,91,1.77,92,2.218,100,2.462,101,1.682,102,1.863,184,2.748,372,4.405,400,4.072,401,4.072,402,4.072,403,4.186,404,2.415,405,4.741,406,3.81,407,4.741,408,2.192]],["title/injectables/HistoryDBService.html",[0,0.212,403,2.054]],["body/injectables/HistoryDBService.html",[0,0.307,2,0.967,3,0.207,4,0.207,5,0.16,7,0.477,10,1.234,13,1.223,14,1.724,17,1.295,23,1.462,25,1.306,26,0.019,27,1.121,28,0.711,29,1.064,31,1.372,33,0.903,37,0.666,38,0.417,43,1.431,45,0.207,46,0.447,47,1.234,75,1.751,87,0.013,88,0.013,138,2.49,165,1.668,281,2.218,403,2.973,404,2.161,408,1.864,409,3.463,410,3.185,411,4.105,412,2.585,413,4.032,414,2.628,415,3.729,416,5.162,417,4.032,418,4.032,419,5.353,420,4.032,421,2.218,422,4.032,423,4.032,424,4.032,425,2.808]],["title/injectables/HistoryJob.html",[0,0.212,376,2.371]],["body/injectables/HistoryJob.html",[0,0.293,2,0.9,3,0.193,4,0.193,5,0.149,7,0.444,9,2.277,10,1.903,13,1.165,14,1.39,15,4.331,17,1.205,20,3.174,21,2.934,23,1.165,25,0.815,26,0.019,27,0.7,28,0.444,29,0.664,31,0.857,33,0.767,37,0.76,38,0.388,40,2.873,41,2.873,42,2.68,43,1.331,45,0.193,46,0.416,47,1.148,72,2.873,73,2.405,74,2.444,75,1.955,76,2.613,78,2.873,79,2.873,83,3.222,87,0.013,88,0.013,116,2.613,134,2.232,264,2.232,281,1.554,376,3.269,403,3.811,414,1.64,416,3.222,421,1.554,426,3.222,427,2.613,428,3.174,429,3.751,430,3.906,431,3.751,432,3.751,433,3.222,434,3.751,435,3.751,436,5.1,437,2.873,438,2.613,439,3.751,440,3.751,441,3.751,442,3.751,443,3.222]],["title/injectables/JwtAuthGuard.html",[0,0.212,444,2.2]],["body/injectables/JwtAuthGuard.html",[0,0.372,2,1.31,3,0.28,4,0.28,5,0.217,26,0.019,37,0.718,38,0.565,45,0.28,46,0.605,87,0.016,88,0.016,187,3.249,444,3.855,445,4.69,446,4.69,447,4.69,448,3.501,449,5.461]],["title/injectables/JwtStrategy.html",[0,0.212,180,2.371]],["body/injectables/JwtStrategy.html",[0,0.331,2,1.086,3,0.233,4,0.233,5,0.18,7,0.535,13,1.318,14,1.525,17,2.042,23,1.318,25,0.984,26,0.019,27,0.845,28,0.535,29,0.802,31,1.034,37,0.742,38,0.469,45,0.233,46,0.502,87,0.014,88,0.014,165,1.257,180,3.701,187,2.693,197,3.888,218,3.007,251,3.888,293,2.902,448,2.902,450,3.888,451,4.958,452,4.527,453,5.773,454,4.527,455,4.527,456,3.888,457,3.468,458,3.888,459,3.888,460,2.358,461,3.153,462,3.888,463,3.888,464,4.527,465,4.527,466,4.527,467,4.527,468,2.693,469,4.527]],["title/interfaces/JwtUser.html",[306,1.078,460,1.926]],["body/interfaces/JwtUser.html",[3,0.281,4,0.281,5,0.218,7,0.648,8,2.192,26,0.018,28,0.648,33,1.04,45,0.281,87,0.016,88,0.016,306,1.597,308,2.535,460,3.382,468,4.256,470,4.707]],["title/injectables/LocalAuthGuard.html",[0,0.212,157,2.576]],["body/injectables/LocalAuthGuard.html",[0,0.372,2,1.315,3,0.281,4,0.281,5,0.218,26,0.019,37,0.719,38,0.567,45,0.281,46,0.607,87,0.016,88,0.016,157,4.522,187,3.261,447,4.707,448,3.514,471,4.707,472,5.481]],["title/injectables/LocalStrategy.html",[0,0.212,181,2.371]],["body/injectables/LocalStrategy.html",[0,0.319,2,1.025,3,0.219,4,0.219,5,0.17,7,0.505,13,1.27,14,1.483,17,1.372,23,1.27,25,1.208,26,0.019,27,1.038,28,0.657,29,0.985,31,0.975,33,1.046,37,0.725,38,0.442,45,0.219,46,0.473,47,1.307,74,1.679,75,1.245,87,0.014,88,0.014,149,2.093,159,3.866,160,3.271,165,1.186,181,3.565,187,2.541,210,2.43,211,3.209,218,2.896,235,2.738,236,2.224,448,2.738,451,4.776,456,3.668,457,3.271,459,3.668,462,3.668,463,3.668,473,3.668,474,4.271,475,4.271,476,5.56,477,4.271,478,3.668,479,5.56,480,4.271]],["title/injectables/LoggerMiddleware.html",[0,0.212,481,2.833]],["body/injectables/LoggerMiddleware.html",[0,0.343,2,1.148,3,0.246,4,0.246,5,0.19,7,0.566,13,1.365,23,1.093,25,1.04,26,0.019,27,0.893,28,0.566,29,0.847,31,1.093,37,0.53,38,0.495,45,0.246,46,0.53,87,0.015,88,0.015,142,4.11,326,3.333,481,4.579,482,4.11,483,4.579,484,5.979,485,6.52,486,5.866,487,6.52,488,4.786,489,4.11,490,5.979,491,4.11,492,6.52,493,4.786,494,4.786]],["title/interfaces/LoginDto.html",[306,1.078,495,2.576]],["body/interfaces/LoginDto.html",[3,0.273,4,0.273,5,0.211,7,0.628,8,2.15,26,0.018,28,0.753,33,1.105,45,0.273,87,0.016,88,0.016,149,3.469,211,3.469,306,1.547,308,2.454,495,4.437,496,4.558]],["title/controllers/MovieController.html",[122,1.812,497,2.576]],["body/controllers/MovieController.html",[3,0.117,4,0.117,5,0.09,7,0.269,9,2.209,10,0.696,13,0.808,14,1.677,23,1.284,25,0.944,26,0.019,27,0.811,28,0.514,29,0.769,31,1.284,33,0.937,35,3.413,37,0.706,38,0.236,42,3.274,43,0.807,45,0.117,46,0.252,47,0.696,75,1.638,87,0.009,88,0.009,122,2.129,124,1.115,126,1.585,134,3.344,154,3.025,155,1.585,156,3.915,158,1.585,165,1.561,210,2.55,218,3.432,253,2.711,276,2.269,281,2.329,288,4.437,410,2.106,421,2.876,444,1.354,460,3.056,461,1.585,497,2.465,498,1.954,499,1.585,500,5.211,501,2.465,502,3.539,503,4.901,504,4.209,505,3.539,506,4.209,507,3.539,508,2.275,509,1.954,510,2.275,511,2.129,512,3.04,513,5.621,514,3.754,515,3.539,516,2.275,517,4.306,518,3.344,519,3.539,520,2.275,521,4.066,522,2.275,523,2.275,524,2.275,525,3.04,526,3.539,527,3.539,528,2.275,529,2.275,530,1.954,531,2.275,532,3.539,533,2.584,534,1.954,535,1.743,536,1.743,537,1.459,538,1.954,539,1.459,540,1.954,541,1.459,542,2.711,543,1.585,544,1.354,545,1.743,546,2.275,547,2.275,548,2.275,549,2.275,550,3.327,551,1.954,552,2.275,553,2.275,554,1.954,555,2.275,556,3.04,557,2.275,558,1.954,559,2.275,560,2.275]],["title/modules/MovieDBModule.html",[89,0.932,373,1.926]],["body/modules/MovieDBModule.html",[3,0.243,4,0.243,5,0.188,21,3.296,26,0.019,37,0.719,38,0.491,45,0.243,46,0.525,87,0.015,88,0.015,89,1.497,91,1.77,92,2.218,100,2.462,101,1.682,102,1.863,184,2.748,373,3.856,404,2.415,406,3.81,408,2.192,561,4.072,562,4.072,563,4.072,564,4.741,565,4.741]],["title/injectables/MovieDBService.html",[0,0.212,21,1.617]],["body/injectables/MovieDBService.html",[0,0.252,2,0.726,3,0.156,4,0.156,5,0.12,7,0.358,10,0.927,13,1.002,14,1.773,17,0.973,21,1.919,23,1.511,25,1.404,26,0.019,27,1.205,28,0.764,29,1.144,31,1.475,33,1.014,37,0.572,38,0.313,43,1.075,45,0.156,46,0.336,47,0.927,75,1.883,87,0.011,88,0.011,138,2.676,165,1.793,281,1.818,404,1.91,408,1.401,410,2.611,411,3.628,412,1.942,414,2.257,415,3.056,421,2.595,511,2.151,566,2.601,567,4.388,568,4.388,569,4.388,570,3.029,571,4.432,572,3.029,573,3.361,574,3.029,575,4.388,576,3.262,577,3.029,578,3.628,579,3.769,580,3.029,581,3.029,582,4.388,583,3.029,584,4.388,585,3.029,586,4.388,587,4.388,588,3.361,589,3.029,590,3.029,591,3.029,592,2.601]],["title/interfaces/MovieExtType.html",[306,1.078,537,2.371]],["body/interfaces/MovieExtType.html",[3,0.223,4,0.223,5,0.173,7,0.514,8,1.898,26,0.019,28,0.862,33,1.134,45,0.223,87,0.014,88,0.014,264,3.921,306,1.266,308,2.009,421,2.731,438,4.591,514,5.048,537,3.604,576,3.796,588,5.048,593,3.732,594,5.661,595,5.661,596,4.225,597,5.661,598,5.354]],["title/modules/MovieModule.html",[89,0.932,97,2.371]],["body/modules/MovieModule.html",[3,0.195,4,0.195,5,0.151,26,0.019,37,0.795,38,0.393,45,0.195,46,0.421,87,0.013,88,0.013,89,1.296,91,1.418,92,1.92,97,4.84,100,2.131,101,1.348,102,1.493,104,3.06,124,2.521,179,3.3,184,2.379,185,2.646,372,4.006,373,3.507,374,3.507,375,3.739,404,2.273,497,4.062,533,4.006,534,3.262,599,3.262,600,3.798,601,3.262,602,3.507,603,3.798,604,3.798,605,3.262,606,2.909,607,2.909,608,3.262,609,3.798,610,3.262]],["title/injectables/MovieService.html",[0,0.212,533,2.2]],["body/injectables/MovieService.html",[0,0.179,2,0.464,3,0.099,4,0.099,5,0.077,7,0.229,8,1.051,9,2.252,10,1.81,13,0.711,14,1.628,17,0.621,20,2.548,21,2.292,23,1.309,25,0.973,26,0.019,27,0.835,28,0.58,29,0.792,31,1.197,33,0.991,35,2.72,37,0.7,38,0.2,42,2.735,43,0.686,45,0.099,46,0.214,47,0.592,74,2.484,75,1.961,76,2.168,80,1.347,87,0.008,88,0.008,138,2.171,149,1.525,165,1.685,204,2.548,210,1.759,219,1.347,222,1.661,223,1.347,227,1.481,234,1.481,235,3.36,236,2.729,253,1.481,257,2.384,261,1.24,264,2.323,270,1.347,271,1.074,272,2.384,276,1.995,277,1.481,282,1.661,285,2.673,403,2.486,411,2.869,414,0.846,421,2.374,425,1.347,427,1.347,428,2.548,437,2.991,438,2.72,443,1.661,468,1.852,504,3.844,506,3.844,511,1.525,514,2.991,518,1.151,521,1.481,533,1.852,537,1.995,538,1.661,539,1.995,540,1.661,541,1.24,542,3.428,543,1.347,544,1.852,545,1.481,571,1.661,573,2.384,579,2.673,588,4.22,594,1.661,595,2.673,596,2.504,597,2.673,602,2.87,608,1.661,611,1.661,612,3.112,613,3.905,614,3.112,615,1.934,616,1.934,617,1.934,618,1.934,619,1.934,620,3.112,621,1.934,622,3.354,623,1.481,624,1.481,625,1.934,626,1.661,627,1.934,628,1.934,629,1.934,630,1.934,631,3.354,632,3.112,633,1.934,634,1.934,635,2.673,636,1.934,637,4.476,638,3.112,639,3.112,640,1.934,641,1.934,642,1.934,643,3.905,644,1.934,645,1.661,646,1.934,647,3.905,648,1.934,649,1.934,650,1.934,651,1.481,652,1.934,653,1.934,654,1.934,655,1.934,656,1.934,657,1.934,658,1.934,659,1.661,660,1.934,661,1.934,662,1.934,663,1.934,664,1.934,665,1.661,666,1.661,667,1.934,668,1.934,669,1.934,670,1.934,671,1.481,672,1.934,673,1.934,674,1.934]],["title/interfaces/PasswordDto.html",[306,1.078,675,2.576]],["body/interfaces/PasswordDto.html",[3,0.271,4,0.271,5,0.209,7,0.623,8,2.141,26,0.018,28,0.75,29,1.123,33,1.103,45,0.271,87,0.016,88,0.016,211,3.461,306,1.536,308,2.437,675,4.418,676,4.527,677,6.065]],["title/interfaces/PasswordNewDto.html",[306,1.078,678,2.576]],["body/interfaces/PasswordNewDto.html",[3,0.262,4,0.262,5,0.203,7,0.604,8,2.102,26,0.018,28,0.794,29,1.102,33,1.127,45,0.262,87,0.015,88,0.015,211,3.425,306,1.489,308,2.363,677,6.002,678,4.336,679,4.389,680,6.002]],["title/injectables/PasswordService.html",[0,0.212,182,1.617]],["body/injectables/PasswordService.html",[0,0.313,2,0.996,3,0.213,4,0.213,5,0.165,7,0.491,13,1.247,14,1.657,23,1.393,25,1.325,26,0.019,27,1.138,28,0.721,29,1.08,31,1.393,33,1.128,37,0.605,38,0.43,45,0.213,46,0.46,74,1.632,87,0.014,88,0.014,165,1.693,182,2.388,211,2.676,218,3.374,397,5.933,681,3.181,682,5.46,683,5.46,684,5.46,685,4.154,686,5.46,687,4.154,688,5.46,689,4.154,690,2.893,691,3.567,692,4.154,693,3.567,694,4.154,695,4.154,696,4.154,697,4.154,698,4.154]],["title/injectables/PrismaService.html",[0,0.212,404,1.248]],["body/injectables/PrismaService.html",[0,0.333,2,1.096,3,0.235,4,0.235,5,0.181,7,0.54,13,1.326,14,1.727,23,1.326,25,0.993,26,0.019,27,0.852,28,0.54,29,0.809,31,1.326,37,0.643,38,0.473,43,1.621,45,0.235,46,0.506,75,1.692,87,0.014,88,0.014,404,1.96,448,3.722,491,3.924,699,3.924,700,6.383,701,5.806,702,7.086,703,5.806,704,6.716,705,4.568,706,3.499,707,4.568,708,4.568,709,4.568,710,4.568]],["title/interfaces/ProfileDto.html",[306,1.078,711,2.371]],["body/interfaces/ProfileDto.html",[3,0.271,4,0.271,5,0.209,7,0.623,8,2.141,26,0.018,27,1.318,28,0.75,29,1.123,33,1.023,45,0.271,87,0.016,88,0.016,306,1.536,308,2.437,711,4.066,712,4.527,713,6.065,714,4.739]],["title/interfaces/ResDto.html",[306,1.078,544,2.2]],["body/interfaces/ResDto.html",[3,0.271,4,0.271,5,0.209,7,0.623,8,2.141,26,0.018,28,0.75,29,1.123,33,1.023,45,0.271,87,0.016,88,0.016,261,4.527,270,4.918,306,1.536,308,2.437,544,3.774,714,4.739,715,4.527]],["title/controllers/UserController.html",[122,1.812,716,2.576]],["body/controllers/UserController.html",[3,0.095,4,0.095,5,0.073,7,0.218,9,2.592,10,0.564,13,0.683,14,1.701,23,1.328,25,1.223,26,0.019,27,1.115,28,0.665,29,0.996,31,1.328,33,0.568,37,0.678,38,0.191,45,0.095,46,0.204,47,0.564,75,1.64,87,0.007,88,0.007,122,1.852,124,0.903,126,1.283,134,3.46,138,1.802,149,1.466,154,4.163,155,1.283,156,4.483,158,1.283,165,1.615,210,2.844,211,1.466,218,3.113,240,2.292,243,1.918,271,1.023,281,2.123,288,2.084,307,3.03,310,3.03,326,4.939,444,1.096,460,3.603,461,1.283,495,3.03,499,1.283,500,2.57,501,2.084,511,2.512,517,3.332,525,2.57,535,1.411,536,1.411,544,1.096,545,1.411,550,4.31,578,3.067,675,3.03,678,3.03,711,2.789,716,2.084,717,1.582,718,2.57,719,2.57,720,4.35,721,2.992,722,2.992,723,2.992,724,1.842,725,1.842,726,1.842,727,4.833,728,1.842,729,1.842,730,1.842,731,1.842,732,1.842,733,2.57,734,2.992,735,2.992,736,1.842,737,1.842,738,1.842,739,1.842,740,1.842,741,1.842,742,2.992,743,2.992,744,1.842,745,1.582,746,1.842,747,1.842,748,1.842,749,1.842,750,2.992,751,1.842,752,2.992,753,1.842,754,1.842,755,1.842,756,1.842,757,2.084,758,2.992,759,2.248,760,1.582,761,1.582,762,1.842,763,1.842,764,1.842,765,1.842,766,1.842,767,1.842,768,1.842,769,1.842,770,1.842,771,1.842,772,1.842,773,1.842,774,1.842,775,1.842,776,1.842,777,3.778,778,1.842,779,1.842,780,1.842,781,1.842,782,1.842,783,1.842,784,1.842,785,1.842,786,1.842,787,1.842,788,1.842,789,1.842,790,1.842,791,1.842]],["title/modules/UserDBModule.html",[89,0.932,179,1.812]],["body/modules/UserDBModule.html",[3,0.234,4,0.234,5,0.181,26,0.019,37,0.743,38,0.471,45,0.234,46,0.505,87,0.014,88,0.014,89,1.46,91,1.7,92,2.163,100,2.401,101,1.616,102,1.79,179,3.654,182,3.096,184,2.68,204,3.467,404,2.39,406,3.715,408,2.106,792,3.912,793,3.912,794,3.912,795,4.555,796,4.555,797,3.912]],["title/injectables/UserDBService.html",[0,0.212,204,1.71]],["body/injectables/UserDBService.html",[0,0.248,2,0.711,3,0.152,4,0.152,5,0.118,7,0.35,9,1.165,10,1.322,13,0.986,14,1.768,17,0.952,23,1.502,25,1.351,26,0.019,27,1.16,28,0.778,29,1.101,31,1.465,33,0.766,37,0.62,38,0.307,43,1.051,45,0.152,46,0.328,47,0.907,74,1.165,75,1.259,87,0.011,88,0.011,149,2.117,165,1.781,182,2.806,204,1.997,210,1.165,218,3.701,271,1.646,279,3.71,281,2.467,310,2.064,404,1.891,408,1.37,411,3.59,412,1.9,414,2.229,425,2.064,511,2.117,645,4.377,727,3.71,797,2.545,798,2.545,799,5.601,800,4.319,801,2.963,802,4.319,803,2.963,804,4.319,805,5.511,806,2.963,807,2.963,808,2.963,809,5.097,810,2.963,811,2.963,812,4.319,813,2.963,814,4.319,815,4.319,816,2.963,817,4.319,818,2.963,819,2.963,820,4.319,821,2.963,822,2.963,823,2.963,824,2.545,825,2.963,826,2.963]],["title/modules/UserModule.html",[89,0.932,98,2.371]],["body/modules/UserModule.html",[3,0.195,4,0.195,5,0.151,22,3.114,26,0.019,37,0.795,38,0.393,45,0.195,46,0.421,87,0.013,88,0.013,89,1.296,91,1.418,92,1.92,98,4.84,100,2.131,101,1.348,102,1.493,104,3.06,124,2.521,179,3.3,182,2.944,184,2.379,185,2.646,193,2.646,194,2.646,373,3.507,374,3.507,375,3.739,387,4.006,606,2.909,607,2.909,610,3.262,716,4.062,759,4.006,760,3.262,827,3.262,828,3.798,829,3.262,830,3.798,831,3.798,832,3.262]],["title/injectables/UserService.html",[0,0.212,759,2.2]],["body/injectables/UserService.html",[0,0.151,2,0.377,3,0.081,4,0.081,5,0.062,7,0.186,9,1.865,10,1.541,13,0.6,14,1.634,17,0.505,20,2.329,21,2.076,22,2.329,23,1.253,25,1.192,26,0.019,27,1.11,28,0.649,29,0.971,31,1.206,33,0.942,35,1.828,37,0.644,38,0.163,42,0.727,43,0.558,45,0.081,46,0.174,47,0.481,74,2.425,75,1.996,76,1.095,87,0.007,88,0.007,128,1.095,130,1.204,137,1.828,138,2.187,149,0.77,165,1.523,182,2.203,193,1.095,194,1.095,204,2.329,210,2.425,211,3.024,219,1.095,220,1.35,223,1.095,226,2.589,227,3.858,228,2.255,229,2.904,233,1.35,234,1.204,235,2.815,236,2.857,238,2.904,239,1.35,241,1.35,243,2.531,249,2.255,256,1.204,261,2.815,262,2.904,263,1.204,264,0.935,265,1.35,266,3.392,270,3.059,271,2.636,276,1.008,280,3.392,281,2.087,289,2.011,293,1.683,310,2.355,387,2.997,414,0.687,427,1.095,428,2.329,468,3.539,483,1.204,486,2.255,511,1.657,518,2.011,576,3.547,578,4.243,596,2.167,623,1.204,624,1.204,626,1.35,665,1.35,666,1.35,680,2.904,711,2.531,713,2.255,714,2.355,718,2.255,719,2.255,757,1.095,759,1.562,761,1.35,824,1.35,832,1.35,833,1.35,834,2.625,835,2.625,836,2.625,837,1.572,838,2.625,839,3.381,840,1.572,841,2.625,842,1.572,843,2.625,844,4.392,845,1.572,846,2.625,847,1.572,848,2.625,849,3.949,850,1.572,851,2.625,852,1.572,853,2.625,854,1.572,855,2.625,856,1.572,857,3.381,858,2.625,859,1.572,860,1.572,861,2.625,862,1.572,863,1.572,864,1.572,865,2.625,866,2.625,867,1.572,868,1.572,869,3.381,870,1.572,871,1.572,872,1.572,873,2.625,874,2.255,875,3.381,876,1.572,877,1.572,878,2.625,879,1.572,880,2.625,881,1.572,882,1.572,883,1.572,884,1.572,885,1.572,886,1.572,887,1.572,888,1.572,889,1.572,890,1.572,891,1.35]],["title/controllers/VoteController.html",[122,1.812,892,2.576]],["body/controllers/VoteController.html",[3,0.146,4,0.146,5,0.113,7,0.337,9,2.408,10,0.871,13,0.958,14,1.661,23,1.255,25,1.194,26,0.019,27,1.025,28,0.65,29,0.973,31,1.255,33,0.998,37,0.679,38,0.295,42,2.833,43,1.01,45,0.146,46,0.315,47,0.871,87,0.01,88,0.01,122,2.44,124,1.395,126,1.982,134,3.268,154,3.468,155,1.982,156,4.413,158,1.982,165,1.525,210,2.722,218,3.386,288,2.921,421,2.836,444,1.693,460,3.515,461,1.982,499,1.982,501,2.921,509,2.444,511,2.44,517,3.212,518,2.495,530,2.444,535,2.18,536,2.18,541,3.928,550,3.814,551,3.601,554,2.444,556,3.601,558,2.444,576,2.184,596,2.688,602,2.593,745,2.444,892,2.921,893,2.444,894,4.193,895,3.601,896,4.193,897,4.718,898,2.846,899,2.846,900,2.846,901,2.846,902,4.193,903,3.212,904,2.846,905,2.846,906,2.846,907,2.846,908,2.444,909,2.846,910,2.846,911,2.846,912,2.846,913,2.846,914,2.846,915,2.846,916,4.193,917,2.846,918,2.846]],["title/modules/VoteDBModule.html",[89,0.932,374,1.926]],["body/modules/VoteDBModule.html",[3,0.243,4,0.243,5,0.188,26,0.019,37,0.719,38,0.491,45,0.243,46,0.525,87,0.015,88,0.015,89,1.497,91,1.77,92,2.218,100,2.462,101,1.682,102,1.863,184,2.748,374,3.856,404,2.415,406,3.81,408,2.192,428,3.485,919,4.072,920,4.072,921,4.072,922,4.741,923,4.741]],["title/injectables/VoteDBService.html",[0,0.212,428,1.71]],["body/injectables/VoteDBService.html",[0,0.202,2,0.543,3,0.116,4,0.116,5,0.09,7,0.267,10,0.692,13,0.805,14,1.775,17,0.727,23,1.503,25,1.43,26,0.019,27,1.228,28,0.778,29,1.165,31,1.48,33,0.935,37,0.479,38,0.234,42,2.001,43,0.803,45,0.116,46,0.251,47,0.692,75,1.888,87,0.009,88,0.009,138,2.684,165,1.799,210,1.92,271,2.403,281,2.323,404,1.649,408,1.046,410,2.096,412,1.45,414,1.892,415,2.454,421,2.726,428,1.629,468,2.096,511,1.726,576,3.428,578,4.077,592,3.717,805,3.717,924,1.942,925,3.523,926,3.523,927,3.523,928,3.523,929,3.523,930,3.026,931,3.523,932,2.262,933,3.717,934,2.262,935,3.523,936,4.816,937,2.262,938,3.523,939,2.262,940,3.523,941,2.262,942,3.523,943,2.262,944,3.523,945,2.262,946,3.523,947,3.523,948,2.262,949,3.523,950,2.262,951,3.026,952,2.262,953,3.523,954,2.262,955,3.523,956,2.262,957,2.262,958,2.262,959,3.523,960,3.523,961,3.523,962,2.262,963,3.523,964,2.262,965,2.262,966,2.262,967,2.262,968,2.262,969,3.523]],["title/modules/VoteModule.html",[89,0.932,99,2.371]],["body/modules/VoteModule.html",[3,0.216,4,0.216,5,0.167,26,0.019,37,0.783,38,0.436,45,0.216,46,0.467,87,0.014,88,0.014,89,1.388,91,1.572,92,2.057,99,4.8,100,2.282,101,1.494,102,1.655,104,3.278,124,2.7,179,3.398,184,2.548,185,2.933,373,3.611,374,3.611,404,2.341,602,3.611,605,3.617,606,3.226,607,3.226,892,4.277,908,3.617,970,4.212,971,4.212,972,4.212,973,4.212,974,4.212]],["title/injectables/VoteService.html",[0,0.212,602,1.926]],["body/injectables/VoteService.html",[0,0.23,2,0.642,3,0.137,4,0.137,5,0.106,7,0.316,9,1.574,10,1.469,13,0.914,14,1.64,17,0.859,21,2.619,23,1.303,25,1.24,26,0.019,27,1.065,28,0.675,29,1.01,31,1.217,33,0.981,37,0.632,38,0.277,42,2.639,43,0.949,45,0.137,46,0.296,47,0.818,74,2.094,75,1.745,87,0.01,88,0.01,138,2.208,165,1.479,204,2.871,210,1.051,219,1.863,221,2.297,223,1.863,235,3.84,236,3.119,257,4.082,272,4.082,276,2.567,277,2.048,414,1.17,421,2.364,427,1.863,428,2.871,468,1.591,518,1.591,541,2.567,576,3.463,578,4.327,596,2.567,602,2.085,623,2.048,624,2.048,631,4.577,635,2.297,651,3.067,659,2.297,891,2.297,895,3.439,897,4.122,903,2.048,930,3.439,933,2.297,936,2.297,951,3.439,975,2.297,976,2.674,977,4.004,978,2.674,979,2.674,980,4.004,981,2.674,982,4.004,983,2.674,984,2.674,985,4.004,986,3.067,987,2.674,988,2.674,989,4.004,990,2.674,991,2.674,992,2.674,993,2.674,994,2.674,995,4.004,996,2.674,997,2.674,998,2.674,999,4.004,1000,2.674,1001,2.674,1002,2.674,1003,2.674]],["title/modules/WatchListDBModule.html",[89,0.932,375,2.054]],["body/modules/WatchListDBModule.html",[3,0.243,4,0.243,5,0.188,20,3.485,26,0.019,37,0.719,38,0.491,45,0.243,46,0.525,87,0.015,88,0.015,89,1.497,91,1.77,92,2.218,100,2.462,101,1.682,102,1.863,184,2.748,375,4.112,404,2.415,406,3.81,408,2.192,1004,4.072,1005,4.072,1006,4.072,1007,4.741,1008,4.741]],["title/injectables/WatchListDBService.html",[0,0.212,20,1.71]],["body/injectables/WatchListDBService.html",[0,0.307,2,0.967,3,0.207,4,0.207,5,0.16,7,0.477,10,1.234,13,1.223,14,1.724,17,1.295,20,2.476,23,1.462,25,1.306,26,0.019,27,1.121,28,0.711,29,1.064,31,1.372,33,0.903,37,0.666,38,0.417,43,1.431,45,0.207,46,0.447,47,1.234,75,1.751,87,0.013,88,0.013,138,2.49,165,1.668,281,2.218,404,2.161,408,1.864,410,3.185,411,4.105,412,2.585,414,2.628,415,3.729,421,2.218,511,2.624,573,4.1,1009,3.463,1010,4.032,1011,5.162,1012,4.032,1013,4.032,1014,4.032,1015,4.032,1016,4.032,1017,4.032]],["title/injectables/WatchListJob.html",[0,0.212,377,2.371]],["body/injectables/WatchListJob.html",[0,0.262,1,3.905,2,0.766,3,0.164,4,0.164,5,0.127,7,0.378,8,1.54,9,2.685,10,2.12,13,1.042,14,1.276,15,4.04,17,1.027,20,3.036,21,2.871,23,1.325,25,0.694,26,0.019,27,0.596,28,0.378,29,0.566,31,0.73,33,0.959,37,0.744,38,0.331,40,2.447,41,2.447,42,2.682,43,1.134,45,0.164,46,0.354,47,0.978,72,2.447,73,2.048,74,2.41,75,1.69,78,2.447,79,2.447,80,4.04,87,0.011,88,0.011,116,2.225,134,1.901,236,1.664,281,1.324,333,3.493,334,3.493,377,2.924,414,1.397,421,1.324,428,2.949,430,4.073,433,2.744,437,2.447,651,2.447,1011,2.744,1018,2.744,1019,5.318,1020,5.318,1021,3.195,1022,4.561,1023,3.195,1024,4.561,1025,3.195,1026,4.561,1027,5.318,1028,3.195,1029,2.744,1030,3.195,1031,3.195,1032,3.195,1033,4.561,1034,3.195,1035,3.195,1036,3.195,1037,3.195,1038,4.561,1039,3.195,1040,3.195,1041,3.195,1042,3.195,1043,3.195]],["title/interfaces/WatchlistExtType.html",[306,1.078,539,2.371]],["body/interfaces/WatchlistExtType.html",[3,0.249,4,0.249,5,0.193,7,0.573,8,2.034,26,0.018,28,0.834,33,1.117,45,0.249,80,4.779,87,0.015,88,0.015,264,4.082,306,1.413,308,2.242,421,2.842,438,4.779,539,3.863,576,3.416,598,5.633,671,5.255,1044,4.163]],["title/coverage.html",[1045,4.338]],["body/coverage.html",[0,0.421,1,1.65,5,0.11,6,2.381,19,1.65,20,1.282,21,1.212,22,1.282,26,0.019,28,0.328,87,0.01,88,0.01,122,2.659,123,1.931,125,2.381,157,1.931,159,1.54,180,1.777,181,1.777,182,1.212,201,2.381,204,1.282,210,1.09,236,1.444,295,2.381,306,1.921,307,1.931,309,2.381,311,3.15,337,1.931,376,1.777,377,1.777,387,1.65,388,2.381,403,1.54,404,0.936,409,2.381,425,5.32,426,2.381,428,1.282,444,1.65,445,2.381,446,2.381,450,2.381,460,1.444,470,2.381,471,2.381,473,2.381,481,2.124,482,2.381,489,3.533,495,1.931,496,2.381,497,1.931,498,2.381,533,1.65,537,1.777,539,1.777,544,1.65,566,2.381,593,2.381,602,1.444,611,2.381,675,1.931,676,2.381,678,1.931,679,2.381,681,3.15,690,1.931,699,2.381,706,2.124,711,1.777,712,2.381,715,2.381,716,1.931,717,2.381,759,1.65,798,2.381,833,2.381,892,1.931,893,2.381,924,2.381,975,2.381,1009,2.381,1018,2.381,1044,2.381,1045,2.381,1046,2.124,1047,2.773,1048,2.773,1049,2.381,1050,6.708,1051,7.024,1052,2.381,1053,2.381,1054,2.381,1055,2.381,1056,4.659,1057,2.381,1058,2.381,1059,2.381,1060,2.381,1061,2.381,1062,2.381,1063,4.904,1064,5.425,1065,6.592,1066,2.773,1067,2.381,1068,5.425,1069,4.904,1070,4.904,1071,2.381,1072,2.124,1073,2.773,1074,4.212,1075,2.773,1076,2.773,1077,4.113,1078,2.773,1079,2.773,1080,2.773]],["title/dependencies.html",[92,1.661,1081,2.651]],["body/dependencies.html",[26,0.019,38,0.473,43,1.621,87,0.014,88,0.014,92,1.705,108,3.924,109,3.924,116,3.182,187,2.718,191,3.499,226,3.499,301,3.924,337,3.182,430,3.499,457,4.889,458,3.924,478,3.924,542,3.499,543,3.182,690,3.182,693,3.924,1029,3.924,1082,6.933,1083,4.568,1084,4.568,1085,3.924,1086,4.568,1087,4.568,1088,4.568,1089,4.568,1090,4.568,1091,4.568,1092,4.568,1093,4.568,1094,4.568,1095,4.568,1096,4.568,1097,4.568,1098,4.568,1099,4.568,1100,4.568,1101,4.568,1102,4.568,1103,3.924,1104,4.568,1105,4.568,1106,4.568,1107,4.568,1108,4.568,1109,4.568,1110,4.568]],["title/miscellaneous/functions.html",[1111,2.15,1112,3.821]],["body/miscellaneous/functions.html",[7,0.634,25,1.166,26,0.017,27,1.001,28,0.634,29,0.95,33,1.068,87,0.016,88,0.016,326,4.465,1054,4.607,1055,5.506,1071,4.607,1072,5.251,1111,3.736,1112,4.607,1113,5.364,1114,5.364,1115,5.364,1116,5.506,1117,5.364,1118,6.41]],["title/index.html",[7,0.365,73,1.979,986,2.364]],["body/index.html",[5,0.216,15,4.507,26,0.015,27,0.773,42,2.993,87,0.014,88,0.014,243,2.655,245,5.231,246,3.558,283,3.558,289,3.173,410,2.464,414,2.383,512,3.558,518,3.623,541,2.655,543,3.796,622,4.681,671,3.173,757,2.885,874,3.558,903,3.173,1046,3.173,1072,3.173,1074,3.558,1119,4.142,1120,4.142,1121,4.142,1122,4.142,1123,5.45,1124,4.142,1125,4.142,1126,4.142,1127,6.091,1128,4.142,1129,4.142,1130,4.142,1131,6.091,1132,4.142,1133,4.142,1134,4.142,1135,4.142,1136,4.142,1137,3.558,1138,4.142,1139,4.142,1140,5.45,1141,5.45,1142,4.142,1143,4.142,1144,4.142,1145,4.142,1146,4.142,1147,4.142,1148,4.681,1149,4.142,1150,4.142,1151,4.142,1152,4.142,1153,4.142,1154,4.142,1155,6.091,1156,4.142,1157,4.142,1158,4.142,1159,4.142,1160,4.142,1161,6.471,1162,5.45,1163,4.142,1164,4.142,1165,5.45,1166,4.142,1167,4.142,1168,5.45,1169,4.142,1170,4.142,1171,4.142,1172,4.142,1173,5.45,1174,4.142,1175,4.142]],["title/license.html",[73,1.979,986,2.364,1176,2.364]],["body/license.html",[26,0.014,87,0.014,88,0.014,102,1.718,353,3.753,357,3.753,483,4.322,1046,3.347,1085,3.753,1137,5.368,1176,3.347,1177,3.753,1178,6.25,1179,4.37,1180,4.37,1181,4.37,1182,4.37,1183,5.643,1184,4.37,1185,4.37,1186,4.37,1187,4.37,1188,4.37,1189,4.37,1190,5.643,1191,7.297,1192,4.37,1193,4.37,1194,4.37,1195,4.37,1196,5.643,1197,4.37,1198,4.37,1199,4.37,1200,4.37,1201,4.37,1202,4.37,1203,4.37,1204,4.37,1205,4.37,1206,5.643,1207,4.37,1208,4.37,1209,4.37,1210,4.37,1211,4.37,1212,5.643,1213,5.643,1214,4.37,1215,4.37,1216,4.37,1217,4.37,1218,4.37,1219,4.37,1220,4.37,1221,4.37,1222,4.37,1223,4.37,1224,4.37,1225,4.37,1226,4.37,1227,4.37,1228,4.37,1229,4.37,1230,4.37,1231,4.37,1232,4.37,1233,4.37,1234,4.37,1235,4.37,1236,4.37,1237,4.37,1238,4.37,1239,4.37,1240,4.37,1241,4.37,1242,4.37]],["title/modules.html",[91,1.885]],["body/modules.html",[26,0.015,87,0.015,88,0.015,90,3.409,91,1.827,95,3.138,96,3.138,97,3.138,98,3.138,99,3.138,179,2.399,372,2.912,373,2.549,374,2.549,375,2.718,1243,7.534,1244,7.534,1245,7.534,1246,7.534]],["title/overview.html",[1247,4.338]],["body/overview.html",[1,2.762,2,0.607,19,2.762,20,2.818,21,2.665,22,2.577,26,0.019,87,0.01,88,0.01,90,4.705,91,0.945,92,1.434,93,2.174,94,2.174,95,4.466,96,4.67,97,4.587,98,4.587,99,4.382,100,1.591,101,0.898,102,0.995,124,1.24,159,2.578,176,2.174,177,2.174,178,2.174,179,3.384,180,2.976,181,2.976,182,2.437,204,2.818,308,1.17,369,2.174,370,2.174,371,2.174,372,3.825,373,3.47,374,3.47,375,3.641,376,2.976,377,2.976,387,2.762,400,2.174,401,2.174,402,2.174,403,3.385,404,2.171,428,2.818,533,2.762,561,2.174,562,2.174,563,2.174,599,2.174,601,2.174,602,2.699,759,2.762,792,2.174,793,2.174,794,2.174,827,2.174,829,2.174,919,2.174,920,2.174,921,2.174,1004,2.174,1005,2.174,1006,2.174,1247,2.174,1248,2.531,1249,2.531,1250,2.531,1251,2.531]],["title/properties.html",[8,1.502,1081,2.651]],["body/properties.html",[8,1.92,26,0.018,87,0.016,88,0.016,499,3.961,1103,4.885,1148,4.885,1176,4.356,1177,4.885,1252,5.687,1253,5.687,1254,5.687]],["title/miscellaneous/variables.html",[1111,2.15,1255,3.821]],["body/miscellaneous/variables.html",[7,0.345,14,0.7,26,0.019,27,1.222,28,0.505,33,0.836,74,1.985,75,1.244,87,0.011,88,0.011,101,1.515,111,5.624,129,2.234,132,3.271,138,1.209,153,2.032,165,1.402,210,1.678,240,2.234,271,1.62,281,2.093,293,3.238,311,2.234,333,5.2,334,5.331,337,2.974,338,2.506,460,1.519,501,2.032,521,3.869,576,1.519,681,2.234,690,2.974,691,2.506,706,3.271,714,2.032,733,2.506,757,2.974,1049,2.506,1052,2.506,1053,3.668,1056,2.506,1057,3.668,1058,3.668,1059,3.668,1060,3.668,1061,2.506,1062,3.668,1067,2.506,1111,2.032,1116,2.506,1255,2.506,1256,2.917,1257,2.917,1258,5.56,1259,2.917,1260,2.917,1261,2.917,1262,2.917,1263,2.917,1264,5.051,1265,2.917,1266,2.917,1267,2.917,1268,2.917,1269,2.917,1270,2.917,1271,2.917,1272,2.917,1273,2.917,1274,6.548,1275,2.917,1276,2.917,1277,2.917,1278,2.917,1279,2.917,1280,2.917,1281,2.917,1282,2.917,1283,2.917,1284,2.917,1285,4.27,1286,2.917,1287,2.917,1288,2.917,1289,4.27,1290,2.917,1291,2.917,1292,2.917,1293,2.917,1294,2.917,1295,2.917,1296,2.917,1297,2.917,1298,2.917,1299,2.917,1300,2.917,1301,2.917,1302,2.917,1303,2.917,1304,2.917,1305,2.917,1306,5.56,1307,2.917,1308,2.917,1309,2.917,1310,2.917,1311,2.917,1312,2.917,1313,2.917,1314,2.917]]],"invertedIndex":[["",{"_index":26,"title":{},"body":{"injectables/AnnounceJob.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"interfaces/EmailOptInDto.html":{},"injectables/EmailService.html":{},"modules/EventModule.html":{},"injectables/GravatarService.html":{},"modules/HistoryDBModule.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/JwtUser.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"interfaces/LoginDto.html":{},"controllers/MovieController.html":{},"modules/MovieDBModule.html":{},"injectables/MovieDBService.html":{},"interfaces/MovieExtType.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"interfaces/PasswordDto.html":{},"interfaces/PasswordNewDto.html":{},"injectables/PasswordService.html":{},"injectables/PrismaService.html":{},"interfaces/ProfileDto.html":{},"interfaces/ResDto.html":{},"controllers/UserController.html":{},"modules/UserDBModule.html":{},"injectables/UserDBService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"modules/VoteDBModule.html":{},"injectables/VoteDBService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"modules/WatchListDBModule.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{},"interfaces/WatchlistExtType.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":425,"title":{},"body":{"injectables/HistoryDBService.html":{},"injectables/MovieService.html":{},"injectables/UserDBService.html":{},"coverage.html":{}}}],["0.1.13",{"_index":1106,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":1101,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1051,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1077,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":1066,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1069,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1065,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1070,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1063,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1068,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1073,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1064,"title":{},"body":{"coverage.html":{}}}],["1.0.0",{"_index":1103,"title":{},"body":{"dependencies.html":{},"properties.html":{}}}],["10",{"_index":696,"title":{},"body":{"injectables/PasswordService.html":{}}}],["10/10",{"_index":1076,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":1074,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["11",{"_index":1248,"title":{},"body":{"overview.html":{}}}],["14.6.0",{"_index":1094,"title":{},"body":{"dependencies.html":{}}}],["15",{"_index":1040,"title":{},"body":{"injectables/WatchListJob.html":{}}}],["16.0.1",{"_index":1096,"title":{},"body":{"dependencies.html":{}}}],["18.12.1",{"_index":1149,"title":{},"body":{"index.html":{}}}],["2.1.0",{"_index":1086,"title":{},"body":{"dependencies.html":{}}}],["2.1.8",{"_index":1093,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":1307,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2022",{"_index":1180,"title":{},"body":{"license.html":{}}}],["22",{"_index":1250,"title":{},"body":{"overview.html":{}}}],["3.0.0",{"_index":1087,"title":{},"body":{"dependencies.html":{}}}],["3.0.2",{"_index":1108,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":1249,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":1102,"title":{},"body":{"dependencies.html":{}}}],["4.1.1",{"_index":1092,"title":{},"body":{"dependencies.html":{}}}],["4.4.1",{"_index":1099,"title":{},"body":{"dependencies.html":{}}}],["4.5.0",{"_index":1088,"title":{},"body":{"dependencies.html":{}}}],["4.7.0",{"_index":1090,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":1308,"title":{},"body":{"miscellaneous/variables.html":{}}}],["5.0.1",{"_index":1089,"title":{},"body":{"dependencies.html":{}}}],["5.1.1",{"_index":1098,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":1078,"title":{},"body":{"coverage.html":{}}}],["500",{"_index":1309,"title":{},"body":{"miscellaneous/variables.html":{}}}],["6.8.0",{"_index":1100,"title":{},"body":{"dependencies.html":{}}}],["60000",{"_index":1027,"title":{},"body":{"injectables/WatchListJob.html":{}}}],["7",{"_index":1270,"title":{},"body":{"miscellaneous/variables.html":{}}}],["7.2.0",{"_index":1110,"title":{},"body":{"dependencies.html":{}}}],["7/7",{"_index":1075,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":1251,"title":{},"body":{"overview.html":{}}}],["9.0.0",{"_index":1082,"title":{},"body":{"dependencies.html":{}}}],["_count",{"_index":963,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["above",{"_index":1211,"title":{},"body":{"license.html":{}}}],["access_token",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{}}}],["account",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["action",{"_index":1236,"title":{},"body":{"license.html":{}}}],["add",{"_index":410,"title":{},"body":{"injectables/HistoryDBService.html":{},"controllers/MovieController.html":{},"injectables/MovieDBService.html":{},"injectables/VoteDBService.html":{},"injectables/WatchListDBService.html":{},"index.html":{}}}],["add(data",{"_index":415,"title":{},"body":{"injectables/HistoryDBService.html":{},"injectables/MovieDBService.html":{},"injectables/VoteDBService.html":{},"injectables/WatchListDBService.html":{}}}],["address",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["alert",{"_index":1290,"title":{},"body":{"miscellaneous/variables.html":{}}}],["alpha.4",{"_index":1252,"title":{},"body":{"properties.html":{}}}],["already",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["and/or",{"_index":1204,"title":{},"body":{"license.html":{}}}],["announce.job",{"_index":1030,"title":{},"body":{"injectables/WatchListJob.html":{}}}],["announce_discord",{"_index":11,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["announce_email",{"_index":12,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["announcejob",{"_index":1,"title":{"injectables/AnnounceJob.html":{}},"body":{"injectables/AnnounceJob.html":{},"modules/EventModule.html":{},"injectables/WatchListJob.html":{},"coverage.html":{},"overview.html":{}}}],["announcement",{"_index":365,"title":{},"body":{"injectables/EmailService.html":{}}}],["another",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{}}}],["api",{"_index":543,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{},"dependencies.html":{},"index.html":{}}}],["app",{"_index":706,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["app.close",{"_index":710,"title":{},"body":{"injectables/PrismaService.html":{}}}],["application",{"_index":1124,"title":{},"body":{"index.html":{}}}],["application/json",{"_index":1300,"title":{},"body":{"miscellaneous/variables.html":{}}}],["appmodule",{"_index":90,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["arising",{"_index":1240,"title":{},"body":{"license.html":{}}}],["around",{"_index":1142,"title":{},"body":{"index.html":{}}}],["associated",{"_index":1192,"title":{},"body":{"license.html":{}}}],["async",{"_index":14,"title":{},"body":{"injectables/AnnounceJob.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"injectables/EmailService.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MovieController.html":{},"injectables/MovieDBService.html":{},"injectables/MovieService.html":{},"injectables/PasswordService.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"injectables/VoteDBService.html":{},"injectables/VoteService.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{},"miscellaneous/variables.html":{}}}],["atmosphäre",{"_index":67,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["auch",{"_index":61,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["auf",{"_index":68,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["auth",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{},"injectables/EmailService.html":{}}}],["auth.controller",{"_index":189,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MovieController.html":{},"controllers/UserController.html":{},"controllers/VoteController.html":{}}}],["auth.guard.ts",{"_index":446,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["auth.service",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{}}}],["auth/jwt",{"_index":535,"title":{},"body":{"controllers/MovieController.html":{},"controllers/UserController.html":{},"controllers/VoteController.html":{}}}],["authcontroller",{"_index":123,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":447,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["authguard('jwt",{"_index":449,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('local",{"_index":472,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authmodule",{"_index":95,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1253,"title":{},"body":{"properties.html":{}}}],["authorization",{"_index":1301,"title":{},"body":{"miscellaneous/variables.html":{}}}],["authors",{"_index":1229,"title":{},"body":{"license.html":{}}}],["authservice",{"_index":159,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["automatic",{"_index":1141,"title":{},"body":{"index.html":{}}}],["await",{"_index":75,"title":{},"body":{"injectables/AnnounceJob.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/EmailService.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"injectables/LocalStrategy.html":{},"controllers/MovieController.html":{},"injectables/MovieDBService.html":{},"injectables/MovieService.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{},"injectables/VoteDBService.html":{},"injectables/VoteService.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{},"miscellaneous/variables.html":{}}}],["bcrypt",{"_index":690,"title":{},"body":{"injectables/PasswordService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["bcrypt.compare(password",{"_index":698,"title":{},"body":{"injectables/PasswordService.html":{}}}],["bcrypt.hash(password",{"_index":695,"title":{},"body":{"injectables/PasswordService.html":{}}}],["bearer",{"_index":733,"title":{},"body":{"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["body",{"_index":326,"title":{},"body":{"injectables/EmailService.html":{},"injectables/LoggerMiddleware.html":{},"controllers/UserController.html":{},"miscellaneous/functions.html":{}}}],["body.password",{"_index":777,"title":{},"body":{"controllers/UserController.html":{}}}],["body.password_old",{"_index":788,"title":{},"body":{"controllers/UserController.html":{}}}],["body.username",{"_index":784,"title":{},"body":{"controllers/UserController.html":{}}}],["boolean",{"_index":714,"title":{},"body":{"interfaces/ProfileDto.html":{},"interfaces/ResDto.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["boolean(body.email_opt_in",{"_index":774,"title":{},"body":{"controllers/UserController.html":{}}}],["bootstrap",{"_index":1072,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["browse",{"_index":1246,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1243,"title":{},"body":{"modules.html":{}}}],["build",{"_index":1163,"title":{},"body":{"index.html":{}}}],["c",{"_index":1179,"title":{},"body":{"license.html":{}}}],["call",{"_index":1055,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["call(route",{"_index":1115,"title":{},"body":{"miscellaneous/functions.html":{}}}],["catch",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MovieService.html":{},"injectables/VoteService.html":{}}}],["catch((e",{"_index":658,"title":{},"body":{"injectables/MovieService.html":{}}}],["challenge",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/EmailService.html":{},"injectables/UserService.html":{}}}],["challenge_url",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EmailService.html":{}}}],["challenge_url}\\n\\ndear\\n${this.project_name",{"_index":362,"title":{},"body":{"injectables/EmailService.html":{}}}],["change_password",{"_index":718,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["change_password(@user",{"_index":786,"title":{},"body":{"controllers/UserController.html":{}}}],["change_password(user",{"_index":724,"title":{},"body":{"controllers/UserController.html":{}}}],["change_password(user_id",{"_index":838,"title":{},"body":{"injectables/UserService.html":{}}}],["change_profile",{"_index":834,"title":{},"body":{"injectables/UserService.html":{}}}],["change_profile(user_id",{"_index":841,"title":{},"body":{"injectables/UserService.html":{}}}],["change_username",{"_index":719,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["change_username(@user",{"_index":782,"title":{},"body":{"controllers/UserController.html":{}}}],["change_username(user",{"_index":728,"title":{},"body":{"controllers/UserController.html":{}}}],["change_username(user_id",{"_index":843,"title":{},"body":{"injectables/UserService.html":{}}}],["charge",{"_index":1187,"title":{},"body":{"license.html":{}}}],["check",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["check.text",{"_index":1303,"title":{},"body":{"miscellaneous/variables.html":{}}}],["check_profile",{"_index":720,"title":{},"body":{"controllers/UserController.html":{}}}],["claim",{"_index":1232,"title":{},"body":{"license.html":{}}}],["class",{"_index":46,"title":{},"body":{"injectables/AnnounceJob.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"injectables/EmailService.html":{},"modules/EventModule.html":{},"injectables/GravatarService.html":{},"modules/HistoryDBModule.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"controllers/MovieController.html":{},"modules/MovieDBModule.html":{},"injectables/MovieDBService.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"injectables/PasswordService.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"modules/UserDBModule.html":{},"injectables/UserDBService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"modules/VoteDBModule.html":{},"injectables/VoteDBService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"modules/WatchListDBModule.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{}}}],["clean",{"_index":1133,"title":{},"body":{"index.html":{}}}],["clicking",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EmailService.html":{},"injectables/UserService.html":{}}}],["client",{"_index":622,"title":{},"body":{"injectables/MovieService.html":{},"index.html":{}}}],["client({apikey",{"_index":628,"title":{},"body":{"injectables/MovieService.html":{}}}],["client/.../api.ts",{"_index":1114,"title":{},"body":{"miscellaneous/functions.html":{}}}],["client/.../cookie.ts",{"_index":1258,"title":{},"body":{"miscellaneous/variables.html":{}}}],["client/.../main.ts",{"_index":1256,"title":{},"body":{"miscellaneous/variables.html":{}}}],["client/.../router.ts",{"_index":1260,"title":{},"body":{"miscellaneous/variables.html":{}}}],["client/.../store.ts",{"_index":1261,"title":{},"body":{"miscellaneous/variables.html":{}}}],["client/dist",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["client/src/main.ts",{"_index":1049,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["client/src/router/router.ts",{"_index":1052,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["client/src/util/api.ts",{"_index":1054,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["client/src/util/cookie.ts",{"_index":1056,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["client/src/util/store.ts",{"_index":1061,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["cluster_appmodule",{"_index":93,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":94,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":176,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":178,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":177,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_eventmodule",{"_index":369,"title":{},"body":{"modules/EventModule.html":{},"overview.html":{}}}],["cluster_eventmodule_imports",{"_index":371,"title":{},"body":{"modules/EventModule.html":{},"overview.html":{}}}],["cluster_eventmodule_providers",{"_index":370,"title":{},"body":{"modules/EventModule.html":{},"overview.html":{}}}],["cluster_historydbmodule",{"_index":400,"title":{},"body":{"modules/HistoryDBModule.html":{},"overview.html":{}}}],["cluster_historydbmodule_exports",{"_index":402,"title":{},"body":{"modules/HistoryDBModule.html":{},"overview.html":{}}}],["cluster_historydbmodule_providers",{"_index":401,"title":{},"body":{"modules/HistoryDBModule.html":{},"overview.html":{}}}],["cluster_moviedbmodule",{"_index":561,"title":{},"body":{"modules/MovieDBModule.html":{},"overview.html":{}}}],["cluster_moviedbmodule_exports",{"_index":563,"title":{},"body":{"modules/MovieDBModule.html":{},"overview.html":{}}}],["cluster_moviedbmodule_providers",{"_index":562,"title":{},"body":{"modules/MovieDBModule.html":{},"overview.html":{}}}],["cluster_moviemodule",{"_index":599,"title":{},"body":{"modules/MovieModule.html":{},"overview.html":{}}}],["cluster_moviemodule_imports",{"_index":600,"title":{},"body":{"modules/MovieModule.html":{}}}],["cluster_moviemodule_providers",{"_index":601,"title":{},"body":{"modules/MovieModule.html":{},"overview.html":{}}}],["cluster_userdbmodule",{"_index":792,"title":{},"body":{"modules/UserDBModule.html":{},"overview.html":{}}}],["cluster_userdbmodule_exports",{"_index":794,"title":{},"body":{"modules/UserDBModule.html":{},"overview.html":{}}}],["cluster_userdbmodule_providers",{"_index":793,"title":{},"body":{"modules/UserDBModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":827,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_imports",{"_index":828,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":829,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_votedbmodule",{"_index":919,"title":{},"body":{"modules/VoteDBModule.html":{},"overview.html":{}}}],["cluster_votedbmodule_exports",{"_index":920,"title":{},"body":{"modules/VoteDBModule.html":{},"overview.html":{}}}],["cluster_votedbmodule_providers",{"_index":921,"title":{},"body":{"modules/VoteDBModule.html":{},"overview.html":{}}}],["cluster_votemodule",{"_index":970,"title":{},"body":{"modules/VoteModule.html":{}}}],["cluster_votemodule_imports",{"_index":972,"title":{},"body":{"modules/VoteModule.html":{}}}],["cluster_votemodule_providers",{"_index":971,"title":{},"body":{"modules/VoteModule.html":{}}}],["cluster_watchlistdbmodule",{"_index":1004,"title":{},"body":{"modules/WatchListDBModule.html":{},"overview.html":{}}}],["cluster_watchlistdbmodule_exports",{"_index":1005,"title":{},"body":{"modules/WatchListDBModule.html":{},"overview.html":{}}}],["cluster_watchlistdbmodule_providers",{"_index":1006,"title":{},"body":{"modules/WatchListDBModule.html":{},"overview.html":{}}}],["code",{"_index":1153,"title":{},"body":{"index.html":{}}}],["command",{"_index":1166,"title":{},"body":{"index.html":{}}}],["common/db_services/histroy/historydb.module",{"_index":609,"title":{},"body":{"modules/MovieModule.html":{}}}],["common/db_services/histroy/historydb.service",{"_index":625,"title":{},"body":{"injectables/MovieService.html":{}}}],["common/db_services/movies/moviedb.module",{"_index":606,"title":{},"body":{"modules/MovieModule.html":{},"modules/UserModule.html":{},"modules/VoteModule.html":{}}}],["common/db_services/movies/moviedb.service",{"_index":623,"title":{},"body":{"injectables/MovieService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["common/db_services/prisma.service",{"_index":605,"title":{},"body":{"modules/MovieModule.html":{},"modules/VoteModule.html":{}}}],["common/db_services/users/userdb.module",{"_index":185,"title":{},"body":{"modules/AuthModule.html":{},"modules/MovieModule.html":{},"modules/UserModule.html":{},"modules/VoteModule.html":{}}}],["common/db_services/users/userdb.service",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MovieService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["common/db_services/votes/votedb.module",{"_index":607,"title":{},"body":{"modules/MovieModule.html":{},"modules/UserModule.html":{},"modules/VoteModule.html":{}}}],["common/db_services/votes/votedb.service",{"_index":624,"title":{},"body":{"injectables/MovieService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["common/db_services/watchlist/watchlistdb.module",{"_index":610,"title":{},"body":{"modules/MovieModule.html":{},"modules/UserModule.html":{}}}],["common/db_services/watchlist/watchlistdb.service",{"_index":626,"title":{},"body":{"injectables/MovieService.html":{},"injectables/UserService.html":{}}}],["common/decorators/user.decorator",{"_index":536,"title":{},"body":{"controllers/MovieController.html":{},"controllers/UserController.html":{},"controllers/VoteController.html":{}}}],["common/event_service/event.module",{"_index":114,"title":{},"body":{"modules/AppModule.html":{}}}],["common/util_services/email.service",{"_index":193,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["common/util_services/gravatar.service",{"_index":832,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["common/util_services/password.service",{"_index":194,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["compare",{"_index":682,"title":{},"body":{"injectables/PasswordService.html":{}}}],["compare(password",{"_index":684,"title":{},"body":{"injectables/PasswordService.html":{}}}],["component",{"_index":1274,"title":{},"body":{"miscellaneous/variables.html":{}}}],["conditions",{"_index":1210,"title":{},"body":{"license.html":{}}}],["configuration",{"_index":1158,"title":{},"body":{"index.html":{}}}],["confirm",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/EmailService.html":{},"injectables/UserService.html":{}}}],["confirm(@param('challenge",{"_index":169,"title":{},"body":{"controllers/AuthController.html":{}}}],["confirm(challenge",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["confirmation",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{}}}],["conflictexception",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MovieService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["conflictexception(\"email",{"_index":877,"title":{},"body":{"injectables/UserService.html":{}}}],["conflictexception('e",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{}}}],["conflictexception('movie",{"_index":643,"title":{},"body":{"injectables/MovieService.html":{}}}],["conflictexception('vote",{"_index":999,"title":{},"body":{"injectables/VoteService.html":{}}}],["conflictexception('you",{"_index":1000,"title":{},"body":{"injectables/VoteService.html":{}}}],["conflictexception(`you",{"_index":992,"title":{},"body":{"injectables/VoteService.html":{}}}],["connect",{"_index":651,"title":{},"body":{"injectables/MovieService.html":{},"injectables/VoteService.html":{},"injectables/WatchListJob.html":{}}}],["connection",{"_index":1241,"title":{},"body":{"license.html":{}}}],["console.log",{"_index":492,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["console.log(\"announce",{"_index":71,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["console.log('history",{"_index":435,"title":{},"body":{"injectables/HistoryJob.html":{}}}],["console.log('request",{"_index":493,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["console.log('watchlist",{"_index":1032,"title":{},"body":{"injectables/WatchListJob.html":{}}}],["console.log(req.body",{"_index":494,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["const",{"_index":74,"title":{},"body":{"injectables/AnnounceJob.html":{},"injectables/AuthService.html":{},"injectables/EmailService.html":{},"injectables/GravatarService.html":{},"injectables/HistoryJob.html":{},"injectables/LocalStrategy.html":{},"injectables/MovieService.html":{},"injectables/PasswordService.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"injectables/WatchListJob.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":17,"title":{},"body":{"injectables/AnnounceJob.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"injectables/EmailService.html":{},"injectables/GravatarService.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MovieDBService.html":{},"injectables/MovieService.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{},"injectables/VoteDBService.html":{},"injectables/VoteService.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{}}}],["constructor(authservice",{"_index":474,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(discordservice",{"_index":18,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["constructor(moviedbservice",{"_index":427,"title":{},"body":{"injectables/HistoryJob.html":{},"injectables/MovieService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["constructor(passwordservice",{"_index":390,"title":{},"body":{"injectables/GravatarService.html":{}}}],["constructor(prisma",{"_index":412,"title":{},"body":{"injectables/HistoryDBService.html":{},"injectables/MovieDBService.html":{},"injectables/UserDBService.html":{},"injectables/VoteDBService.html":{},"injectables/WatchListDBService.html":{}}}],["constructor(private",{"_index":47,"title":{},"body":{"injectables/AnnounceJob.html":{},"controllers/AuthController.html":{},"injectables/EmailService.html":{},"injectables/GravatarService.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"injectables/LocalStrategy.html":{},"controllers/MovieController.html":{},"injectables/MovieDBService.html":{},"injectables/MovieService.html":{},"controllers/UserController.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"injectables/VoteDBService.html":{},"injectables/VoteService.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{}}}],["constructor(userdbservice",{"_index":203,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EmailService.html":{}}}],["constructor(votedbservice",{"_index":1021,"title":{},"body":{"injectables/WatchListJob.html":{}}}],["contact",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{}}}],["content",{"_index":1299,"title":{},"body":{"miscellaneous/variables.html":{}}}],["contract",{"_index":1237,"title":{},"body":{"license.html":{}}}],["controller",{"_index":122,"title":{"controllers/AuthController.html":{},"controllers/MovieController.html":{},"controllers/UserController.html":{},"controllers/VoteController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/MovieController.html":{},"controllers/UserController.html":{},"controllers/VoteController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('movie",{"_index":546,"title":{},"body":{"controllers/MovieController.html":{}}}],["controller('user",{"_index":766,"title":{},"body":{"controllers/UserController.html":{}}}],["controller('vote",{"_index":909,"title":{},"body":{"controllers/VoteController.html":{}}}],["controllers",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/MovieController.html":{},"modules/MovieModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"controllers/VoteController.html":{},"modules/VoteModule.html":{},"overview.html":{}}}],["cookies.get",{"_index":1266,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cookies.get(key",{"_index":1265,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cookies.remove(key",{"_index":1267,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cookies.set(key",{"_index":1268,"title":{},"body":{"miscellaneous/variables.html":{}}}],["copies",{"_index":1206,"title":{},"body":{"license.html":{}}}],["copy",{"_index":1190,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":1178,"title":{},"body":{"license.html":{}}}],["count",{"_index":946,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["coverage",{"_index":1045,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserDBService.html":{}}}],["create(data",{"_index":802,"title":{},"body":{"injectables/UserDBService.html":{}}}],["createapp(app",{"_index":1263,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createdat",{"_index":594,"title":{},"body":{"interfaces/MovieExtType.html":{},"injectables/MovieService.html":{}}}],["createparamdecorator",{"_index":1310,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createrouter",{"_index":1271,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createwebhistory(import.meta.env.base_url",{"_index":1272,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cron",{"_index":430,"title":{},"body":{"injectables/HistoryJob.html":{},"injectables/WatchListJob.html":{},"dependencies.html":{}}}],["cron(process.env.schedule_history",{"_index":434,"title":{},"body":{"injectables/HistoryJob.html":{}}}],["cron(process.env.schedule_watchlist",{"_index":1031,"title":{},"body":{"injectables/WatchListJob.html":{}}}],["crypto",{"_index":693,"title":{},"body":{"injectables/PasswordService.html":{},"dependencies.html":{}}}],["ctx",{"_index":1311,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":1313,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cuid",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["damages",{"_index":1233,"title":{},"body":{"license.html":{}}}],["data",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"controllers/MovieController.html":{},"injectables/MovieDBService.html":{},"controllers/UserController.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{},"injectables/VoteDBService.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{},"miscellaneous/variables.html":{}}}],["data.hasownproperty(\"use_gravatar",{"_index":863,"title":{},"body":{"injectables/UserService.html":{}}}],["data.name",{"_index":862,"title":{},"body":{"injectables/UserService.html":{}}}],["data.password",{"_index":821,"title":{},"body":{"injectables/UserDBService.html":{}}}],["data.use_gravatar",{"_index":864,"title":{},"body":{"injectables/UserService.html":{}}}],["data_to_update",{"_index":861,"title":{},"body":{"injectables/UserService.html":{}}}],["data_to_update[\"gravatar_url",{"_index":866,"title":{},"body":{"injectables/UserService.html":{}}}],["data_to_update[\"use_gravatar",{"_index":865,"title":{},"body":{"injectables/UserService.html":{}}}],["database",{"_index":513,"title":{},"body":{"controllers/MovieController.html":{}}}],["date",{"_index":598,"title":{},"body":{"interfaces/MovieExtType.html":{},"interfaces/WatchlistExtType.html":{}}}],["date(start_time.gettime",{"_index":1041,"title":{},"body":{"injectables/WatchListJob.html":{}}}],["db_services/histroy/historydb.module",{"_index":384,"title":{},"body":{"modules/EventModule.html":{}}}],["db_services/histroy/historydb.service",{"_index":432,"title":{},"body":{"injectables/HistoryJob.html":{}}}],["db_services/movies/moviedb.module",{"_index":381,"title":{},"body":{"modules/EventModule.html":{}}}],["db_services/movies/moviedb.service",{"_index":41,"title":{},"body":{"injectables/AnnounceJob.html":{},"injectables/HistoryJob.html":{},"injectables/WatchListJob.html":{}}}],["db_services/users/userdb.module",{"_index":386,"title":{},"body":{"modules/EventModule.html":{}}}],["db_services/users/userdb.service",{"_index":340,"title":{},"body":{"injectables/EmailService.html":{}}}],["db_services/votes/votedb.module",{"_index":383,"title":{},"body":{"modules/EventModule.html":{}}}],["db_services/votes/votedb.service",{"_index":433,"title":{},"body":{"injectables/HistoryJob.html":{},"injectables/WatchListJob.html":{}}}],["db_services/watchlist/watchlistdb.module",{"_index":382,"title":{},"body":{"modules/EventModule.html":{}}}],["db_services/watchlist/watchlistdb.service",{"_index":40,"title":{},"body":{"injectables/AnnounceJob.html":{},"injectables/HistoryJob.html":{},"injectables/WatchListJob.html":{}}}],["deal",{"_index":1194,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":1242,"title":{},"body":{"license.html":{}}}],["dear\\n${this.project_name",{"_index":359,"title":{},"body":{"injectables/EmailService.html":{}}}],["decorators",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{},"injectables/HistoryJob.html":{},"controllers/MovieController.html":{},"controllers/UserController.html":{},"controllers/VoteController.html":{},"injectables/WatchListJob.html":{}}}],["default",{"_index":333,"title":{},"body":{"injectables/EmailService.html":{},"injectables/WatchListJob.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":23,"title":{},"body":{"injectables/AnnounceJob.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"injectables/EmailService.html":{},"injectables/GravatarService.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"controllers/MovieController.html":{},"injectables/MovieDBService.html":{},"injectables/MovieService.html":{},"injectables/PasswordService.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"injectables/VoteDBService.html":{},"injectables/VoteService.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{}}}],["delete",{"_index":511,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieDBService.html":{},"injectables/MovieService.html":{},"controllers/UserController.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"injectables/VoteDBService.html":{},"injectables/WatchListDBService.html":{}}}],["delete(':imdb_id",{"_index":558,"title":{},"body":{"controllers/MovieController.html":{},"controllers/VoteController.html":{}}}],["delete(@user",{"_index":775,"title":{},"body":{"controllers/UserController.html":{}}}],["delete(data",{"_index":935,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["delete(imdb_id",{"_index":573,"title":{},"body":{"injectables/MovieDBService.html":{},"injectables/MovieService.html":{},"injectables/WatchListDBService.html":{}}}],["delete(user",{"_index":736,"title":{},"body":{"controllers/UserController.html":{}}}],["delete(user_id",{"_index":846,"title":{},"body":{"injectables/UserService.html":{}}}],["delete(where",{"_index":804,"title":{},"body":{"injectables/UserDBService.html":{}}}],["delete_all",{"_index":925,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["delete_all(imdb_id",{"_index":938,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["delete_all_proposed",{"_index":567,"title":{},"body":{"injectables/MovieDBService.html":{}}}],["delete_all_proposed(user_id",{"_index":575,"title":{},"body":{"injectables/MovieDBService.html":{}}}],["delete_all_user",{"_index":926,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["delete_all_user(user_id",{"_index":940,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["delete_media",{"_index":502,"title":{},"body":{"controllers/MovieController.html":{}}}],["delete_media(@user",{"_index":559,"title":{},"body":{"controllers/MovieController.html":{}}}],["delete_media(user",{"_index":508,"title":{},"body":{"controllers/MovieController.html":{}}}],["deleted",{"_index":665,"title":{},"body":{"injectables/MovieService.html":{},"injectables/UserService.html":{}}}],["dependencies",{"_index":92,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventModule.html":{},"modules/HistoryDBModule.html":{},"modules/MovieDBModule.html":{},"modules/MovieModule.html":{},"modules/UserDBModule.html":{},"modules/UserModule.html":{},"modules/VoteDBModule.html":{},"modules/VoteModule.html":{},"modules/WatchListDBModule.html":{},"dependencies.html":{},"overview.html":{}}}],["desc",{"_index":965,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["description",{"_index":499,"title":{},"body":{"controllers/MovieController.html":{},"controllers/UserController.html":{},"controllers/VoteController.html":{},"properties.html":{}}}],["dest_mail",{"_index":330,"title":{},"body":{"injectables/EmailService.html":{}}}],["dev",{"_index":1168,"title":{},"body":{"index.html":{}}}],["die",{"_index":50,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["diese",{"_index":54,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["discord.js",{"_index":301,"title":{},"body":{"injectables/DiscordService.html":{},"dependencies.html":{}}}],["discordservice",{"_index":19,"title":{"injectables/DiscordService.html":{}},"body":{"injectables/AnnounceJob.html":{},"injectables/DiscordService.html":{},"modules/EventModule.html":{},"coverage.html":{},"overview.html":{}}}],["distribute",{"_index":1202,"title":{},"body":{"license.html":{}}}],["docs",{"_index":1173,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":1046,"title":{},"body":{"coverage.html":{},"index.html":{},"license.html":{}}}],["dotenv",{"_index":1095,"title":{},"body":{"dependencies.html":{}}}],["download",{"_index":1151,"title":{},"body":{"index.html":{}}}],["durch",{"_index":53,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["e",{"_index":631,"title":{},"body":{"injectables/MovieService.html":{},"injectables/VoteService.html":{}}}],["e.g",{"_index":1167,"title":{},"body":{"index.html":{}}}],["elias",{"_index":1181,"title":{},"body":{"license.html":{}}}],["eliasschaut",{"_index":1254,"title":{},"body":{"properties.html":{}}}],["email",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EmailService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"index.html":{}}}],["email_opt_in",{"_index":310,"title":{},"body":{"interfaces/EmailOptInDto.html":{},"controllers/UserController.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{}}}],["email_opt_in(@user",{"_index":772,"title":{},"body":{"controllers/UserController.html":{}}}],["email_opt_in(user",{"_index":739,"title":{},"body":{"controllers/UserController.html":{}}}],["email_opt_in(user_id",{"_index":848,"title":{},"body":{"injectables/UserService.html":{}}}],["emailoptindto",{"_index":307,"title":{"interfaces/EmailOptInDto.html":{}},"body":{"interfaces/EmailOptInDto.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["emailservice",{"_index":22,"title":{"injectables/EmailService.html":{}},"body":{"injectables/AnnounceJob.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/EmailService.html":{},"modules/EventModule.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["enableshutdownhooks",{"_index":701,"title":{},"body":{"injectables/PrismaService.html":{}}}],["enableshutdownhooks(app",{"_index":703,"title":{},"body":{"injectables/PrismaService.html":{}}}],["env",{"_index":1155,"title":{},"body":{"index.html":{}}}],["env.tmp",{"_index":1156,"title":{},"body":{"index.html":{}}}],["error",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{}}}],["es",{"_index":63,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["event",{"_index":1228,"title":{},"body":{"license.html":{}}}],["eventmodule",{"_index":96,"title":{"modules/EventModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EventModule.html":{},"modules.html":{},"overview.html":{}}}],["events",{"_index":1127,"title":{},"body":{"index.html":{}}}],["executioncontext",{"_index":1312,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exist",{"_index":1003,"title":{},"body":{"injectables/VoteService.html":{}}}],["exists",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MovieService.html":{},"injectables/VoteService.html":{}}}],["expires",{"_index":1269,"title":{},"body":{"miscellaneous/variables.html":{}}}],["expiresin",{"_index":199,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":45,"title":{},"body":{"injectables/AnnounceJob.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"interfaces/EmailOptInDto.html":{},"injectables/EmailService.html":{},"modules/EventModule.html":{},"injectables/GravatarService.html":{},"modules/HistoryDBModule.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/JwtUser.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"interfaces/LoginDto.html":{},"controllers/MovieController.html":{},"modules/MovieDBModule.html":{},"injectables/MovieDBService.html":{},"interfaces/MovieExtType.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"interfaces/PasswordDto.html":{},"interfaces/PasswordNewDto.html":{},"injectables/PasswordService.html":{},"injectables/PrismaService.html":{},"interfaces/ProfileDto.html":{},"interfaces/ResDto.html":{},"controllers/UserController.html":{},"modules/UserDBModule.html":{},"injectables/UserDBService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"modules/VoteDBModule.html":{},"injectables/VoteDBService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"modules/WatchListDBModule.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{},"interfaces/WatchlistExtType.html":{}}}],["exports",{"_index":406,"title":{},"body":{"modules/HistoryDBModule.html":{},"modules/MovieDBModule.html":{},"modules/UserDBModule.html":{},"modules/VoteDBModule.html":{},"modules/WatchListDBModule.html":{}}}],["express",{"_index":1085,"title":{},"body":{"dependencies.html":{},"license.html":{}}}],["extends",{"_index":448,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{}}}],["extractjwt",{"_index":455,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":465,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["false",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EmailService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["features",{"_index":1128,"title":{},"body":{"index.html":{}}}],["fetch(\"/api/user/check",{"_index":1297,"title":{},"body":{"miscellaneous/variables.html":{}}}],["file",{"_index":5,"title":{},"body":{"injectables/AnnounceJob.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"interfaces/EmailOptInDto.html":{},"injectables/EmailService.html":{},"modules/EventModule.html":{},"injectables/GravatarService.html":{},"modules/HistoryDBModule.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/JwtUser.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"interfaces/LoginDto.html":{},"controllers/MovieController.html":{},"modules/MovieDBModule.html":{},"injectables/MovieDBService.html":{},"interfaces/MovieExtType.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"interfaces/PasswordDto.html":{},"interfaces/PasswordNewDto.html":{},"injectables/PasswordService.html":{},"injectables/PrismaService.html":{},"interfaces/ProfileDto.html":{},"interfaces/ResDto.html":{},"controllers/UserController.html":{},"modules/UserDBModule.html":{},"injectables/UserDBService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"modules/VoteDBModule.html":{},"injectables/VoteDBService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"modules/WatchListDBModule.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{},"interfaces/WatchlistExtType.html":{},"coverage.html":{},"index.html":{}}}],["files",{"_index":1193,"title":{},"body":{"license.html":{}}}],["filme",{"_index":55,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["find",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{}}}],["fitness",{"_index":1224,"title":{},"body":{"license.html":{}}}],["folder",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["following",{"_index":357,"title":{},"body":{"injectables/EmailService.html":{},"license.html":{}}}],["forbiddenexception",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["forbiddenexception(\"invalid",{"_index":875,"title":{},"body":{"injectables/UserService.html":{}}}],["forbiddenexception(\"you",{"_index":887,"title":{},"body":{"injectables/UserService.html":{}}}],["forbiddenexception('email",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{}}}],["forbiddenexception('invalid",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{}}}],["found",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MovieService.html":{}}}],["free",{"_index":1186,"title":{},"body":{"license.html":{}}}],["full",{"_index":1121,"title":{},"body":{"index.html":{}}}],["function",{"_index":489,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"coverage.html":{}}}],["functions",{"_index":1112,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":1209,"title":{},"body":{"license.html":{}}}],["generate_challenge_url",{"_index":314,"title":{},"body":{"injectables/EmailService.html":{}}}],["generate_challenge_url(challenge",{"_index":320,"title":{},"body":{"injectables/EmailService.html":{}}}],["generate_gravatar_url",{"_index":389,"title":{},"body":{"injectables/GravatarService.html":{}}}],["generate_gravatar_url(username",{"_index":392,"title":{},"body":{"injectables/GravatarService.html":{}}}],["generate_pw_challenge_url",{"_index":315,"title":{},"body":{"injectables/EmailService.html":{}}}],["generate_pw_challenge_url(challenge",{"_index":322,"title":{},"body":{"injectables/EmailService.html":{}}}],["generate_type(http_code",{"_index":1305,"title":{},"body":{"miscellaneous/variables.html":{}}}],["genre",{"_index":595,"title":{},"body":{"interfaces/MovieExtType.html":{},"injectables/MovieService.html":{}}}],["geschaut:\\n${watchlist.join(\"\\n\")}\\n",{"_index":57,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["get(':imdb_id",{"_index":551,"title":{},"body":{"controllers/MovieController.html":{},"controllers/VoteController.html":{}}}],["get(':user_id",{"_index":752,"title":{},"body":{"controllers/UserController.html":{}}}],["get('all",{"_index":515,"title":{},"body":{"controllers/MovieController.html":{}}}],["get('check",{"_index":789,"title":{},"body":{"controllers/UserController.html":{}}}],["get('confirm/:challenge",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('data",{"_index":778,"title":{},"body":{"controllers/UserController.html":{}}}],["get('history",{"_index":519,"title":{},"body":{"controllers/MovieController.html":{}}}],["get('reset/:username",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('watchlist",{"_index":527,"title":{},"body":{"controllers/MovieController.html":{}}}],["get(@user",{"_index":767,"title":{},"body":{"controllers/UserController.html":{}}}],["get(data",{"_index":942,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["get(imdb_id",{"_index":579,"title":{},"body":{"injectables/MovieDBService.html":{},"injectables/MovieService.html":{}}}],["get(user",{"_index":744,"title":{},"body":{"controllers/UserController.html":{}}}],["get(user_id",{"_index":851,"title":{},"body":{"injectables/UserService.html":{}}}],["get(userwhereuniqueinput",{"_index":807,"title":{},"body":{"injectables/UserDBService.html":{}}}],["get_all",{"_index":411,"title":{},"body":{"injectables/HistoryDBService.html":{},"injectables/MovieDBService.html":{},"injectables/MovieService.html":{},"injectables/UserDBService.html":{},"injectables/WatchListDBService.html":{}}}],["get_all_media",{"_index":503,"title":{},"body":{"controllers/MovieController.html":{}}}],["get_all_opt_in",{"_index":799,"title":{},"body":{"injectables/UserDBService.html":{}}}],["get_all_proposed",{"_index":568,"title":{},"body":{"injectables/MovieDBService.html":{}}}],["get_all_proposed(user_id",{"_index":582,"title":{},"body":{"injectables/MovieDBService.html":{}}}],["get_cookie",{"_index":1057,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["get_cookie(\"access_token",{"_index":1302,"title":{},"body":{"miscellaneous/variables.html":{}}}],["get_cookie_all",{"_index":1058,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["get_data",{"_index":721,"title":{},"body":{"controllers/UserController.html":{}}}],["get_data(@user",{"_index":779,"title":{},"body":{"controllers/UserController.html":{}}}],["get_data(user",{"_index":747,"title":{},"body":{"controllers/UserController.html":{}}}],["get_history",{"_index":504,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{}}}],["get_imdb",{"_index":569,"title":{},"body":{"injectables/MovieDBService.html":{}}}],["get_imdb(imdb_id",{"_index":584,"title":{},"body":{"injectables/MovieDBService.html":{}}}],["get_media",{"_index":505,"title":{},"body":{"controllers/MovieController.html":{}}}],["get_media(@param('imdb_id",{"_index":552,"title":{},"body":{"controllers/MovieController.html":{}}}],["get_media(imdb_id",{"_index":522,"title":{},"body":{"controllers/MovieController.html":{}}}],["get_most_voted",{"_index":927,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["get_most_voted(count",{"_index":944,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["get_num_of_votes",{"_index":928,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["get_num_of_votes(imdb_id",{"_index":947,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["get_public",{"_index":835,"title":{},"body":{"injectables/UserService.html":{}}}],["get_public(user_id",{"_index":853,"title":{},"body":{"injectables/UserService.html":{}}}],["get_user",{"_index":722,"title":{},"body":{"controllers/UserController.html":{}}}],["get_user(@param('user_id",{"_index":790,"title":{},"body":{"controllers/UserController.html":{}}}],["get_user(user_id",{"_index":751,"title":{},"body":{"controllers/UserController.html":{}}}],["get_user_data",{"_index":836,"title":{},"body":{"injectables/UserService.html":{}}}],["get_user_data(user_id",{"_index":855,"title":{},"body":{"injectables/UserService.html":{}}}],["get_vote",{"_index":894,"title":{},"body":{"controllers/VoteController.html":{}}}],["get_vote(@param('imdb_id",{"_index":912,"title":{},"body":{"controllers/VoteController.html":{}}}],["get_vote(imdb_id",{"_index":898,"title":{},"body":{"controllers/VoteController.html":{}}}],["get_votes",{"_index":895,"title":{},"body":{"controllers/VoteController.html":{},"injectables/VoteService.html":{}}}],["get_votes(@user",{"_index":910,"title":{},"body":{"controllers/VoteController.html":{}}}],["get_votes(imdb_id",{"_index":977,"title":{},"body":{"injectables/VoteService.html":{}}}],["get_votes(user",{"_index":900,"title":{},"body":{"controllers/VoteController.html":{}}}],["get_votes_movie",{"_index":929,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["get_votes_movie(imdb_id",{"_index":949,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["get_votes_user",{"_index":930,"title":{},"body":{"injectables/VoteDBService.html":{},"injectables/VoteService.html":{}}}],["get_votes_user(user_id",{"_index":951,"title":{},"body":{"injectables/VoteDBService.html":{},"injectables/VoteService.html":{}}}],["get_watchlist",{"_index":506,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{}}}],["getränke",{"_index":65,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["getting",{"_index":986,"title":{"index.html":{},"license.html":{}},"body":{"injectables/VoteService.html":{}}}],["gibt",{"_index":64,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["given",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{},"controllers/MovieController.html":{},"controllers/UserController.html":{},"controllers/VoteController.html":{}}}],["granted",{"_index":1185,"title":{},"body":{"license.html":{}}}],["gravatar",{"_index":758,"title":{},"body":{"controllers/UserController.html":{}}}],["gravatar_url",{"_index":857,"title":{},"body":{"injectables/UserService.html":{}}}],["gravatarservice",{"_index":387,"title":{"injectables/GravatarService.html":{}},"body":{"injectables/GravatarService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["has(imdb_id",{"_index":419,"title":{},"body":{"injectables/HistoryDBService.html":{}}}],["has(user_id",{"_index":953,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["has_user",{"_index":800,"title":{},"body":{"injectables/UserDBService.html":{}}}],["has_user(username",{"_index":812,"title":{},"body":{"injectables/UserDBService.html":{}}}],["hash",{"_index":397,"title":{},"body":{"injectables/GravatarService.html":{},"injectables/PasswordService.html":{}}}],["hash(password",{"_index":686,"title":{},"body":{"injectables/PasswordService.html":{}}}],["hash_md5",{"_index":683,"title":{},"body":{"injectables/PasswordService.html":{}}}],["hash_md5(string",{"_index":688,"title":{},"body":{"injectables/PasswordService.html":{}}}],["hashed_password",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{}}}],["headers",{"_index":1298,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hello",{"_index":355,"title":{},"body":{"injectables/EmailService.html":{}}}],["helmet",{"_index":1097,"title":{},"body":{"dependencies.html":{}}}],["hereby",{"_index":1184,"title":{},"body":{"license.html":{}}}],["history",{"_index":521,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{},"miscellaneous/variables.html":{}}}],["historydb.service",{"_index":407,"title":{},"body":{"modules/HistoryDBModule.html":{}}}],["historydbmodule",{"_index":372,"title":{"modules/HistoryDBModule.html":{}},"body":{"modules/EventModule.html":{},"modules/HistoryDBModule.html":{},"modules/MovieModule.html":{},"modules.html":{},"overview.html":{}}}],["historydbservice",{"_index":403,"title":{"injectables/HistoryDBService.html":{}},"body":{"modules/HistoryDBModule.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"injectables/MovieService.html":{},"coverage.html":{},"overview.html":{}}}],["historyjob",{"_index":376,"title":{"injectables/HistoryJob.html":{}},"body":{"modules/EventModule.html":{},"injectables/HistoryJob.html":{},"coverage.html":{},"overview.html":{}}}],["historyview",{"_index":1284,"title":{},"body":{"miscellaneous/variables.html":{}}}],["histroydbservice",{"_index":613,"title":{},"body":{"injectables/MovieService.html":{}}}],["holders",{"_index":1230,"title":{},"body":{"license.html":{}}}],["home",{"_index":1273,"title":{},"body":{"miscellaneous/variables.html":{}}}],["homeview",{"_index":1275,"title":{},"body":{"miscellaneous/variables.html":{}}}],["host",{"_index":343,"title":{},"body":{"injectables/EmailService.html":{}}}],["http_code",{"_index":1306,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://www.gravatar.com/avatar/${hash",{"_index":399,"title":{},"body":{"injectables/GravatarService.html":{}}}],["id",{"_index":468,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/JwtUser.html":{},"injectables/MovieService.html":{},"injectables/UserService.html":{},"injectables/VoteDBService.html":{},"injectables/VoteService.html":{}}}],["identifier",{"_index":1047,"title":{},"body":{"coverage.html":{}}}],["ignoreexpiration",{"_index":466,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["imdb",{"_index":542,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{},"dependencies.html":{}}}],["imdb_id",{"_index":421,"title":{},"body":{"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"controllers/MovieController.html":{},"injectables/MovieDBService.html":{},"interfaces/MovieExtType.html":{},"injectables/MovieService.html":{},"controllers/VoteController.html":{},"injectables/VoteDBService.html":{},"injectables/VoteService.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{},"interfaces/WatchlistExtType.html":{}}}],["imdb_id_user_id",{"_index":1001,"title":{},"body":{"injectables/VoteService.html":{}}}],["imdb_ids",{"_index":902,"title":{},"body":{"controllers/VoteController.html":{}}}],["implements",{"_index":491,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/PrismaService.html":{}}}],["implied",{"_index":1220,"title":{},"body":{"license.html":{}}}],["import",{"_index":37,"title":{},"body":{"injectables/AnnounceJob.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"injectables/EmailService.html":{},"modules/EventModule.html":{},"injectables/GravatarService.html":{},"modules/HistoryDBModule.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"controllers/MovieController.html":{},"modules/MovieDBModule.html":{},"injectables/MovieDBService.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"injectables/PasswordService.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"modules/UserDBModule.html":{},"injectables/UserDBService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"modules/VoteDBModule.html":{},"injectables/VoteDBService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"modules/WatchListDBModule.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{}}}],["imports",{"_index":104,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventModule.html":{},"modules/MovieModule.html":{},"modules/UserModule.html":{},"modules/VoteModule.html":{}}}],["inbox",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["included",{"_index":1214,"title":{},"body":{"license.html":{}}}],["including",{"_index":1196,"title":{},"body":{"license.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"injectables/AnnounceJob.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"interfaces/EmailOptInDto.html":{},"injectables/EmailService.html":{},"injectables/GravatarService.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"injectables/JwtStrategy.html":{},"interfaces/JwtUser.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"interfaces/LoginDto.html":{},"controllers/MovieController.html":{},"injectables/MovieDBService.html":{},"interfaces/MovieExtType.html":{},"injectables/MovieService.html":{},"interfaces/PasswordDto.html":{},"interfaces/PasswordNewDto.html":{},"injectables/PasswordService.html":{},"injectables/PrismaService.html":{},"interfaces/ProfileDto.html":{},"interfaces/ResDto.html":{},"controllers/UserController.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"injectables/VoteDBService.html":{},"injectables/VoteService.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{},"interfaces/WatchlistExtType.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["inestapplication",{"_index":704,"title":{},"body":{"injectables/PrismaService.html":{}}}],["info",{"_index":3,"title":{},"body":{"injectables/AnnounceJob.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"interfaces/EmailOptInDto.html":{},"injectables/EmailService.html":{},"modules/EventModule.html":{},"injectables/GravatarService.html":{},"modules/HistoryDBModule.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/JwtUser.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"interfaces/LoginDto.html":{},"controllers/MovieController.html":{},"modules/MovieDBModule.html":{},"injectables/MovieDBService.html":{},"interfaces/MovieExtType.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"interfaces/PasswordDto.html":{},"interfaces/PasswordNewDto.html":{},"injectables/PasswordService.html":{},"injectables/PrismaService.html":{},"interfaces/ProfileDto.html":{},"interfaces/ResDto.html":{},"controllers/UserController.html":{},"modules/UserDBModule.html":{},"injectables/UserDBService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"modules/VoteDBModule.html":{},"injectables/VoteDBService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"modules/WatchListDBModule.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{},"interfaces/WatchlistExtType.html":{}}}],["information",{"_index":525,"title":{},"body":{"controllers/MovieController.html":{},"controllers/UserController.html":{}}}],["infos",{"_index":59,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["init",{"_index":1169,"title":{},"body":{"index.html":{}}}],["injectable",{"_index":0,"title":{"injectables/AnnounceJob.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"injectables/EmailService.html":{},"injectables/GravatarService.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"injectables/MovieDBService.html":{},"injectables/MovieService.html":{},"injectables/PasswordService.html":{},"injectables/PrismaService.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{},"injectables/VoteDBService.html":{},"injectables/VoteService.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{}},"body":{"injectables/AnnounceJob.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"injectables/EmailService.html":{},"injectables/GravatarService.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"injectables/MovieDBService.html":{},"injectables/MovieService.html":{},"injectables/PasswordService.html":{},"injectables/PrismaService.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{},"injectables/VoteDBService.html":{},"injectables/VoteService.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{},"coverage.html":{}}}],["injectables",{"_index":2,"title":{},"body":{"injectables/AnnounceJob.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"injectables/EmailService.html":{},"injectables/GravatarService.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"injectables/MovieDBService.html":{},"injectables/MovieService.html":{},"injectables/PasswordService.html":{},"injectables/PrismaService.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{},"injectables/VoteDBService.html":{},"injectables/VoteService.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{},"overview.html":{}}}],["install",{"_index":1162,"title":{},"body":{"index.html":{}}}],["installation",{"_index":1145,"title":{},"body":{"index.html":{}}}],["installed",{"_index":1147,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{}}}],["interested",{"_index":671,"title":{},"body":{"injectables/MovieService.html":{},"interfaces/WatchlistExtType.html":{},"index.html":{}}}],["interface",{"_index":306,"title":{"interfaces/EmailOptInDto.html":{},"interfaces/JwtUser.html":{},"interfaces/LoginDto.html":{},"interfaces/MovieExtType.html":{},"interfaces/PasswordDto.html":{},"interfaces/PasswordNewDto.html":{},"interfaces/ProfileDto.html":{},"interfaces/ResDto.html":{},"interfaces/WatchlistExtType.html":{}},"body":{"interfaces/EmailOptInDto.html":{},"interfaces/JwtUser.html":{},"interfaces/LoginDto.html":{},"interfaces/MovieExtType.html":{},"interfaces/PasswordDto.html":{},"interfaces/PasswordNewDto.html":{},"interfaces/ProfileDto.html":{},"interfaces/ResDto.html":{},"interfaces/WatchlistExtType.html":{},"coverage.html":{}}}],["interfaces",{"_index":308,"title":{},"body":{"interfaces/EmailOptInDto.html":{},"interfaces/JwtUser.html":{},"interfaces/LoginDto.html":{},"interfaces/MovieExtType.html":{},"interfaces/PasswordDto.html":{},"interfaces/PasswordNewDto.html":{},"interfaces/ProfileDto.html":{},"interfaces/ResDto.html":{},"interfaces/WatchlistExtType.html":{},"overview.html":{}}}],["internalservererrorexception",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{},"injectables/VoteService.html":{}}}],["internalservererrorexception('error",{"_index":985,"title":{},"body":{"injectables/VoteService.html":{}}}],["internalservererrorexception('unable",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{}}}],["ist",{"_index":52,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["job",{"_index":72,"title":{},"body":{"injectables/AnnounceJob.html":{},"injectables/HistoryJob.html":{},"injectables/WatchListJob.html":{}}}],["jobs/announce.job",{"_index":385,"title":{},"body":{"modules/EventModule.html":{}}}],["jobs/history.job",{"_index":379,"title":{},"body":{"modules/EventModule.html":{}}}],["jobs/watchlist.job",{"_index":380,"title":{},"body":{"modules/EventModule.html":{}}}],["join",{"_index":110,"title":{},"body":{"modules/AppModule.html":{}}}],["join(__dirname",{"_index":119,"title":{},"body":{"modules/AppModule.html":{}}}],["js",{"_index":1091,"title":{},"body":{"dependencies.html":{}}}],["js/md5",{"_index":694,"title":{},"body":{"injectables/PasswordService.html":{}}}],["jwt",{"_index":458,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt.stategy",{"_index":192,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtauthguard",{"_index":444,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"injectables/JwtAuthGuard.html":{},"controllers/MovieController.html":{},"controllers/UserController.html":{},"controllers/VoteController.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":464,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":190,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":195,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":205,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":180,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["jwtuser",{"_index":460,"title":{"interfaces/JwtUser.html":{}},"body":{"injectables/JwtStrategy.html":{},"interfaces/JwtUser.html":{},"controllers/MovieController.html":{},"controllers/UserController.html":{},"controllers/VoteController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["key",{"_index":1264,"title":{},"body":{"miscellaneous/variables.html":{}}}],["kind",{"_index":1219,"title":{},"body":{"license.html":{}}}],["liability",{"_index":1234,"title":{},"body":{"license.html":{}}}],["liable",{"_index":1231,"title":{},"body":{"license.html":{}}}],["license",{"_index":1176,"title":{"license.html":{}},"body":{"license.html":{},"properties.html":{}}}],["limitation",{"_index":1197,"title":{},"body":{"license.html":{}}}],["limited",{"_index":1221,"title":{},"body":{"license.html":{}}}],["link",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{},"injectables/HistoryJob.html":{},"interfaces/MovieExtType.html":{},"injectables/MovieService.html":{},"injectables/UserService.html":{},"interfaces/WatchlistExtType.html":{}}}],["link:\\n",{"_index":361,"title":{},"body":{"injectables/EmailService.html":{}}}],["link:\\n${challenge_url}\\n\\n",{"_index":358,"title":{},"body":{"injectables/EmailService.html":{}}}],["list",{"_index":1144,"title":{},"body":{"index.html":{}}}],["literal",{"_index":815,"title":{},"body":{"injectables/UserDBService.html":{}}}],["loading",{"_index":1289,"title":{},"body":{"miscellaneous/variables.html":{}}}],["local",{"_index":478,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["local.strategy",{"_index":188,"title":{},"body":{"modules/AuthModule.html":{}}}],["localauthguard",{"_index":157,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["localstrategy",{"_index":181,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["log",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["logged_in",{"_index":1288,"title":{},"body":{"miscellaneous/variables.html":{}}}],["loggermiddleware",{"_index":481,"title":{"injectables/LoggerMiddleware.html":{}},"body":{"injectables/LoggerMiddleware.html":{},"coverage.html":{}}}],["login",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["login(@request",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(req",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(user",{"_index":208,"title":{},"body":{"injectables/AuthService.html":{}}}],["login/:challenge",{"_index":1276,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logindto",{"_index":495,"title":{"interfaces/LoginDto.html":{}},"body":{"interfaces/LoginDto.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["loginview",{"_index":1277,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mail",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{}}}],["manage",{"_index":1132,"title":{},"body":{"index.html":{}}}],["management",{"_index":1123,"title":{},"body":{"index.html":{}}}],["manager",{"_index":1120,"title":{},"body":{"index.html":{}}}],["matching",{"_index":88,"title":{},"body":{"injectables/AnnounceJob.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"interfaces/EmailOptInDto.html":{},"injectables/EmailService.html":{},"modules/EventModule.html":{},"injectables/GravatarService.html":{},"modules/HistoryDBModule.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/JwtUser.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"interfaces/LoginDto.html":{},"controllers/MovieController.html":{},"modules/MovieDBModule.html":{},"injectables/MovieDBService.html":{},"interfaces/MovieExtType.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"interfaces/PasswordDto.html":{},"interfaces/PasswordNewDto.html":{},"injectables/PasswordService.html":{},"injectables/PrismaService.html":{},"interfaces/ProfileDto.html":{},"interfaces/ResDto.html":{},"controllers/UserController.html":{},"modules/UserDBModule.html":{},"injectables/UserDBService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"modules/VoteDBModule.html":{},"injectables/VoteDBService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"modules/WatchListDBModule.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{},"interfaces/WatchlistExtType.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["math.round(movie_data.runtime/15",{"_index":1039,"title":{},"body":{"injectables/WatchListJob.html":{}}}],["maximum",{"_index":993,"title":{},"body":{"injectables/VoteService.html":{}}}],["md5",{"_index":692,"title":{},"body":{"injectables/PasswordService.html":{}}}],["md5(string).tostring",{"_index":697,"title":{},"body":{"injectables/PasswordService.html":{}}}],["mehr",{"_index":58,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["merchantability",{"_index":1223,"title":{},"body":{"license.html":{}}}],["merge",{"_index":1200,"title":{},"body":{"license.html":{}}}],["message",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"injectables/MovieService.html":{},"interfaces/ResDto.html":{},"injectables/UserService.html":{}}}],["metadata",{"_index":1105,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":1116,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["methods",{"_index":13,"title":{},"body":{"injectables/AnnounceJob.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"injectables/EmailService.html":{},"injectables/GravatarService.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"controllers/MovieController.html":{},"injectables/MovieDBService.html":{},"injectables/MovieService.html":{},"injectables/PasswordService.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"injectables/VoteDBService.html":{},"injectables/VoteService.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{}}}],["migrate",{"_index":1165,"title":{},"body":{"index.html":{}}}],["miscellaneous",{"_index":1111,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1177,"title":{},"body":{"license.html":{},"properties.html":{}}}],["modify",{"_index":1199,"title":{},"body":{"license.html":{}}}],["module",{"_index":89,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventModule.html":{},"modules/HistoryDBModule.html":{},"modules/MovieDBModule.html":{},"modules/MovieModule.html":{},"modules/UserDBModule.html":{},"modules/UserModule.html":{},"modules/VoteDBModule.html":{},"modules/VoteModule.html":{},"modules/WatchListDBModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventModule.html":{},"modules/HistoryDBModule.html":{},"modules/MovieDBModule.html":{},"modules/MovieModule.html":{},"modules/UserDBModule.html":{},"modules/UserModule.html":{},"modules/VoteDBModule.html":{},"modules/VoteModule.html":{},"modules/WatchListDBModule.html":{}}}],["modules",{"_index":91,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventModule.html":{},"modules/HistoryDBModule.html":{},"modules/MovieDBModule.html":{},"modules/MovieModule.html":{},"modules/UserDBModule.html":{},"modules/UserModule.html":{},"modules/VoteDBModule.html":{},"modules/VoteModule.html":{},"modules/WatchListDBModule.html":{},"modules.html":{},"overview.html":{}}}],["monday",{"_index":1119,"title":{},"body":{"index.html":{}}}],["movie",{"_index":42,"title":{},"body":{"injectables/AnnounceJob.html":{},"injectables/HistoryJob.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"injectables/VoteDBService.html":{},"injectables/VoteService.html":{},"injectables/WatchListJob.html":{},"index.html":{}}}],["movie).proposer_id",{"_index":885,"title":{},"body":{"injectables/UserService.html":{}}}],["movie.controller",{"_index":604,"title":{},"body":{"modules/MovieModule.html":{}}}],["movie.createdat",{"_index":641,"title":{},"body":{"injectables/MovieService.html":{}}}],["movie.genre",{"_index":640,"title":{},"body":{"injectables/MovieService.html":{}}}],["movie.genres",{"_index":649,"title":{},"body":{"injectables/MovieService.html":{}}}],["movie.imdb_id",{"_index":437,"title":{},"body":{"injectables/HistoryJob.html":{},"injectables/MovieService.html":{},"injectables/WatchListJob.html":{}}}],["movie.imdburl",{"_index":650,"title":{},"body":{"injectables/MovieService.html":{}}}],["movie.link",{"_index":638,"title":{},"body":{"injectables/MovieService.html":{}}}],["movie.proposer_id",{"_index":635,"title":{},"body":{"injectables/MovieService.html":{},"injectables/VoteService.html":{}}}],["movie.service",{"_index":534,"title":{},"body":{"controllers/MovieController.html":{},"modules/MovieModule.html":{}}}],["movie.start_time.tolocalestring",{"_index":81,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["movie.title",{"_index":637,"title":{},"body":{"injectables/MovieService.html":{}}}],["movie.year",{"_index":639,"title":{},"body":{"injectables/MovieService.html":{}}}],["movie_data",{"_index":78,"title":{},"body":{"injectables/AnnounceJob.html":{},"injectables/HistoryJob.html":{},"injectables/WatchListJob.html":{}}}],["movie_data.link",{"_index":439,"title":{},"body":{"injectables/HistoryJob.html":{}}}],["movie_data.title",{"_index":83,"title":{},"body":{"injectables/AnnounceJob.html":{},"injectables/HistoryJob.html":{}}}],["moviecontroller",{"_index":497,"title":{"controllers/MovieController.html":{}},"body":{"controllers/MovieController.html":{},"modules/MovieModule.html":{},"coverage.html":{}}}],["moviedb.service",{"_index":565,"title":{},"body":{"modules/MovieDBModule.html":{}}}],["moviedb_data",{"_index":648,"title":{},"body":{"injectables/MovieService.html":{}}}],["moviedbmodule",{"_index":373,"title":{"modules/MovieDBModule.html":{}},"body":{"modules/EventModule.html":{},"modules/MovieDBModule.html":{},"modules/MovieModule.html":{},"modules/UserModule.html":{},"modules/VoteModule.html":{},"modules.html":{},"overview.html":{}}}],["moviedbservice",{"_index":21,"title":{"injectables/MovieDBService.html":{}},"body":{"injectables/AnnounceJob.html":{},"injectables/HistoryJob.html":{},"modules/MovieDBModule.html":{},"injectables/MovieDBService.html":{},"injectables/MovieService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"injectables/WatchListJob.html":{},"coverage.html":{},"overview.html":{}}}],["movieexttype",{"_index":537,"title":{"interfaces/MovieExtType.html":{}},"body":{"controllers/MovieController.html":{},"interfaces/MovieExtType.html":{},"injectables/MovieService.html":{},"coverage.html":{}}}],["moviemodule",{"_index":97,"title":{"modules/MovieModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MovieModule.html":{},"modules.html":{},"overview.html":{}}}],["movies",{"_index":518,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"injectables/VoteService.html":{},"index.html":{}}}],["movieservice",{"_index":533,"title":{"injectables/MovieService.html":{}},"body":{"controllers/MovieController.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"coverage.html":{},"overview.html":{}}}],["msg",{"_index":1292,"title":{},"body":{"miscellaneous/variables.html":{}}}],["n",{"_index":49,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["name",{"_index":27,"title":{},"body":{"injectables/AnnounceJob.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"injectables/EmailService.html":{},"injectables/GravatarService.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"controllers/MovieController.html":{},"injectables/MovieDBService.html":{},"injectables/MovieService.html":{},"injectables/PasswordService.html":{},"injectables/PrismaService.html":{},"interfaces/ProfileDto.html":{},"controllers/UserController.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"injectables/VoteDBService.html":{},"injectables/VoteService.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["need",{"_index":874,"title":{},"body":{"injectables/UserService.html":{},"index.html":{}}}],["nestjs/common",{"_index":38,"title":{},"body":{"injectables/AnnounceJob.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"injectables/EmailService.html":{},"modules/EventModule.html":{},"injectables/GravatarService.html":{},"modules/HistoryDBModule.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"controllers/MovieController.html":{},"modules/MovieDBModule.html":{},"injectables/MovieDBService.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"injectables/PasswordService.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"modules/UserDBModule.html":{},"injectables/UserDBService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"modules/VoteDBModule.html":{},"injectables/VoteDBService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"modules/WatchListDBModule.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":1083,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":191,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":187,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1084,"title":{},"body":{"dependencies.html":{}}}],["nestjs/schedule",{"_index":116,"title":{},"body":{"modules/AppModule.html":{},"injectables/HistoryJob.html":{},"injectables/WatchListJob.html":{},"dependencies.html":{}}}],["nestjs/serve",{"_index":108,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestmiddleware",{"_index":490,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["new",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"injectables/LocalStrategy.html":{},"injectables/MovieService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"injectables/WatchListJob.html":{},"coverage.html":{}}}],["new_challenge",{"_index":878,"title":{},"body":{"injectables/UserService.html":{}}}],["new_challenge_url",{"_index":880,"title":{},"body":{"injectables/UserService.html":{}}}],["new_username",{"_index":844,"title":{},"body":{"injectables/UserService.html":{}}}],["newer",{"_index":1150,"title":{},"body":{"index.html":{}}}],["newest",{"_index":1152,"title":{},"body":{"index.html":{}}}],["newsletter",{"_index":743,"title":{},"body":{"controllers/UserController.html":{}}}],["next",{"_index":486,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/UserService.html":{}}}],["node.js",{"_index":1146,"title":{},"body":{"index.html":{}}}],["nodemailer",{"_index":337,"title":{},"body":{"injectables/EmailService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["nodemailer.createtransport",{"_index":342,"title":{},"body":{"injectables/EmailService.html":{}}}],["noninfringement",{"_index":1227,"title":{},"body":{"license.html":{}}}],["notfoundexception",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MovieService.html":{}}}],["notfoundexception('email",{"_index":284,"title":{},"body":{"injectables/AuthService.html":{}}}],["notfoundexception('movie",{"_index":632,"title":{},"body":{"injectables/MovieService.html":{}}}],["notfoundexception('password",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{}}}],["notice",{"_index":1212,"title":{},"body":{"license.html":{}}}],["notifications",{"_index":1143,"title":{},"body":{"index.html":{}}}],["now",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["npm",{"_index":1161,"title":{},"body":{"index.html":{}}}],["null",{"_index":868,"title":{},"body":{"injectables/UserService.html":{}}}],["num_of",{"_index":931,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["num_of(user_id",{"_index":955,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["num_of_movies",{"_index":1019,"title":{},"body":{"injectables/WatchListJob.html":{}}}],["num_of_votes",{"_index":989,"title":{},"body":{"injectables/VoteService.html":{}}}],["number",{"_index":576,"title":{},"body":{"injectables/MovieDBService.html":{},"interfaces/MovieExtType.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"injectables/VoteDBService.html":{},"injectables/VoteService.html":{},"interfaces/WatchlistExtType.html":{},"miscellaneous/variables.html":{}}}],["number((movie.runtime.split",{"_index":654,"title":{},"body":{"injectables/MovieService.html":{}}}],["number(process.env.max_votes",{"_index":991,"title":{},"body":{"injectables/VoteService.html":{}}}],["number(process.env.num_of_movies",{"_index":1024,"title":{},"body":{"injectables/WatchListJob.html":{}}}],["number(process.env.pause_time_min",{"_index":1026,"title":{},"body":{"injectables/WatchListJob.html":{}}}],["number(proposer_id",{"_index":647,"title":{},"body":{"injectables/MovieService.html":{}}}],["number(user.id",{"_index":916,"title":{},"body":{"controllers/VoteController.html":{}}}],["obtaining",{"_index":1189,"title":{},"body":{"license.html":{}}}],["onmoduleinit",{"_index":702,"title":{},"body":{"injectables/PrismaService.html":{}}}],["open",{"_index":1157,"title":{},"body":{"index.html":{}}}],["opt_in",{"_index":849,"title":{},"body":{"injectables/UserService.html":{}}}],["opt_in_users",{"_index":363,"title":{},"body":{"injectables/EmailService.html":{}}}],["option",{"_index":870,"title":{},"body":{"injectables/UserService.html":{}}}],["optional",{"_index":29,"title":{},"body":{"injectables/AnnounceJob.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"injectables/EmailService.html":{},"injectables/GravatarService.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"controllers/MovieController.html":{},"injectables/MovieDBService.html":{},"injectables/MovieService.html":{},"interfaces/PasswordDto.html":{},"interfaces/PasswordNewDto.html":{},"injectables/PasswordService.html":{},"injectables/PrismaService.html":{},"interfaces/ProfileDto.html":{},"interfaces/ResDto.html":{},"controllers/UserController.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"injectables/VoteDBService.html":{},"injectables/VoteService.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{},"miscellaneous/functions.html":{}}}],["orderby",{"_index":964,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["otherwise",{"_index":1239,"title":{},"body":{"license.html":{}}}],["out",{"_index":102,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventModule.html":{},"modules/HistoryDBModule.html":{},"modules/MovieDBModule.html":{},"modules/MovieModule.html":{},"modules/UserDBModule.html":{},"modules/UserModule.html":{},"modules/VoteDBModule.html":{},"modules/VoteModule.html":{},"modules/WatchListDBModule.html":{},"license.html":{},"overview.html":{}}}],["output",{"_index":77,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["output.push(`${start_time",{"_index":82,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["overview",{"_index":1247,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1081,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MovieController.html":{},"controllers/UserController.html":{},"controllers/VoteController.html":{}}}],["param('imdb_id",{"_index":556,"title":{},"body":{"controllers/MovieController.html":{},"controllers/VoteController.html":{}}}],["parameters",{"_index":25,"title":{},"body":{"injectables/AnnounceJob.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"injectables/EmailService.html":{},"injectables/GravatarService.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"controllers/MovieController.html":{},"injectables/MovieDBService.html":{},"injectables/MovieService.html":{},"injectables/PasswordService.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"injectables/VoteDBService.html":{},"injectables/VoteService.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":817,"title":{},"body":{"injectables/UserDBService.html":{}}}],["parseexpression",{"_index":1028,"title":{},"body":{"injectables/WatchListJob.html":{}}}],["parseexpression(process.env.schedule_start",{"_index":1035,"title":{},"body":{"injectables/WatchListJob.html":{}}}],["parser",{"_index":1029,"title":{},"body":{"injectables/WatchListJob.html":{},"dependencies.html":{}}}],["particular",{"_index":1225,"title":{},"body":{"license.html":{}}}],["pass",{"_index":349,"title":{},"body":{"injectables/EmailService.html":{}}}],["passport",{"_index":457,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":186,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":459,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":462,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["password",{"_index":211,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EmailService.html":{},"injectables/LocalStrategy.html":{},"interfaces/LoginDto.html":{},"interfaces/PasswordDto.html":{},"interfaces/PasswordNewDto.html":{},"injectables/PasswordService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["password.service",{"_index":394,"title":{},"body":{"injectables/GravatarService.html":{}}}],["password_confirm",{"_index":677,"title":{},"body":{"interfaces/PasswordDto.html":{},"interfaces/PasswordNewDto.html":{}}}],["password_new",{"_index":839,"title":{},"body":{"injectables/UserService.html":{}}}],["password_old",{"_index":680,"title":{},"body":{"interfaces/PasswordNewDto.html":{},"injectables/UserService.html":{}}}],["passworddto",{"_index":675,"title":{"interfaces/PasswordDto.html":{}},"body":{"interfaces/PasswordDto.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["passwordnewdto",{"_index":678,"title":{"interfaces/PasswordNewDto.html":{}},"body":{"interfaces/PasswordNewDto.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["passwordservice",{"_index":182,"title":{"injectables/PasswordService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/GravatarService.html":{},"injectables/PasswordService.html":{},"modules/UserDBModule.html":{},"injectables/UserDBService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["path",{"_index":111,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["pause_time",{"_index":1020,"title":{},"body":{"injectables/WatchListJob.html":{}}}],["payload",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.sub",{"_index":469,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["permission",{"_index":1183,"title":{},"body":{"license.html":{}}}],["permit",{"_index":1207,"title":{},"body":{"license.html":{}}}],["person",{"_index":1188,"title":{},"body":{"license.html":{}}}],["persons",{"_index":1208,"title":{},"body":{"license.html":{}}}],["please",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["port",{"_index":345,"title":{},"body":{"injectables/EmailService.html":{}}}],["portions",{"_index":1216,"title":{},"body":{"license.html":{}}}],["possible",{"_index":532,"title":{},"body":{"controllers/MovieController.html":{}}}],["post",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MovieController.html":{},"controllers/UserController.html":{},"controllers/VoteController.html":{}}}],["post(':imdb_id",{"_index":554,"title":{},"body":{"controllers/MovieController.html":{},"controllers/VoteController.html":{}}}],["post('email_opt_in",{"_index":771,"title":{},"body":{"controllers/UserController.html":{}}}],["post('login",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('password",{"_index":785,"title":{},"body":{"controllers/UserController.html":{}}}],["post('register",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('reset/:challenge",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('username",{"_index":781,"title":{},"body":{"controllers/UserController.html":{}}}],["post_media",{"_index":507,"title":{},"body":{"controllers/MovieController.html":{}}}],["post_media(@user",{"_index":555,"title":{},"body":{"controllers/MovieController.html":{}}}],["post_media(user",{"_index":529,"title":{},"body":{"controllers/MovieController.html":{}}}],["prefix",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MovieController.html":{},"controllers/UserController.html":{},"controllers/VoteController.html":{}}}],["prisma",{"_index":414,"title":{},"body":{"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"injectables/MovieDBService.html":{},"injectables/MovieService.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{},"injectables/VoteDBService.html":{},"injectables/VoteService.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{},"index.html":{}}}],["prisma.historycreateinput",{"_index":416,"title":{},"body":{"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{}}}],["prisma.moviecreateinput",{"_index":571,"title":{},"body":{"injectables/MovieDBService.html":{},"injectables/MovieService.html":{}}}],["prisma.moviecreatenestedonewithoutvoteinput",{"_index":996,"title":{},"body":{"injectables/VoteService.html":{}}}],["prisma.moviewhereuniqueinput",{"_index":592,"title":{},"body":{"injectables/MovieDBService.html":{},"injectables/VoteDBService.html":{}}}],["prisma.service",{"_index":408,"title":{},"body":{"modules/HistoryDBModule.html":{},"injectables/HistoryDBService.html":{},"modules/MovieDBModule.html":{},"injectables/MovieDBService.html":{},"modules/UserDBModule.html":{},"injectables/UserDBService.html":{},"modules/VoteDBModule.html":{},"injectables/VoteDBService.html":{},"modules/WatchListDBModule.html":{},"injectables/WatchListDBService.html":{}}}],["prisma.usercreateinput",{"_index":645,"title":{},"body":{"injectables/MovieService.html":{},"injectables/UserDBService.html":{}}}],["prisma.usercreatenestedonewithoutmovieinput",{"_index":652,"title":{},"body":{"injectables/MovieService.html":{}}}],["prisma.usercreatenestedonewithoutvoteinput",{"_index":997,"title":{},"body":{"injectables/VoteService.html":{}}}],["prisma.userupdateinput",{"_index":824,"title":{},"body":{"injectables/UserDBService.html":{},"injectables/UserService.html":{}}}],["prisma.userwhereuniqueinput",{"_index":805,"title":{},"body":{"injectables/UserDBService.html":{},"injectables/VoteDBService.html":{}}}],["prisma.votecreateinput",{"_index":933,"title":{},"body":{"injectables/VoteDBService.html":{},"injectables/VoteService.html":{}}}],["prisma.votewhereuniqueinput",{"_index":936,"title":{},"body":{"injectables/VoteDBService.html":{},"injectables/VoteService.html":{}}}],["prisma.watchlistcreateinput",{"_index":1011,"title":{},"body":{"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{}}}],["prisma/client",{"_index":43,"title":{},"body":{"injectables/AnnounceJob.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"controllers/MovieController.html":{},"injectables/MovieDBService.html":{},"injectables/MovieService.html":{},"injectables/PrismaService.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"injectables/VoteDBService.html":{},"injectables/VoteService.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{},"dependencies.html":{}}}],["prisma/client/runtime",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{}}}],["prismaclient",{"_index":700,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismaclientknownrequesterror",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{}}}],["prismas",{"_index":1164,"title":{},"body":{"index.html":{}}}],["prismaservice",{"_index":404,"title":{"injectables/PrismaService.html":{}},"body":{"modules/HistoryDBModule.html":{},"injectables/HistoryDBService.html":{},"modules/MovieDBModule.html":{},"injectables/MovieDBService.html":{},"modules/MovieModule.html":{},"injectables/PrismaService.html":{},"modules/UserDBModule.html":{},"injectables/UserDBService.html":{},"modules/VoteDBModule.html":{},"injectables/VoteDBService.html":{},"modules/VoteModule.html":{},"modules/WatchListDBModule.html":{},"injectables/WatchListDBService.html":{},"coverage.html":{},"overview.html":{}}}],["privacy",{"_index":1285,"title":{},"body":{"miscellaneous/variables.html":{}}}],["privacyview",{"_index":1286,"title":{},"body":{"miscellaneous/variables.html":{}}}],["private",{"_index":9,"title":{},"body":{"injectables/AnnounceJob.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"injectables/EmailService.html":{},"injectables/HistoryJob.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"controllers/UserController.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"injectables/VoteService.html":{},"injectables/WatchListJob.html":{}}}],["process.env.discord_webhook_url",{"_index":304,"title":{},"body":{"injectables/DiscordService.html":{}}}],["process.env.email_host",{"_index":344,"title":{},"body":{"injectables/EmailService.html":{}}}],["process.env.email_host_password",{"_index":350,"title":{},"body":{"injectables/EmailService.html":{}}}],["process.env.email_host_user",{"_index":348,"title":{},"body":{"injectables/EmailService.html":{}}}],["process.env.email_port",{"_index":346,"title":{},"body":{"injectables/EmailService.html":{}}}],["process.env.frontend_url}\\n\\n",{"_index":62,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["process.env.frontend_url}login/${challenge",{"_index":367,"title":{},"body":{"injectables/EmailService.html":{}}}],["process.env.frontend_url}login/${userdb.challenge",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{}}}],["process.env.frontend_url}reset/${challenge",{"_index":368,"title":{},"body":{"injectables/EmailService.html":{}}}],["process.env.jwt_expiration",{"_index":200,"title":{},"body":{"modules/AuthModule.html":{}}}],["process.env.jwt_secret",{"_index":197,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["process.env.max_votes",{"_index":994,"title":{},"body":{"injectables/VoteService.html":{}}}],["process.env.omdb_api_key",{"_index":629,"title":{},"body":{"injectables/MovieService.html":{}}}],["process.env.project_name",{"_index":335,"title":{},"body":{"injectables/EmailService.html":{}}}],["profile",{"_index":757,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["profiledto",{"_index":711,"title":{"interfaces/ProfileDto.html":{}},"body":{"interfaces/ProfileDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["profileview",{"_index":1283,"title":{},"body":{"miscellaneous/variables.html":{}}}],["progress",{"_index":1175,"title":{},"body":{"index.html":{}}}],["project_name",{"_index":312,"title":{},"body":{"injectables/EmailService.html":{}}}],["promise",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MovieController.html":{},"injectables/PasswordService.html":{},"controllers/UserController.html":{},"injectables/UserDBService.html":{},"controllers/VoteController.html":{}}}],["promise.all(movies.map(async",{"_index":634,"title":{},"body":{"injectables/MovieService.html":{}}}],["promise.all(watchlist.map(async",{"_index":666,"title":{},"body":{"injectables/MovieService.html":{},"injectables/UserService.html":{}}}],["properties",{"_index":8,"title":{"properties.html":{}},"body":{"injectables/AnnounceJob.html":{},"injectables/DiscordService.html":{},"interfaces/EmailOptInDto.html":{},"injectables/EmailService.html":{},"interfaces/JwtUser.html":{},"interfaces/LoginDto.html":{},"interfaces/MovieExtType.html":{},"injectables/MovieService.html":{},"interfaces/PasswordDto.html":{},"interfaces/PasswordNewDto.html":{},"interfaces/ProfileDto.html":{},"interfaces/ResDto.html":{},"injectables/WatchListJob.html":{},"interfaces/WatchlistExtType.html":{},"properties.html":{}}}],["proposed",{"_index":891,"title":{},"body":{"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["proposed_movies",{"_index":858,"title":{},"body":{"injectables/UserService.html":{}}}],["proposer",{"_index":514,"title":{},"body":{"controllers/MovieController.html":{},"interfaces/MovieExtType.html":{},"injectables/MovieService.html":{}}}],["proposer_id",{"_index":588,"title":{},"body":{"injectables/MovieDBService.html":{},"interfaces/MovieExtType.html":{},"injectables/MovieService.html":{}}}],["provided",{"_index":1217,"title":{},"body":{"license.html":{}}}],["providers",{"_index":184,"title":{},"body":{"modules/AuthModule.html":{},"modules/EventModule.html":{},"modules/HistoryDBModule.html":{},"modules/MovieDBModule.html":{},"modules/MovieModule.html":{},"modules/UserDBModule.html":{},"modules/UserModule.html":{},"modules/VoteDBModule.html":{},"modules/VoteModule.html":{},"modules/WatchListDBModule.html":{}}}],["public",{"_index":517,"title":{},"body":{"controllers/MovieController.html":{},"controllers/UserController.html":{},"controllers/VoteController.html":{}}}],["publish",{"_index":1201,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":1226,"title":{},"body":{"license.html":{}}}],["pw_reset",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["pw_reset(@param('challenge",{"_index":173,"title":{},"body":{"controllers/AuthController.html":{}}}],["pw_reset(challenge",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["pw_reset_request",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["pw_reset_request(@param('username",{"_index":171,"title":{},"body":{"controllers/AuthController.html":{}}}],["pw_reset_request(username",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["reactive",{"_index":1287,"title":{},"body":{"miscellaneous/variables.html":{}}}],["readonly",{"_index":10,"title":{},"body":{"injectables/AnnounceJob.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"injectables/EmailService.html":{},"injectables/GravatarService.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"controllers/MovieController.html":{},"injectables/MovieDBService.html":{},"injectables/MovieService.html":{},"controllers/UserController.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"injectables/VoteDBService.html":{},"injectables/VoteService.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{}}}],["receive",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{}}}],["reflect",{"_index":1104,"title":{},"body":{"dependencies.html":{}}}],["register",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["register(@request",{"_index":167,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(req",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(user",{"_index":214,"title":{},"body":{"injectables/AuthService.html":{}}}],["registerview",{"_index":1282,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registration",{"_index":1129,"title":{},"body":{"index.html":{}}}],["related",{"_index":500,"title":{},"body":{"controllers/MovieController.html":{},"controllers/UserController.html":{}}}],["remove",{"_index":512,"title":{},"body":{"controllers/MovieController.html":{},"index.html":{}}}],["remove_cookie",{"_index":1059,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["rename",{"_index":1154,"title":{},"body":{"index.html":{}}}],["req",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{},"injectables/LoggerMiddleware.html":{}}}],["req.body.password",{"_index":175,"title":{},"body":{"controllers/AuthController.html":{}}}],["request",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/EmailService.html":{},"miscellaneous/variables.html":{}}}],["request.user",{"_index":1314,"title":{},"body":{"miscellaneous/variables.html":{}}}],["require(\"nodemailer",{"_index":338,"title":{},"body":{"injectables/EmailService.html":{},"miscellaneous/variables.html":{}}}],["require('bcrypt",{"_index":691,"title":{},"body":{"injectables/PasswordService.html":{},"miscellaneous/variables.html":{}}}],["res",{"_index":485,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["resdto",{"_index":544,"title":{"interfaces/ResDto.html":{}},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{},"interfaces/ResDto.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["reset",{"_index":101,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/EmailService.html":{},"modules/EventModule.html":{},"modules/HistoryDBModule.html":{},"modules/MovieDBModule.html":{},"modules/MovieModule.html":{},"modules/UserDBModule.html":{},"modules/UserModule.html":{},"modules/VoteDBModule.html":{},"modules/VoteModule.html":{},"modules/WatchListDBModule.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["reset/:challenge",{"_index":1280,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reset_request",{"_index":1278,"title":{},"body":{"miscellaneous/variables.html":{}}}],["resetrequestview",{"_index":1279,"title":{},"body":{"miscellaneous/variables.html":{}}}],["resetview",{"_index":1281,"title":{},"body":{"miscellaneous/variables.html":{}}}],["responsive",{"_index":1134,"title":{},"body":{"index.html":{}}}],["rest",{"_index":1139,"title":{},"body":{"index.html":{}}}],["restriction",{"_index":1195,"title":{},"body":{"license.html":{}}}],["result",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["results",{"_index":87,"title":{},"body":{"injectables/AnnounceJob.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"interfaces/EmailOptInDto.html":{},"injectables/EmailService.html":{},"modules/EventModule.html":{},"injectables/GravatarService.html":{},"modules/HistoryDBModule.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/JwtUser.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"interfaces/LoginDto.html":{},"controllers/MovieController.html":{},"modules/MovieDBModule.html":{},"injectables/MovieDBService.html":{},"interfaces/MovieExtType.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"interfaces/PasswordDto.html":{},"interfaces/PasswordNewDto.html":{},"injectables/PasswordService.html":{},"injectables/PrismaService.html":{},"interfaces/ProfileDto.html":{},"interfaces/ResDto.html":{},"controllers/UserController.html":{},"modules/UserDBModule.html":{},"injectables/UserDBService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"modules/VoteDBModule.html":{},"injectables/VoteDBService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"modules/WatchListDBModule.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{},"interfaces/WatchlistExtType.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"injectables/EmailService.html":{},"injectables/GravatarService.html":{},"injectables/HistoryDBService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MovieController.html":{},"injectables/MovieDBService.html":{},"injectables/MovieService.html":{},"injectables/PasswordService.html":{},"controllers/UserController.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"injectables/VoteDBService.html":{},"injectables/VoteService.html":{},"injectables/WatchListDBService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":31,"title":{},"body":{"injectables/AnnounceJob.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"injectables/EmailService.html":{},"injectables/GravatarService.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"controllers/MovieController.html":{},"injectables/MovieDBService.html":{},"injectables/MovieService.html":{},"injectables/PasswordService.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"injectables/VoteDBService.html":{},"injectables/VoteService.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{}}}],["rights",{"_index":1198,"title":{},"body":{"license.html":{}}}],["rimraf",{"_index":1107,"title":{},"body":{"dependencies.html":{}}}],["root",{"_index":1170,"title":{},"body":{"index.html":{}}}],["rootpath",{"_index":118,"title":{},"body":{"modules/AppModule.html":{}}}],["round_duration_ms",{"_index":1038,"title":{},"body":{"injectables/WatchListJob.html":{}}}],["route",{"_index":1117,"title":{},"body":{"miscellaneous/functions.html":{}}}],["router",{"_index":1053,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["routes",{"_index":501,"title":{},"body":{"controllers/MovieController.html":{},"controllers/UserController.html":{},"controllers/VoteController.html":{},"miscellaneous/variables.html":{}}}],["routes/auth/auth.module",{"_index":105,"title":{},"body":{"modules/AppModule.html":{}}}],["routes/movie/movie.module",{"_index":112,"title":{},"body":{"modules/AppModule.html":{}}}],["routes/user/user.module",{"_index":106,"title":{},"body":{"modules/AppModule.html":{}}}],["routes/vote/vote.module",{"_index":113,"title":{},"body":{"modules/AppModule.html":{}}}],["run",{"_index":15,"title":{},"body":{"injectables/AnnounceJob.html":{},"injectables/HistoryJob.html":{},"injectables/WatchListJob.html":{},"index.html":{}}}],["runtime",{"_index":653,"title":{},"body":{"injectables/MovieService.html":{}}}],["rxjs",{"_index":1109,"title":{},"body":{"dependencies.html":{}}}],["save",{"_index":612,"title":{},"body":{"injectables/MovieService.html":{}}}],["save(imdb_id",{"_index":620,"title":{},"body":{"injectables/MovieService.html":{}}}],["save_vote",{"_index":896,"title":{},"body":{"controllers/VoteController.html":{}}}],["save_vote(@user",{"_index":914,"title":{},"body":{"controllers/VoteController.html":{}}}],["save_vote(user",{"_index":904,"title":{},"body":{"controllers/VoteController.html":{}}}],["saved",{"_index":750,"title":{},"body":{"controllers/UserController.html":{}}}],["schaut",{"_index":1182,"title":{},"body":{"license.html":{}}}],["schedulemodule",{"_index":115,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulemodule.forroot",{"_index":121,"title":{},"body":{"modules/AppModule.html":{}}}],["secret",{"_index":196,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":467,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["secure",{"_index":347,"title":{},"body":{"injectables/EmailService.html":{}}}],["select",{"_index":961,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["sell",{"_index":1205,"title":{},"body":{"license.html":{}}}],["send_all_opt_in",{"_index":316,"title":{},"body":{"injectables/EmailService.html":{}}}],["send_all_opt_in(body",{"_index":324,"title":{},"body":{"injectables/EmailService.html":{}}}],["send_announce",{"_index":16,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["send_announce(watchlist",{"_index":32,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["send_challenge",{"_index":317,"title":{},"body":{"injectables/EmailService.html":{}}}],["send_challenge(dest_mail",{"_index":327,"title":{},"body":{"injectables/EmailService.html":{}}}],["send_message",{"_index":297,"title":{},"body":{"injectables/DiscordService.html":{}}}],["send_message(message",{"_index":299,"title":{},"body":{"injectables/DiscordService.html":{}}}],["send_password_reset",{"_index":318,"title":{},"body":{"injectables/EmailService.html":{}}}],["send_password_reset(dest_mail",{"_index":331,"title":{},"body":{"injectables/EmailService.html":{}}}],["sent",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["server",{"_index":1171,"title":{},"body":{"index.html":{}}}],["servestaticmodule",{"_index":107,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticmodule.forroot",{"_index":117,"title":{},"body":{"modules/AppModule.html":{}}}],["set",{"_index":1159,"title":{},"body":{"index.html":{}}}],["set/unset",{"_index":742,"title":{},"body":{"controllers/UserController.html":{}}}],["set_cookie",{"_index":1060,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["shall",{"_index":1213,"title":{},"body":{"license.html":{}}}],["show",{"_index":1291,"title":{},"body":{"miscellaneous/variables.html":{}}}],["show_alert",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MovieService.html":{},"interfaces/ResDto.html":{},"injectables/UserService.html":{}}}],["siehe",{"_index":60,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["signoptions",{"_index":198,"title":{},"body":{"modules/AuthModule.html":{}}}],["software",{"_index":1191,"title":{},"body":{"license.html":{}}}],["soon",{"_index":1140,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"injectables/AnnounceJob.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"interfaces/EmailOptInDto.html":{},"injectables/EmailService.html":{},"modules/EventModule.html":{},"injectables/GravatarService.html":{},"modules/HistoryDBModule.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/JwtUser.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"interfaces/LoginDto.html":{},"controllers/MovieController.html":{},"modules/MovieDBModule.html":{},"injectables/MovieDBService.html":{},"interfaces/MovieExtType.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"interfaces/PasswordDto.html":{},"interfaces/PasswordNewDto.html":{},"injectables/PasswordService.html":{},"injectables/PrismaService.html":{},"interfaces/ProfileDto.html":{},"interfaces/ResDto.html":{},"controllers/UserController.html":{},"modules/UserDBModule.html":{},"injectables/UserDBService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"modules/VoteDBModule.html":{},"injectables/VoteDBService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"modules/WatchListDBModule.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{},"interfaces/WatchlistExtType.html":{}}}],["spam",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{}}}],["specific",{"_index":526,"title":{},"body":{"controllers/MovieController.html":{}}}],["spendenbasis!\\n\\n",{"_index":69,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["src/.../email.service.ts",{"_index":1259,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1113,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../password.service.ts",{"_index":1257,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.decorator.ts",{"_index":1262,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["src/common/db_services/histroy/historydb.module.ts",{"_index":405,"title":{},"body":{"modules/HistoryDBModule.html":{}}}],["src/common/db_services/histroy/historydb.service.ts",{"_index":409,"title":{},"body":{"injectables/HistoryDBService.html":{},"coverage.html":{}}}],["src/common/db_services/histroy/historydb.service.ts:10",{"_index":418,"title":{},"body":{"injectables/HistoryDBService.html":{}}}],["src/common/db_services/histroy/historydb.service.ts:14",{"_index":417,"title":{},"body":{"injectables/HistoryDBService.html":{}}}],["src/common/db_services/histroy/historydb.service.ts:18",{"_index":420,"title":{},"body":{"injectables/HistoryDBService.html":{}}}],["src/common/db_services/histroy/historydb.service.ts:6",{"_index":413,"title":{},"body":{"injectables/HistoryDBService.html":{}}}],["src/common/db_services/movies/moviedb.module.ts",{"_index":564,"title":{},"body":{"modules/MovieDBModule.html":{}}}],["src/common/db_services/movies/moviedb.service.ts",{"_index":566,"title":{},"body":{"injectables/MovieDBService.html":{},"coverage.html":{}}}],["src/common/db_services/movies/moviedb.service.ts:10",{"_index":580,"title":{},"body":{"injectables/MovieDBService.html":{}}}],["src/common/db_services/movies/moviedb.service.ts:16",{"_index":585,"title":{},"body":{"injectables/MovieDBService.html":{}}}],["src/common/db_services/movies/moviedb.service.ts:22",{"_index":581,"title":{},"body":{"injectables/MovieDBService.html":{}}}],["src/common/db_services/movies/moviedb.service.ts:26",{"_index":583,"title":{},"body":{"injectables/MovieDBService.html":{}}}],["src/common/db_services/movies/moviedb.service.ts:32",{"_index":572,"title":{},"body":{"injectables/MovieDBService.html":{}}}],["src/common/db_services/movies/moviedb.service.ts:36",{"_index":574,"title":{},"body":{"injectables/MovieDBService.html":{}}}],["src/common/db_services/movies/moviedb.service.ts:40",{"_index":577,"title":{},"body":{"injectables/MovieDBService.html":{}}}],["src/common/db_services/movies/moviedb.service.ts:6",{"_index":570,"title":{},"body":{"injectables/MovieDBService.html":{}}}],["src/common/db_services/prisma.service.ts",{"_index":699,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/common/db_services/prisma.service.ts:10",{"_index":705,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/common/db_services/prisma.service.ts:6",{"_index":707,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/common/db_services/users/userdb.module.ts",{"_index":795,"title":{},"body":{"modules/UserDBModule.html":{}}}],["src/common/db_services/users/userdb.service.ts",{"_index":798,"title":{},"body":{"injectables/UserDBService.html":{},"coverage.html":{}}}],["src/common/db_services/users/userdb.service.ts:11",{"_index":808,"title":{},"body":{"injectables/UserDBService.html":{}}}],["src/common/db_services/users/userdb.service.ts:19",{"_index":813,"title":{},"body":{"injectables/UserDBService.html":{}}}],["src/common/db_services/users/userdb.service.ts:23",{"_index":810,"title":{},"body":{"injectables/UserDBService.html":{}}}],["src/common/db_services/users/userdb.service.ts:27",{"_index":811,"title":{},"body":{"injectables/UserDBService.html":{}}}],["src/common/db_services/users/userdb.service.ts:31",{"_index":803,"title":{},"body":{"injectables/UserDBService.html":{}}}],["src/common/db_services/users/userdb.service.ts:36",{"_index":816,"title":{},"body":{"injectables/UserDBService.html":{}}}],["src/common/db_services/users/userdb.service.ts:47",{"_index":806,"title":{},"body":{"injectables/UserDBService.html":{}}}],["src/common/db_services/users/userdb.service.ts:7",{"_index":801,"title":{},"body":{"injectables/UserDBService.html":{}}}],["src/common/db_services/votes/votedb.module.ts",{"_index":922,"title":{},"body":{"modules/VoteDBModule.html":{}}}],["src/common/db_services/votes/votedb.service.ts",{"_index":924,"title":{},"body":{"injectables/VoteDBService.html":{},"coverage.html":{}}}],["src/common/db_services/votes/votedb.service.ts:10",{"_index":943,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["src/common/db_services/votes/votedb.service.ts:16",{"_index":954,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["src/common/db_services/votes/votedb.service.ts:25",{"_index":956,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["src/common/db_services/votes/votedb.service.ts:33",{"_index":948,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["src/common/db_services/votes/votedb.service.ts:39",{"_index":952,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["src/common/db_services/votes/votedb.service.ts:46",{"_index":950,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["src/common/db_services/votes/votedb.service.ts:53",{"_index":945,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["src/common/db_services/votes/votedb.service.ts:6",{"_index":932,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["src/common/db_services/votes/votedb.service.ts:68",{"_index":934,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["src/common/db_services/votes/votedb.service.ts:72",{"_index":937,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["src/common/db_services/votes/votedb.service.ts:76",{"_index":939,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["src/common/db_services/votes/votedb.service.ts:80",{"_index":941,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["src/common/db_services/watchlist/watchlistdb.module.ts",{"_index":1007,"title":{},"body":{"modules/WatchListDBModule.html":{}}}],["src/common/db_services/watchlist/watchlistdb.service.ts",{"_index":1009,"title":{},"body":{"injectables/WatchListDBService.html":{},"coverage.html":{}}}],["src/common/db_services/watchlist/watchlistdb.service.ts:10",{"_index":1014,"title":{},"body":{"injectables/WatchListDBService.html":{}}}],["src/common/db_services/watchlist/watchlistdb.service.ts:14",{"_index":1012,"title":{},"body":{"injectables/WatchListDBService.html":{}}}],["src/common/db_services/watchlist/watchlistdb.service.ts:18",{"_index":1013,"title":{},"body":{"injectables/WatchListDBService.html":{}}}],["src/common/db_services/watchlist/watchlistdb.service.ts:6",{"_index":1010,"title":{},"body":{"injectables/WatchListDBService.html":{}}}],["src/common/decorators/user.decorator.ts",{"_index":1067,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/event_service/event.module.ts",{"_index":378,"title":{},"body":{"modules/EventModule.html":{}}}],["src/common/event_service/jobs/announce.job.ts",{"_index":6,"title":{},"body":{"injectables/AnnounceJob.html":{},"coverage.html":{}}}],["src/common/event_service/jobs/announce.job.ts:11",{"_index":36,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["src/common/event_service/jobs/announce.job.ts:12",{"_index":24,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["src/common/event_service/jobs/announce.job.ts:28",{"_index":30,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["src/common/event_service/jobs/announce.job.ts:42",{"_index":34,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["src/common/event_service/jobs/history.job.ts",{"_index":426,"title":{},"body":{"injectables/HistoryJob.html":{},"coverage.html":{}}}],["src/common/event_service/jobs/history.job.ts:10",{"_index":429,"title":{},"body":{"injectables/HistoryJob.html":{}}}],["src/common/event_service/jobs/history.job.ts:18",{"_index":431,"title":{},"body":{"injectables/HistoryJob.html":{}}}],["src/common/event_service/jobs/watchlist.job.ts",{"_index":1018,"title":{},"body":{"injectables/WatchListJob.html":{},"coverage.html":{}}}],["src/common/event_service/jobs/watchlist.job.ts:13",{"_index":1025,"title":{},"body":{"injectables/WatchListJob.html":{}}}],["src/common/event_service/jobs/watchlist.job.ts:14",{"_index":1022,"title":{},"body":{"injectables/WatchListJob.html":{}}}],["src/common/event_service/jobs/watchlist.job.ts:22",{"_index":1023,"title":{},"body":{"injectables/WatchListJob.html":{}}}],["src/common/middleware/logger.middleware.ts",{"_index":482,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"coverage.html":{}}}],["src/common/middleware/logger.middleware.ts:5",{"_index":488,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["src/common/util_services/discord.service.ts",{"_index":295,"title":{},"body":{"injectables/DiscordService.html":{},"coverage.html":{}}}],["src/common/util_services/discord.service.ts:12",{"_index":300,"title":{},"body":{"injectables/DiscordService.html":{}}}],["src/common/util_services/discord.service.ts:6",{"_index":298,"title":{},"body":{"injectables/DiscordService.html":{}}}],["src/common/util_services/email.service.ts",{"_index":311,"title":{},"body":{"injectables/EmailService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/util_services/email.service.ts:10",{"_index":336,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/common/util_services/email.service.ts:11",{"_index":319,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/common/util_services/email.service.ts:25",{"_index":329,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/common/util_services/email.service.ts:35",{"_index":332,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/common/util_services/email.service.ts:45",{"_index":325,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/common/util_services/email.service.ts:57",{"_index":321,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/common/util_services/email.service.ts:61",{"_index":323,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/common/util_services/gravatar.service.ts",{"_index":388,"title":{},"body":{"injectables/GravatarService.html":{},"coverage.html":{}}}],["src/common/util_services/gravatar.service.ts:5",{"_index":391,"title":{},"body":{"injectables/GravatarService.html":{}}}],["src/common/util_services/gravatar.service.ts:9",{"_index":393,"title":{},"body":{"injectables/GravatarService.html":{}}}],["src/common/util_services/password.service.ts",{"_index":681,"title":{},"body":{"injectables/PasswordService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/util_services/password.service.ts:13",{"_index":689,"title":{},"body":{"injectables/PasswordService.html":{}}}],["src/common/util_services/password.service.ts:17",{"_index":685,"title":{},"body":{"injectables/PasswordService.html":{}}}],["src/common/util_services/password.service.ts:9",{"_index":687,"title":{},"body":{"injectables/PasswordService.html":{}}}],["src/main.ts",{"_index":1071,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/routes/auth/auth.controller.ts",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/routes/auth/auth.controller.ts:11",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/routes/auth/auth.controller.ts:16",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/routes/auth/auth.controller.ts:21",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/routes/auth/auth.controller.ts:26",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/routes/auth/auth.controller.ts:31",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/routes/auth/auth.guard.ts",{"_index":471,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["src/routes/auth/auth.module.ts",{"_index":183,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/routes/auth/auth.service.ts",{"_index":201,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/routes/auth/auth.service.ts:100",{"_index":212,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/routes/auth/auth.service.ts:16",{"_index":206,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/routes/auth/auth.service.ts:25",{"_index":217,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/routes/auth/auth.service.ts:42",{"_index":209,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/routes/auth/auth.service.ts:49",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/routes/auth/auth.service.ts:71",{"_index":207,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/routes/auth/auth.service.ts:85",{"_index":213,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/routes/auth/jwt",{"_index":445,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/routes/auth/jwt.stategy.ts",{"_index":450,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/routes/auth/jwt.stategy.ts:16",{"_index":454,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/routes/auth/jwt.stategy.ts:7",{"_index":452,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/routes/auth/local.strategy.ts",{"_index":473,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/routes/auth/local.strategy.ts:12",{"_index":477,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/routes/auth/local.strategy.ts:7",{"_index":475,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/routes/movie/movie.controller.ts",{"_index":498,"title":{},"body":{"controllers/MovieController.html":{},"coverage.html":{}}}],["src/routes/movie/movie.controller.ts:24",{"_index":516,"title":{},"body":{"controllers/MovieController.html":{}}}],["src/routes/movie/movie.controller.ts:32",{"_index":528,"title":{},"body":{"controllers/MovieController.html":{}}}],["src/routes/movie/movie.controller.ts:40",{"_index":520,"title":{},"body":{"controllers/MovieController.html":{}}}],["src/routes/movie/movie.controller.ts:50",{"_index":524,"title":{},"body":{"controllers/MovieController.html":{}}}],["src/routes/movie/movie.controller.ts:63",{"_index":531,"title":{},"body":{"controllers/MovieController.html":{}}}],["src/routes/movie/movie.controller.ts:74",{"_index":510,"title":{},"body":{"controllers/MovieController.html":{}}}],["src/routes/movie/movie.module.ts",{"_index":603,"title":{},"body":{"modules/MovieModule.html":{}}}],["src/routes/movie/movie.service.ts",{"_index":611,"title":{},"body":{"injectables/MovieService.html":{},"coverage.html":{}}}],["src/routes/movie/movie.service.ts:109",{"_index":619,"title":{},"body":{"injectables/MovieService.html":{}}}],["src/routes/movie/movie.service.ts:125",{"_index":618,"title":{},"body":{"injectables/MovieService.html":{}}}],["src/routes/movie/movie.service.ts:19",{"_index":614,"title":{},"body":{"injectables/MovieService.html":{}}}],["src/routes/movie/movie.service.ts:30",{"_index":616,"title":{},"body":{"injectables/MovieService.html":{}}}],["src/routes/movie/movie.service.ts:38",{"_index":617,"title":{},"body":{"injectables/MovieService.html":{}}}],["src/routes/movie/movie.service.ts:58",{"_index":621,"title":{},"body":{"injectables/MovieService.html":{}}}],["src/routes/movie/movie.service.ts:92",{"_index":615,"title":{},"body":{"injectables/MovieService.html":{}}}],["src/routes/user/user.controller.ts",{"_index":717,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/routes/user/user.controller.ts:101",{"_index":732,"title":{},"body":{"controllers/UserController.html":{}}}],["src/routes/user/user.controller.ts:110",{"_index":753,"title":{},"body":{"controllers/UserController.html":{}}}],["src/routes/user/user.controller.ts:27",{"_index":746,"title":{},"body":{"controllers/UserController.html":{}}}],["src/routes/user/user.controller.ts:38",{"_index":756,"title":{},"body":{"controllers/UserController.html":{}}}],["src/routes/user/user.controller.ts:49",{"_index":741,"title":{},"body":{"controllers/UserController.html":{}}}],["src/routes/user/user.controller.ts:60",{"_index":738,"title":{},"body":{"controllers/UserController.html":{}}}],["src/routes/user/user.controller.ts:70",{"_index":749,"title":{},"body":{"controllers/UserController.html":{}}}],["src/routes/user/user.controller.ts:81",{"_index":730,"title":{},"body":{"controllers/UserController.html":{}}}],["src/routes/user/user.controller.ts:92",{"_index":726,"title":{},"body":{"controllers/UserController.html":{}}}],["src/routes/user/user.module.ts",{"_index":830,"title":{},"body":{"modules/UserModule.html":{}}}],["src/routes/user/user.service.ts",{"_index":833,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/routes/user/user.service.ts:113",{"_index":847,"title":{},"body":{"injectables/UserService.html":{}}}],["src/routes/user/user.service.ts:14",{"_index":837,"title":{},"body":{"injectables/UserService.html":{}}}],["src/routes/user/user.service.ts:24",{"_index":852,"title":{},"body":{"injectables/UserService.html":{}}}],["src/routes/user/user.service.ts:29",{"_index":854,"title":{},"body":{"injectables/UserService.html":{}}}],["src/routes/user/user.service.ts:34",{"_index":856,"title":{},"body":{"injectables/UserService.html":{}}}],["src/routes/user/user.service.ts:41",{"_index":842,"title":{},"body":{"injectables/UserService.html":{}}}],["src/routes/user/user.service.ts:60",{"_index":850,"title":{},"body":{"injectables/UserService.html":{}}}],["src/routes/user/user.service.ts:69",{"_index":840,"title":{},"body":{"injectables/UserService.html":{}}}],["src/routes/user/user.service.ts:86",{"_index":845,"title":{},"body":{"injectables/UserService.html":{}}}],["src/routes/vote/vote.controller.ts",{"_index":893,"title":{},"body":{"controllers/VoteController.html":{},"coverage.html":{}}}],["src/routes/vote/vote.controller.ts:22",{"_index":901,"title":{},"body":{"controllers/VoteController.html":{}}}],["src/routes/vote/vote.controller.ts:31",{"_index":899,"title":{},"body":{"controllers/VoteController.html":{}}}],["src/routes/vote/vote.controller.ts:42",{"_index":905,"title":{},"body":{"controllers/VoteController.html":{}}}],["src/routes/vote/vote.controller.ts:53",{"_index":907,"title":{},"body":{"controllers/VoteController.html":{}}}],["src/routes/vote/vote.module.ts",{"_index":973,"title":{},"body":{"modules/VoteModule.html":{}}}],["src/routes/vote/vote.service.ts",{"_index":975,"title":{},"body":{"injectables/VoteService.html":{},"coverage.html":{}}}],["src/routes/vote/vote.service.ts:14",{"_index":978,"title":{},"body":{"injectables/VoteService.html":{}}}],["src/routes/vote/vote.service.ts:22",{"_index":979,"title":{},"body":{"injectables/VoteService.html":{}}}],["src/routes/vote/vote.service.ts:30",{"_index":983,"title":{},"body":{"injectables/VoteService.html":{}}}],["src/routes/vote/vote.service.ts:48",{"_index":981,"title":{},"body":{"injectables/VoteService.html":{}}}],["src/routes/vote/vote.service.ts:8",{"_index":976,"title":{},"body":{"injectables/VoteService.html":{}}}],["src/types/jwtuser.type.ts",{"_index":470,"title":{},"body":{"interfaces/JwtUser.html":{},"coverage.html":{}}}],["src/types/movie.types/movie_ext.type.ts",{"_index":593,"title":{},"body":{"interfaces/MovieExtType.html":{},"coverage.html":{}}}],["src/types/movie.types/watchlist_ext.type.ts",{"_index":1044,"title":{},"body":{"interfaces/WatchlistExtType.html":{},"coverage.html":{}}}],["src/types/res.dto.ts",{"_index":715,"title":{},"body":{"interfaces/ResDto.html":{},"coverage.html":{}}}],["src/types/user.dto/email_opt_in.dto.ts",{"_index":309,"title":{},"body":{"interfaces/EmailOptInDto.html":{},"coverage.html":{}}}],["src/types/user.dto/login.dto.ts",{"_index":496,"title":{},"body":{"interfaces/LoginDto.html":{},"coverage.html":{}}}],["src/types/user.dto/password.dto.ts",{"_index":676,"title":{},"body":{"interfaces/PasswordDto.html":{},"coverage.html":{}}}],["src/types/user.dto/password_new.dto.ts",{"_index":679,"title":{},"body":{"interfaces/PasswordNewDto.html":{},"coverage.html":{}}}],["src/types/user.dto/profile.dto.ts",{"_index":712,"title":{},"body":{"interfaces/ProfileDto.html":{},"coverage.html":{}}}],["stack",{"_index":1122,"title":{},"body":{"index.html":{}}}],["start",{"_index":1172,"title":{},"body":{"index.html":{}}}],["start_time",{"_index":80,"title":{},"body":{"injectables/AnnounceJob.html":{},"injectables/MovieService.html":{},"injectables/WatchListJob.html":{},"interfaces/WatchlistExtType.html":{}}}],["started",{"_index":73,"title":{"index.html":{},"license.html":{}},"body":{"injectables/AnnounceJob.html":{},"injectables/HistoryJob.html":{},"injectables/WatchListJob.html":{}}}],["statements",{"_index":1048,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":109,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["still",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["store",{"_index":1062,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["strategy",{"_index":456,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["string",{"_index":33,"title":{},"body":{"injectables/AnnounceJob.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"interfaces/EmailOptInDto.html":{},"injectables/EmailService.html":{},"injectables/GravatarService.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"interfaces/JwtUser.html":{},"injectables/LocalStrategy.html":{},"interfaces/LoginDto.html":{},"controllers/MovieController.html":{},"injectables/MovieDBService.html":{},"interfaces/MovieExtType.html":{},"injectables/MovieService.html":{},"interfaces/PasswordDto.html":{},"interfaces/PasswordNewDto.html":{},"injectables/PasswordService.html":{},"interfaces/ProfileDto.html":{},"interfaces/ResDto.html":{},"controllers/UserController.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"injectables/VoteDBService.html":{},"injectables/VoteService.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{},"interfaces/WatchlistExtType.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["string).next().todate",{"_index":1036,"title":{},"body":{"injectables/WatchListJob.html":{}}}],["sub",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{}}}],["subject",{"_index":353,"title":{},"body":{"injectables/EmailService.html":{},"license.html":{}}}],["sublicense",{"_index":1203,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":1215,"title":{},"body":{"license.html":{}}}],["success",{"_index":1293,"title":{},"body":{"miscellaneous/variables.html":{}}}],["successfully",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MovieService.html":{}}}],["super",{"_index":463,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["support",{"_index":1244,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":1245,"title":{},"body":{"modules.html":{}}}],["table",{"_index":1080,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1079,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":966,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["team\\n",{"_index":360,"title":{},"body":{"injectables/EmailService.html":{}}}],["text",{"_index":354,"title":{},"body":{"injectables/EmailService.html":{}}}],["then((vote",{"_index":657,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.$connect",{"_index":708,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$on('beforeexit",{"_index":709,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.announce_discord",{"_index":48,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["this.announce_email",{"_index":70,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["this.announcejob.run",{"_index":1043,"title":{},"body":{"injectables/WatchListJob.html":{}}}],["this.authservice.confirm(challenge",{"_index":170,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.login(req.user",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.pw_reset(challenge",{"_index":174,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.pw_reset_request(username",{"_index":172,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.register(req.body",{"_index":168,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser(username",{"_index":480,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.discordservice.send_message(this.announce_discord(watchlist",{"_index":85,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["this.emailservice.generate_challenge_url(new_challenge",{"_index":881,"title":{},"body":{"injectables/UserService.html":{}}}],["this.emailservice.generate_challenge_url(user.challenge",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.emailservice.generate_pw_challenge_url(challenge",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.emailservice.send_all_opt_in(this.announce_email(watchlist",{"_index":86,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["this.emailservice.send_challenge(user.username",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["this.emailservice.send_password_reset(user.username",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.get(imdb_id",{"_index":644,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.gravatarservice.generate_gravatar_url(new_username",{"_index":879,"title":{},"body":{"injectables/UserService.html":{}}}],["this.gravatarservice.generate_gravatar_url(user.username",{"_index":867,"title":{},"body":{"injectables/UserService.html":{}}}],["this.historydbservice.add(data",{"_index":440,"title":{},"body":{"injectables/HistoryJob.html":{}}}],["this.histroydbservice.get_all",{"_index":674,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.histroydbservice.has(imdb_id",{"_index":642,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.imdb",{"_index":627,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.imdb.get",{"_index":630,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.jwtservice.sign(payload",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.loading",{"_index":1295,"title":{},"body":{"miscellaneous/variables.html":{}}}],["this.logged_in",{"_index":1304,"title":{},"body":{"miscellaneous/variables.html":{}}}],["this.moviedbservice.add(moviedb_data).then((movie",{"_index":655,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.moviedbservice.delete(imdb_id",{"_index":664,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.moviedbservice.delete(movie.imdb_id",{"_index":443,"title":{},"body":{"injectables/HistoryJob.html":{},"injectables/MovieService.html":{}}}],["this.moviedbservice.delete_all_proposed(user_id",{"_index":889,"title":{},"body":{"injectables/UserService.html":{}}}],["this.moviedbservice.get(imdb_id",{"_index":659,"title":{},"body":{"injectables/MovieService.html":{},"injectables/VoteService.html":{}}}],["this.moviedbservice.get(movie.imdb_id",{"_index":79,"title":{},"body":{"injectables/AnnounceJob.html":{},"injectables/HistoryJob.html":{},"injectables/WatchListJob.html":{}}}],["this.moviedbservice.get(watch_movie.imdb_id",{"_index":668,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.moviedbservice.get(wl.imdb_id",{"_index":884,"title":{},"body":{"injectables/UserService.html":{}}}],["this.moviedbservice.get_all",{"_index":633,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.moviedbservice.get_all_proposed(user_id",{"_index":859,"title":{},"body":{"injectables/UserService.html":{}}}],["this.movieservice.delete(imdb_id",{"_index":560,"title":{},"body":{"controllers/MovieController.html":{}}}],["this.movieservice.get(imdb_id",{"_index":553,"title":{},"body":{"controllers/MovieController.html":{}}}],["this.movieservice.get_all",{"_index":547,"title":{},"body":{"controllers/MovieController.html":{}}}],["this.movieservice.get_history",{"_index":549,"title":{},"body":{"controllers/MovieController.html":{}}}],["this.movieservice.get_watchlist",{"_index":548,"title":{},"body":{"controllers/MovieController.html":{}}}],["this.movieservice.save(imdb_id",{"_index":557,"title":{},"body":{"controllers/MovieController.html":{}}}],["this.passwordservice.compare(password",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["this.passwordservice.compare(password_old",{"_index":871,"title":{},"body":{"injectables/UserService.html":{}}}],["this.passwordservice.hash(data.password",{"_index":822,"title":{},"body":{"injectables/UserDBService.html":{}}}],["this.passwordservice.hash(password",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.passwordservice.hash(password_new",{"_index":872,"title":{},"body":{"injectables/UserService.html":{}}}],["this.passwordservice.hash_md5(trim",{"_index":398,"title":{},"body":{"injectables/GravatarService.html":{}}}],["this.pause_time",{"_index":1042,"title":{},"body":{"injectables/WatchListJob.html":{}}}],["this.prisma.history.count",{"_index":424,"title":{},"body":{"injectables/HistoryDBService.html":{}}}],["this.prisma.history.create",{"_index":423,"title":{},"body":{"injectables/HistoryDBService.html":{}}}],["this.prisma.history.findmany",{"_index":422,"title":{},"body":{"injectables/HistoryDBService.html":{}}}],["this.prisma.movie.create",{"_index":589,"title":{},"body":{"injectables/MovieDBService.html":{}}}],["this.prisma.movie.delete",{"_index":590,"title":{},"body":{"injectables/MovieDBService.html":{}}}],["this.prisma.movie.deletemany",{"_index":591,"title":{},"body":{"injectables/MovieDBService.html":{}}}],["this.prisma.movie.findmany",{"_index":587,"title":{},"body":{"injectables/MovieDBService.html":{}}}],["this.prisma.movie.findunique",{"_index":586,"title":{},"body":{"injectables/MovieDBService.html":{}}}],["this.prisma.user.count",{"_index":819,"title":{},"body":{"injectables/UserDBService.html":{}}}],["this.prisma.user.create",{"_index":823,"title":{},"body":{"injectables/UserDBService.html":{}}}],["this.prisma.user.delete",{"_index":826,"title":{},"body":{"injectables/UserDBService.html":{}}}],["this.prisma.user.findmany",{"_index":820,"title":{},"body":{"injectables/UserDBService.html":{}}}],["this.prisma.user.findunique",{"_index":818,"title":{},"body":{"injectables/UserDBService.html":{}}}],["this.prisma.user.update",{"_index":825,"title":{},"body":{"injectables/UserDBService.html":{}}}],["this.prisma.vote.count",{"_index":959,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["this.prisma.vote.create",{"_index":967,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["this.prisma.vote.delete",{"_index":968,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["this.prisma.vote.deletemany",{"_index":969,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["this.prisma.vote.findfirst",{"_index":958,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["this.prisma.vote.findmany",{"_index":960,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["this.prisma.vote.findunique",{"_index":957,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["this.prisma.vote.groupby",{"_index":962,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["this.prisma.watchlist.create",{"_index":1016,"title":{},"body":{"injectables/WatchListDBService.html":{}}}],["this.prisma.watchlist.delete",{"_index":1017,"title":{},"body":{"injectables/WatchListDBService.html":{}}}],["this.prisma.watchlist.findmany",{"_index":1015,"title":{},"body":{"injectables/WatchListDBService.html":{}}}],["this.project_name",{"_index":352,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.send_announce(output",{"_index":84,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["this.transporter",{"_index":341,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.transporter.sendmail",{"_index":351,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.userdbservice.create(payload",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userdbservice.delete",{"_index":890,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userdbservice.get",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MovieService.html":{},"injectables/UserService.html":{}}}],["this.userdbservice.get({id",{"_index":646,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.userdbservice.get_all_opt_in",{"_index":364,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.userdbservice.has_user(new_username",{"_index":876,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userdbservice.update",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["this.userservice.change_password(number(user.id",{"_index":787,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.change_profile(number(user.id",{"_index":770,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.change_username(number(user.id",{"_index":783,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.delete(number(user.id",{"_index":776,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.email_opt_in(number(user.id",{"_index":773,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.get(number(user.id",{"_index":768,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.get_public(number(user_id",{"_index":791,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.get_user_data(number(user.id",{"_index":780,"title":{},"body":{"controllers/UserController.html":{}}}],["this.votedbservice.add(votedb_data",{"_index":998,"title":{},"body":{"injectables/VoteService.html":{}}}],["this.votedbservice.delete(votedb_data",{"_index":1002,"title":{},"body":{"injectables/VoteService.html":{}}}],["this.votedbservice.delete_all(imdb_id",{"_index":663,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.votedbservice.delete_all(movie.imdb_id",{"_index":441,"title":{},"body":{"injectables/HistoryJob.html":{}}}],["this.votedbservice.delete_all_user(user_id",{"_index":888,"title":{},"body":{"injectables/UserService.html":{}}}],["this.votedbservice.get_most_voted(this.num_of_movies",{"_index":1034,"title":{},"body":{"injectables/WatchListJob.html":{}}}],["this.votedbservice.get_num_of_votes(imdb_id",{"_index":984,"title":{},"body":{"injectables/VoteService.html":{}}}],["this.votedbservice.get_num_of_votes(movie.imdb_id",{"_index":636,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.votedbservice.get_votes_movie(movie.imdb_id",{"_index":669,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.votedbservice.get_votes_user(user_id",{"_index":860,"title":{},"body":{"injectables/UserService.html":{}}}],["this.votedbservice.get_votes_user(user_id)).map(vote",{"_index":987,"title":{},"body":{"injectables/VoteService.html":{}}}],["this.votedbservice.num_of(user_id",{"_index":990,"title":{},"body":{"injectables/VoteService.html":{}}}],["this.voteservice.get_votes(imdb_id",{"_index":913,"title":{},"body":{"controllers/VoteController.html":{}}}],["this.voteservice.get_votes_user(number(user.id",{"_index":911,"title":{},"body":{"controllers/VoteController.html":{}}}],["this.voteservice.unvote(imdb_id",{"_index":918,"title":{},"body":{"controllers/VoteController.html":{}}}],["this.voteservice.vote(imdb_id",{"_index":915,"title":{},"body":{"controllers/VoteController.html":{}}}],["this.voteservice.vote(movie.imdb_id",{"_index":656,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.watchlistdbservice.add(data",{"_index":1037,"title":{},"body":{"injectables/WatchListJob.html":{}}}],["this.watchlistdbservice.delete(movie.imdb_id",{"_index":442,"title":{},"body":{"injectables/HistoryJob.html":{}}}],["this.watchlistdbservice.get_all",{"_index":76,"title":{},"body":{"injectables/AnnounceJob.html":{},"injectables/HistoryJob.html":{},"injectables/MovieService.html":{},"injectables/UserService.html":{}}}],["this.webhookclient",{"_index":302,"title":{},"body":{"injectables/DiscordService.html":{}}}],["this.webhookclient.send(message",{"_index":305,"title":{},"body":{"injectables/DiscordService.html":{}}}],["throw",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"injectables/MovieService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["time",{"_index":873,"title":{},"body":{"injectables/UserService.html":{}}}],["title",{"_index":438,"title":{},"body":{"injectables/HistoryJob.html":{},"interfaces/MovieExtType.html":{},"injectables/MovieService.html":{},"interfaces/WatchlistExtType.html":{}}}],["token",{"_index":734,"title":{},"body":{"controllers/UserController.html":{}}}],["top_movies",{"_index":1033,"title":{},"body":{"injectables/WatchListJob.html":{}}}],["tort",{"_index":1238,"title":{},"body":{"license.html":{}}}],["transporter",{"_index":313,"title":{},"body":{"injectables/EmailService.html":{}}}],["transportoptions",{"_index":339,"title":{},"body":{"injectables/EmailService.html":{}}}],["trim",{"_index":395,"title":{},"body":{"injectables/GravatarService.html":{}}}],["true",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MovieService.html":{},"controllers/UserController.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{},"injectables/VoteDBService.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MovieService.html":{},"injectables/VoteService.html":{}}}],["type",{"_index":28,"title":{},"body":{"injectables/AnnounceJob.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"interfaces/EmailOptInDto.html":{},"injectables/EmailService.html":{},"injectables/GravatarService.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"injectables/JwtStrategy.html":{},"interfaces/JwtUser.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"interfaces/LoginDto.html":{},"controllers/MovieController.html":{},"injectables/MovieDBService.html":{},"interfaces/MovieExtType.html":{},"injectables/MovieService.html":{},"interfaces/PasswordDto.html":{},"interfaces/PasswordNewDto.html":{},"injectables/PasswordService.html":{},"injectables/PrismaService.html":{},"interfaces/ProfileDto.html":{},"interfaces/ResDto.html":{},"controllers/UserController.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"injectables/VoteDBService.html":{},"injectables/VoteService.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{},"interfaces/WatchlistExtType.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["types/jwtuser.type",{"_index":461,"title":{},"body":{"injectables/JwtStrategy.html":{},"controllers/MovieController.html":{},"controllers/UserController.html":{},"controllers/VoteController.html":{}}}],["types/movie.types/movie_ext.type",{"_index":538,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{}}}],["types/movie.types/watchlist_ext.type",{"_index":540,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{}}}],["types/res.dto",{"_index":545,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{},"controllers/UserController.html":{}}}],["types/user.dto/email_opt_in.dto",{"_index":762,"title":{},"body":{"controllers/UserController.html":{}}}],["types/user.dto/login.dto",{"_index":764,"title":{},"body":{"controllers/UserController.html":{}}}],["types/user.dto/password.dto",{"_index":763,"title":{},"body":{"controllers/UserController.html":{}}}],["types/user.dto/password_new.dto",{"_index":765,"title":{},"body":{"controllers/UserController.html":{}}}],["types/user.dto/profile.dto",{"_index":761,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["ui",{"_index":1135,"title":{},"body":{"index.html":{}}}],["unauthorizedexception",{"_index":479,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["und",{"_index":66,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["unknown",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"injectables/HistoryDBService.html":{},"injectables/MovieDBService.html":{},"injectables/MovieService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/VoteDBService.html":{},"injectables/VoteService.html":{},"injectables/WatchListDBService.html":{},"miscellaneous/variables.html":{}}}],["unvote",{"_index":897,"title":{},"body":{"controllers/VoteController.html":{},"injectables/VoteService.html":{}}}],["unvote(@user",{"_index":917,"title":{},"body":{"controllers/VoteController.html":{}}}],["unvote(imdb_id",{"_index":980,"title":{},"body":{"injectables/VoteService.html":{}}}],["unvote(user",{"_index":906,"title":{},"body":{"controllers/VoteController.html":{}}}],["update",{"_index":727,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserDBService.html":{}}}],["update(params",{"_index":814,"title":{},"body":{"injectables/UserDBService.html":{}}}],["update_loading(loading",{"_index":1294,"title":{},"body":{"miscellaneous/variables.html":{}}}],["update_logged_in",{"_index":1296,"title":{},"body":{"miscellaneous/variables.html":{}}}],["update_profile",{"_index":723,"title":{},"body":{"controllers/UserController.html":{}}}],["update_profile(@user",{"_index":769,"title":{},"body":{"controllers/UserController.html":{}}}],["update_profile(user",{"_index":754,"title":{},"body":{"controllers/UserController.html":{}}}],["updated",{"_index":869,"title":{},"body":{"injectables/UserService.html":{}}}],["url",{"_index":303,"title":{},"body":{"injectables/DiscordService.html":{}}}],["use",{"_index":483,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/UserService.html":{},"license.html":{}}}],["use(req",{"_index":484,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["use_gravatar",{"_index":713,"title":{},"body":{"interfaces/ProfileDto.html":{},"injectables/UserService.html":{}}}],["useable",{"_index":1136,"title":{},"body":{"index.html":{}}}],["useguards",{"_index":155,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MovieController.html":{},"controllers/UserController.html":{},"controllers/VoteController.html":{}}}],["useguards(jwtauthguard",{"_index":550,"title":{},"body":{"controllers/MovieController.html":{},"controllers/UserController.html":{},"controllers/VoteController.html":{}}}],["useguards(jwtauthguard)@delete",{"_index":737,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(jwtauthguard)@delete(':imdb_id",{"_index":509,"title":{},"body":{"controllers/MovieController.html":{},"controllers/VoteController.html":{}}}],["useguards(jwtauthguard)@get",{"_index":745,"title":{},"body":{"controllers/UserController.html":{},"controllers/VoteController.html":{}}}],["useguards(jwtauthguard)@get(':imdb_id",{"_index":523,"title":{},"body":{"controllers/MovieController.html":{}}}],["useguards(jwtauthguard)@get('check",{"_index":731,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(jwtauthguard)@get('data",{"_index":748,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(jwtauthguard)@post",{"_index":755,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(jwtauthguard)@post(':imdb_id",{"_index":530,"title":{},"body":{"controllers/MovieController.html":{},"controllers/VoteController.html":{}}}],["useguards(jwtauthguard)@post('email_opt_in",{"_index":740,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(jwtauthguard)@post('password",{"_index":725,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(jwtauthguard)@post('username",{"_index":729,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(localauthguard",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(localauthguard)@post('login",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":210,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EmailService.html":{},"injectables/LocalStrategy.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"controllers/UserController.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"injectables/VoteDBService.html":{},"injectables/VoteService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.controller",{"_index":831,"title":{},"body":{"modules/UserModule.html":{}}}],["user.id",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{}}}],["user.name",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MovieService.html":{},"injectables/UserService.html":{}}}],["user.name},\\n\\n${body}\\ndear\\n${this.project_name",{"_index":366,"title":{},"body":{"injectables/EmailService.html":{}}}],["user.password",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["user.pw_reset",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.service",{"_index":760,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user.username",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EmailService.html":{},"injectables/UserService.html":{}}}],["user.verified",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{}}}],["user_id",{"_index":578,"title":{},"body":{"injectables/MovieDBService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/VoteDBService.html":{},"injectables/VoteService.html":{}}}],["user_name",{"_index":328,"title":{},"body":{"injectables/EmailService.html":{}}}],["user_name},\\n\\nplease",{"_index":356,"title":{},"body":{"injectables/EmailService.html":{}}}],["usercontroller",{"_index":716,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userdb",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{}}}],["userdb.service",{"_index":796,"title":{},"body":{"modules/UserDBModule.html":{}}}],["userdbmodule",{"_index":179,"title":{"modules/UserDBModule.html":{}},"body":{"modules/AuthModule.html":{},"modules/EventModule.html":{},"modules/MovieModule.html":{},"modules/UserDBModule.html":{},"modules/UserModule.html":{},"modules/VoteModule.html":{},"modules.html":{},"overview.html":{}}}],["userdbservice",{"_index":204,"title":{"injectables/UserDBService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/EmailService.html":{},"injectables/MovieService.html":{},"modules/UserDBModule.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"coverage.html":{},"overview.html":{}}}],["usermodule",{"_index":98,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/GravatarService.html":{},"injectables/LocalStrategy.html":{},"interfaces/LoginDto.html":{},"injectables/MovieService.html":{},"controllers/UserController.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{}}}],["username.trim().tolowercase",{"_index":396,"title":{},"body":{"injectables/GravatarService.html":{}}}],["users",{"_index":1131,"title":{},"body":{"index.html":{}}}],["userservice",{"_index":759,"title":{"injectables/UserService.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["userwhereuniqueinput",{"_index":809,"title":{},"body":{"injectables/UserDBService.html":{}}}],["util_services/discord.service",{"_index":39,"title":{},"body":{"injectables/AnnounceJob.html":{},"modules/EventModule.html":{}}}],["util_services/email.service",{"_index":44,"title":{},"body":{"injectables/AnnounceJob.html":{},"modules/EventModule.html":{}}}],["util_services/password.service",{"_index":797,"title":{},"body":{"modules/UserDBModule.html":{},"injectables/UserDBService.html":{}}}],["valid",{"_index":735,"title":{},"body":{"controllers/UserController.html":{}}}],["validate",{"_index":451,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":453,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(username",{"_index":476,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validateuser",{"_index":202,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(username",{"_index":216,"title":{},"body":{"injectables/AuthService.html":{}}}],["value",{"_index":334,"title":{},"body":{"injectables/EmailService.html":{},"injectables/WatchListJob.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":1160,"title":{},"body":{"index.html":{}}}],["variable",{"_index":1050,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1255,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verification",{"_index":1130,"title":{},"body":{"index.html":{}}}],["verified",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["version",{"_index":1148,"title":{},"body":{"index.html":{},"properties.html":{}}}],["via",{"_index":1138,"title":{},"body":{"index.html":{}}}],["void",{"_index":487,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["vote",{"_index":541,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{},"controllers/VoteController.html":{},"injectables/VoteService.html":{},"index.html":{}}}],["vote(imdb_id",{"_index":982,"title":{},"body":{"injectables/VoteService.html":{}}}],["vote.controller",{"_index":974,"title":{},"body":{"modules/VoteModule.html":{}}}],["vote.imdb_id",{"_index":988,"title":{},"body":{"injectables/VoteService.html":{}}}],["vote.service",{"_index":908,"title":{},"body":{"controllers/VoteController.html":{},"modules/VoteModule.html":{}}}],["vote.user.id",{"_index":673,"title":{},"body":{"injectables/MovieService.html":{}}}],["vote/vote.service",{"_index":608,"title":{},"body":{"modules/MovieModule.html":{},"injectables/MovieService.html":{}}}],["votecontroller",{"_index":892,"title":{"controllers/VoteController.html":{}},"body":{"controllers/VoteController.html":{},"modules/VoteModule.html":{},"coverage.html":{}}}],["voted",{"_index":903,"title":{},"body":{"controllers/VoteController.html":{},"injectables/VoteService.html":{},"index.html":{}}}],["votedb.service",{"_index":923,"title":{},"body":{"modules/VoteDBModule.html":{}}}],["votedb_data",{"_index":995,"title":{},"body":{"injectables/VoteService.html":{}}}],["votedbmodule",{"_index":374,"title":{"modules/VoteDBModule.html":{}},"body":{"modules/EventModule.html":{},"modules/MovieModule.html":{},"modules/UserModule.html":{},"modules/VoteDBModule.html":{},"modules/VoteModule.html":{},"modules.html":{},"overview.html":{}}}],["votedbservice",{"_index":428,"title":{"injectables/VoteDBService.html":{}},"body":{"injectables/HistoryJob.html":{},"injectables/MovieService.html":{},"injectables/UserService.html":{},"modules/VoteDBModule.html":{},"injectables/VoteDBService.html":{},"injectables/VoteService.html":{},"injectables/WatchListJob.html":{},"coverage.html":{},"overview.html":{}}}],["votemodule",{"_index":99,"title":{"modules/VoteModule.html":{}},"body":{"modules/AppModule.html":{},"modules/VoteModule.html":{},"modules.html":{},"overview.html":{}}}],["votes",{"_index":596,"title":{},"body":{"interfaces/MovieExtType.html":{},"injectables/MovieService.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"injectables/VoteService.html":{}}}],["votes.map((vote",{"_index":672,"title":{},"body":{"injectables/MovieService.html":{}}}],["voteservice",{"_index":602,"title":{"injectables/VoteService.html":{}},"body":{"modules/MovieModule.html":{},"injectables/MovieService.html":{},"controllers/VoteController.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"coverage.html":{},"overview.html":{}}}],["voting",{"_index":1125,"title":{},"body":{"index.html":{}}}],["wahl",{"_index":51,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["warranties",{"_index":1222,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":1218,"title":{},"body":{"license.html":{}}}],["watch_list",{"_index":436,"title":{},"body":{"injectables/HistoryJob.html":{}}}],["watch_movie",{"_index":667,"title":{},"body":{"injectables/MovieService.html":{}}}],["watch_movie.start_time",{"_index":670,"title":{},"body":{"injectables/MovieService.html":{}}}],["watchlist",{"_index":35,"title":{},"body":{"injectables/AnnounceJob.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"injectables/UserService.html":{}}}],["watchlist.map((movie",{"_index":661,"title":{},"body":{"injectables/MovieService.html":{}}}],["watchlist_imdbs",{"_index":660,"title":{},"body":{"injectables/MovieService.html":{}}}],["watchlist_imdbs.includes(imdb_id",{"_index":662,"title":{},"body":{"injectables/MovieService.html":{}}}],["watchlist_proposer_ids",{"_index":882,"title":{},"body":{"injectables/UserService.html":{}}}],["watchlist_proposer_ids.includes(user_id",{"_index":886,"title":{},"body":{"injectables/UserService.html":{}}}],["watchlistdb.service",{"_index":1008,"title":{},"body":{"modules/WatchListDBModule.html":{}}}],["watchlistdbmodule",{"_index":375,"title":{"modules/WatchListDBModule.html":{}},"body":{"modules/EventModule.html":{},"modules/MovieModule.html":{},"modules/UserModule.html":{},"modules/WatchListDBModule.html":{},"modules.html":{},"overview.html":{}}}],["watchlistdbservice",{"_index":20,"title":{"injectables/WatchListDBService.html":{}},"body":{"injectables/AnnounceJob.html":{},"injectables/HistoryJob.html":{},"injectables/MovieService.html":{},"injectables/UserService.html":{},"modules/WatchListDBModule.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{},"coverage.html":{},"overview.html":{}}}],["watchlistexttype",{"_index":539,"title":{"interfaces/WatchlistExtType.html":{}},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{},"interfaces/WatchlistExtType.html":{},"coverage.html":{}}}],["watchlistjob",{"_index":377,"title":{"injectables/WatchListJob.html":{}},"body":{"modules/EventModule.html":{},"injectables/WatchListJob.html":{},"coverage.html":{},"overview.html":{}}}],["webhookclient",{"_index":296,"title":{},"body":{"injectables/DiscordService.html":{}}}],["weekly",{"_index":1126,"title":{},"body":{"index.html":{}}}],["werden",{"_index":56,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["whether",{"_index":1235,"title":{},"body":{"license.html":{}}}],["without",{"_index":1137,"title":{},"body":{"index.html":{},"license.html":{}}}],["wl",{"_index":883,"title":{},"body":{"injectables/UserService.html":{}}}],["work",{"_index":1174,"title":{},"body":{"index.html":{}}}],["year",{"_index":597,"title":{},"body":{"interfaces/MovieExtType.html":{},"injectables/MovieService.html":{}}}],["yes",{"_index":1118,"title":{},"body":{"miscellaneous/functions.html":{}}}],["zoom",{"_index":100,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventModule.html":{},"modules/HistoryDBModule.html":{},"modules/MovieDBModule.html":{},"modules/MovieModule.html":{},"modules/UserDBModule.html":{},"modules/UserModule.html":{},"modules/VoteDBModule.html":{},"modules/VoteModule.html":{},"modules/WatchListDBModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"injectables/AnnounceJob.html":{"url":"injectables/AnnounceJob.html","title":"injectable - AnnounceJob","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AnnounceJob\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/event_service/jobs/announce.job.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                announce_discord\n                            \n                            \n                                    Private\n                                    Readonly\n                                announce_email\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                run\n                            \n                            \n                                    Private\n                                    Async\n                                send_announce\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(discordService: DiscordService, watchListDBService: WatchListDBService, movieDBService: MovieDBService, emailService: EmailService)\n                    \n                \n                        \n                            \n                                Defined in src/common/event_service/jobs/announce.job.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        discordService\n                                                  \n                                                        \n                                                                        DiscordService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        watchListDBService\n                                                  \n                                                        \n                                                                        WatchListDBService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        movieDBService\n                                                  \n                                                        \n                                                                        MovieDBService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        emailService\n                                                  \n                                                        \n                                                                        EmailService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        run\n                        \n                    \n                \n            \n            \n                \n                    \n                    run()\n                \n            \n\n\n            \n                \n                    Defined in src/common/event_service/jobs/announce.job.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        send_announce\n                        \n                    \n                \n            \n            \n                \n                    \n                    send_announce(watchlist: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/common/event_service/jobs/announce.job.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    watchlist\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        announce_discord\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/common/event_service/jobs/announce.job.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        announce_email\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/common/event_service/jobs/announce.job.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { DiscordService } from \"../../util_services/discord.service\";\nimport { WatchListDBService } from \"../../db_services/watchlist/watchListDB.service\";\nimport { MovieDBService } from \"../../db_services/movies/movieDB.service\";\nimport { Movie } from \"@prisma/client\";\nimport { EmailService } from \"../../util_services/email.service\";\n\n@Injectable()\nexport class AnnounceJob {\n\n  private readonly announce_discord;\n  private readonly announce_email\n\n  constructor(private readonly discordService: DiscordService,\n              private readonly watchListDBService: WatchListDBService,\n              private readonly movieDBService: MovieDBService,\n              private readonly emailService: EmailService) {\n    this.announce_discord = (watchlist: string[]) => `\\n` +\n      `Die Wahl ist durch, diese Filme werden geschaut:\\n${watchlist.join(\"\\n\")}\\n` +\n      `Mehr Infos siehe auch ${process.env.FRONTEND_URL}\\n\\n` +\n      `Es gibt Getränke und Atmosphäre auf Spendenbasis!\\n\\n`\n\n    this.announce_email = (watchlist: string[]) => `Die Wahl ist durch, diese Filme werden geschaut:\\n${watchlist.join(\"\\n\")}\\n` +\n      `Mehr Infos siehe auch ${process.env.FRONTEND_URL}\\n\\n` +\n      `Es gibt Getränke und Atmosphäre auf Spendenbasis!\\n\\n`\n  }\n\n  async run() {\n    console.log(\"Announce job started\");\n    const watchlist = await this.watchListDBService.get_all();\n    const output = [] as string[];\n\n    for (const movie of watchlist) {\n      const movie_data = await this.movieDBService.get(movie.imdb_id) as Movie;\n      const start_time = movie.start_time.toLocaleString();\n      output.push(`${start_time} - ${movie_data.title}`);\n    }\n\n    await this.send_announce(output);\n  }\n\n  private async send_announce(watchlist: string[]) {\n    await this.discordService.send_message(this.announce_discord(watchlist));\n    await this.emailService.send_all_opt_in(this.announce_email(watchlist));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nEventModule\n\nEventModule\n\nAppModule -->\n\nEventModule->AppModule\n\n\n\n\n\nMovieModule\n\nMovieModule\n\nAppModule -->\n\nMovieModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nVoteModule\n\nVoteModule\n\nAppModule -->\n\nVoteModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            EventModule\n                        \n                        \n                            MovieModule\n                        \n                        \n                            UserModule\n                        \n                        \n                            VoteModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthModule } from './routes/auth/auth.module';\nimport { UserModule } from './routes/user/user.module';\nimport { ServeStaticModule } from \"@nestjs/serve-static\";\nimport { join } from \"path\";\nimport { MovieModule } from './routes/movie/movie.module';\nimport { VoteModule } from './routes/vote/vote.module';\nimport { EventModule } from \"./common/event_service/event.module\";\nimport { ScheduleModule } from \"@nestjs/schedule\";\n\n@Module({\n  imports: [AuthModule, UserModule, MovieModule, VoteModule, EventModule,\n    ServeStaticModule.forRoot({\n      rootPath: join(__dirname, '..', 'client/dist'),\n    }),\n    ScheduleModule.forRoot()\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                confirm\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                pw_reset\n                            \n                            \n                                    Async\n                                pw_reset_request\n                            \n                            \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        confirm\n                        \n                    \n                \n            \n            \n                \n                    \n                    confirm(challenge: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('confirm/:challenge')\n                \n            \n\n            \n                \n                    Defined in src/routes/auth/auth.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    challenge\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(LocalAuthGuard)@Post('login')\n                \n            \n\n            \n                \n                    Defined in src/routes/auth/auth.controller.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        pw_reset\n                        \n                    \n                \n            \n            \n                \n                    \n                    pw_reset(challenge: string, req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('reset/:challenge')\n                \n            \n\n            \n                \n                    Defined in src/routes/auth/auth.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    challenge\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        pw_reset_request\n                        \n                    \n                \n            \n            \n                \n                    \n                    pw_reset_request(username: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('reset/:username')\n                \n            \n\n            \n                \n                    Defined in src/routes/auth/auth.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')\n                \n            \n\n            \n                \n                    Defined in src/routes/auth/auth.controller.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Request, Post, UseGuards, Get, Param } from \"@nestjs/common\";\nimport { LocalAuthGuard } from './auth.guard';\nimport { AuthService } from './auth.service';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @UseGuards(LocalAuthGuard)\n  @Post('login')\n  async login(@Request() req: any) {\n    return await this.authService.login(req.user);\n  }\n\n  @Post('register')\n  async register(@Request() req: any) {\n    return await this.authService.register(req.body)\n  }\n\n  @Get('confirm/:challenge')\n  async confirm(@Param('challenge') challenge: string) {\n    return await this.authService.confirm(challenge)\n  }\n\n  @Get('reset/:username')\n  async pw_reset_request(@Param('username') username: string) {\n    return await this.authService.pw_reset_request(username)\n  }\n\n  @Post('reset/:challenge')\n  async pw_reset(@Param('challenge') challenge: string, @Request() req: any) {\n    return await this.authService.pw_reset(challenge, req.body.password)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_imports\n\n\n\n\nUserDBModule\n\nUserDBModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUserDBModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nEmailService\n\nEmailService\n\nAuthModule -->\n\nEmailService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nPasswordService\n\nPasswordService\n\nAuthModule -->\n\nPasswordService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/routes/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            EmailService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                        \n                            PasswordService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserDBModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { AuthService } from './auth.service';\nimport { UserDBModule } from '../../common/db_services/users/userDB.module';\nimport { PassportModule } from '@nestjs/passport';\nimport { LocalStrategy } from './local.strategy';\nimport { AuthController } from './auth.controller';\nimport { JwtModule } from '@nestjs/jwt';\nimport { JwtStrategy } from './jwt.stategy';\nimport { EmailService } from \"../../common/util_services/email.service\";\nimport { PasswordService } from \"../../common/util_services/password.service\";\n\n@Module({\n  imports: [\n    UserDBModule,\n    PassportModule,\n    JwtModule.register({\n      secret: process.env.JWT_SECRET,\n      signOptions: { expiresIn: process.env.JWT_EXPIRATION },\n    }),\n  ],\n  providers: [AuthService, LocalStrategy, JwtStrategy, EmailService, PasswordService],\n  controllers: [AuthController],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                confirm\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                pw_reset\n                            \n                            \n                                    Async\n                                pw_reset_request\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userDBService: UserDBService, jwtService: JwtService, emailService: EmailService, passwordService: PasswordService)\n                    \n                \n                        \n                            \n                                Defined in src/routes/auth/auth.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userDBService\n                                                  \n                                                        \n                                                                        UserDBService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        emailService\n                                                  \n                                                        \n                                                                        EmailService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        passwordService\n                                                  \n                                                        \n                                                                        PasswordService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        confirm\n                        \n                    \n                \n            \n            \n                \n                    \n                    confirm(challenge: string)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/auth/auth.service.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    challenge\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(user: any)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/auth/auth.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        pw_reset\n                        \n                    \n                \n            \n            \n                \n                    \n                    pw_reset(challenge: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/auth/auth.service.ts:100\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    challenge\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        pw_reset_request\n                        \n                    \n                \n            \n            \n                \n                    \n                    pw_reset_request(username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/auth/auth.service.ts:85\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(user: any)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/auth/auth.service.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(username: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/auth/auth.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ConflictException,\n  ForbiddenException,\n  Injectable,\n  InternalServerErrorException,\n  NotFoundException\n} from \"@nestjs/common\";\nimport { UserDBService } from '../../common/db_services/users/userDB.service';\nimport { JwtService } from '@nestjs/jwt';\nimport { PrismaClientKnownRequestError } from \"@prisma/client/runtime\";\nimport { EmailService } from \"../../common/util_services/email.service\";\nimport { PasswordService } from \"../../common/util_services/password.service\";\nimport cuid from \"cuid\";\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private readonly userDBService: UserDBService,\n    private readonly jwtService: JwtService,\n    private readonly emailService: EmailService,\n    private readonly passwordService: PasswordService,\n  ) {\n  }\n\n  async validateUser(username: string, password: string): Promise {\n    const user = await this.userDBService.get({\n      username: username\n    });\n    if (user && (await this.passwordService.compare(password, user.password))) {\n      if (!user.verified) {\n        const challenge_url = this.emailService.generate_challenge_url(user.challenge);\n        await this.emailService.send_challenge(user.username, user.name, challenge_url);\n        throw new ForbiddenException('Email not verified. Please check your inbox! If you did not receive an email, please check your spam folder. If you still cannot find it, please contact us.');\n      }\n\n      const { password, ...result } = user;\n      return result;\n    }\n    throw new ForbiddenException('Invalid username or password');\n  }\n\n  async login(user: any) {\n    const payload = { sub: user.id };\n    return {\n      access_token: this.jwtService.sign(payload),\n    };\n  }\n\n  async register(user: any) {\n    const payload = { username: user.username, name: user.name, password: user.password };\n    try {\n      const userDB = await this.userDBService.create(payload);\n      const challenge_url = `${process.env.FRONTEND_URL}login/${userDB.challenge}`;\n      await this.emailService.send_challenge(user.username, user.name, challenge_url);\n      return {\n        message: \"Please confirm you email address by clicking the link that was sent to your inbox. \" +\n          \"If you did not receive an email, please check your spam folder. \" +\n          \"If you still cannot find it, try to log in to receive another confirmation mail!\",\n        show_alert: true\n      };\n\n    } catch (error) {\n      if (error instanceof PrismaClientKnownRequestError) {\n        throw new ConflictException('E-Mail already exists');\n      } else {\n        throw new InternalServerErrorException('Unable to create user');\n      }\n    }\n  }\n\n  async confirm(challenge: string) {\n    const user = await this.userDBService.get({\n      challenge: challenge,\n    });\n    if (user && !user.verified) {\n      await this.userDBService.update({\n        where: { challenge },\n        data: { verified: true },\n      })\n      return { message: \"Email successfully verified! You can now log in.\", show_alert: true };\n    }\n    throw new NotFoundException('Email already verified or challenge not found');\n  }\n\n  async pw_reset_request(username: string) {\n    const user = await this.userDBService.get({ username })\n    if (user) {\n      const challenge = cuid();\n      const challenge_url = this.emailService.generate_pw_challenge_url(challenge);\n      await this.userDBService.update( {where: { username }, data: { pw_reset: true, challenge } } )\n      await this.emailService.send_password_reset(user.username, user.name, challenge_url);\n    }\n\n    return {\n      message: \"A password reset request was sent to the given email if this user account exists\",\n      show_alert: true\n    };\n  }\n\n  async pw_reset(challenge: string, password: string) {\n    const user = await this.userDBService.get({ challenge })\n    if (user && user.pw_reset) {\n      const hashed_password = await this.passwordService.hash(password);\n      await this.userDBService.update({ where: { challenge }, data: { password: hashed_password, pw_reset: false } } )\n      return { message: \"Password successfully reset! You can now log in.\", show_alert: true };\n    }\n    throw new NotFoundException('Password already reset or challenge not found');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DiscordService.html":{"url":"injectables/DiscordService.html","title":"injectable - DiscordService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DiscordService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/util_services/discord.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                webhookClient\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                send_message\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/common/util_services/discord.service.ts:6\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        send_message\n                        \n                    \n                \n            \n            \n                \n                    \n                    send_message(message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/util_services/discord.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        webhookClient\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/common/util_services/discord.service.ts:6\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { WebhookClient } from 'discord.js';\nimport { Injectable } from \"@nestjs/common\";\n\n@Injectable()\nexport class DiscordService {\n  private readonly webhookClient;\n\n  constructor() {\n    this.webhookClient = new WebhookClient({ url: process.env.DISCORD_WEBHOOK_URL as string });\n  }\n\n  async send_message(message: string) {\n    return this.webhookClient.send(message);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/EmailOptInDto.html":{"url":"interfaces/EmailOptInDto.html","title":"interface - EmailOptInDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  EmailOptInDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/user.dto/email_opt_in.dto.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email_opt_in\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email_opt_in\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email_opt_in:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface EmailOptInDto {\n  email_opt_in: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EmailService.html":{"url":"injectables/EmailService.html","title":"injectable - EmailService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EmailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/util_services/email.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                project_name\n                            \n                            \n                                    Private\n                                transporter\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                generate_challenge_url\n                            \n                            \n                                generate_pw_challenge_url\n                            \n                            \n                                    Async\n                                send_all_opt_in\n                            \n                            \n                                    Async\n                                send_challenge\n                            \n                            \n                                    Async\n                                send_password_reset\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userDBService: UserDBService)\n                    \n                \n                        \n                            \n                                Defined in src/common/util_services/email.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userDBService\n                                                  \n                                                        \n                                                                        UserDBService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        generate_challenge_url\n                        \n                    \n                \n            \n            \n                \ngenerate_challenge_url(challenge: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/util_services/email.service.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    challenge\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        generate_pw_challenge_url\n                        \n                    \n                \n            \n            \n                \ngenerate_pw_challenge_url(challenge: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/util_services/email.service.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    challenge\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        send_all_opt_in\n                        \n                    \n                \n            \n            \n                \n                    \n                    send_all_opt_in(body: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/util_services/email.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        send_challenge\n                        \n                    \n                \n            \n            \n                \n                    \n                    send_challenge(dest_mail: string, user_name: string, challenge_url: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/util_services/email.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dest_mail\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user_name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    challenge_url\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        send_password_reset\n                        \n                    \n                \n            \n            \n                \n                    \n                    send_password_reset(dest_mail: string, user_name: string, challenge_url: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/util_services/email.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dest_mail\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user_name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    challenge_url\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        project_name\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.PROJECT_NAME\n                    \n                \n                    \n                        \n                                Defined in src/common/util_services/email.service.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        transporter\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/common/util_services/email.service.ts:10\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\n\nconst nodemailer = require(\"nodemailer\");\nimport { TransportOptions } from \"nodemailer\";\nimport { UserDBService } from \"../db_services/users/userDB.service\";\n\n@Injectable()\nexport class EmailService {\n\n  private transporter;\n  private readonly project_name = process.env.PROJECT_NAME;\n\n  constructor(private readonly userDBService: UserDBService) {\n    this.transporter = nodemailer.createTransport({\n      host: process.env.EMAIL_HOST,\n      port: process.env.EMAIL_PORT,\n      secure: false,\n      auth: {\n        user: process.env.EMAIL_HOST_USER,\n        pass: process.env.EMAIL_HOST_PASSWORD\n      }\n    } as TransportOptions);\n  }\n\n  async send_challenge(dest_mail: string, user_name: string, challenge_url: string) {\n    await this.transporter.sendMail({\n      from: `\"${this.project_name}\" `,\n      to: dest_mail,\n      subject: `[${this.project_name}] Confirm your email!`,\n      text: `Hello ${user_name},\\n\\nplease confirm your email by clicking the following link:\\n${challenge_url}\\n\\n` +\n        `Dear\\n${this.project_name} Team\\n`\n    });\n  }\n\n  async send_password_reset(dest_mail: string, user_name: string, challenge_url: string) {\n    await this.transporter.sendMail({\n      from: `\"${this.project_name}\" `,\n      to: dest_mail,\n      subject: `[${this.project_name}] Password Reset Request!`,\n      text: `Hello ${user_name},\\n\\nplease reset your password by clicking the following link:\\n` +\n        `${challenge_url}\\n\\nDear\\n${this.project_name} Team\\n`\n    });\n  }\n\n  async send_all_opt_in(body: string) {\n    const opt_in_users = await this.userDBService.get_all_opt_in();\n    for (const user of opt_in_users) {\n      await this.transporter.sendMail({\n        from: `\"${this.project_name}\" `,\n        to: user.username,\n        subject: `[${this.project_name}] Announcement!`,\n        text: `Hello ${user.name},\\n\\n${body}\\nDear\\n${this.project_name} Team\\n`\n      });\n    }\n  }\n\n  generate_challenge_url(challenge: string) {\n    return `${process.env.FRONTEND_URL}login/${challenge}`;\n  }\n\n  generate_pw_challenge_url(challenge: string) {\n    return `${process.env.FRONTEND_URL}reset/${challenge}`;\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EventModule.html":{"url":"modules/EventModule.html","title":"module - EventModule","body":"\n                   \n\n\n\n\n    Modules\n    EventModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_EventModule\n\n\n\ncluster_EventModule_providers\n\n\n\ncluster_EventModule_imports\n\n\n\n\nHistoryDBModule\n\nHistoryDBModule\n\n\n\nEventModule\n\nEventModule\n\nEventModule -->\n\nHistoryDBModule->EventModule\n\n\n\n\n\nMovieDBModule\n\nMovieDBModule\n\nEventModule -->\n\nMovieDBModule->EventModule\n\n\n\n\n\nUserDBModule\n\nUserDBModule\n\nEventModule -->\n\nUserDBModule->EventModule\n\n\n\n\n\nVoteDBModule\n\nVoteDBModule\n\nEventModule -->\n\nVoteDBModule->EventModule\n\n\n\n\n\nWatchListDBModule\n\nWatchListDBModule\n\nEventModule -->\n\nWatchListDBModule->EventModule\n\n\n\n\n\nAnnounceJob\n\nAnnounceJob\n\nEventModule -->\n\nAnnounceJob->EventModule\n\n\n\n\n\nDiscordService\n\nDiscordService\n\nEventModule -->\n\nDiscordService->EventModule\n\n\n\n\n\nEmailService\n\nEmailService\n\nEventModule -->\n\nEmailService->EventModule\n\n\n\n\n\nHistoryJob\n\nHistoryJob\n\nEventModule -->\n\nHistoryJob->EventModule\n\n\n\n\n\nWatchListJob\n\nWatchListJob\n\nEventModule -->\n\nWatchListJob->EventModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/event_service/event.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AnnounceJob\n                        \n                        \n                            DiscordService\n                        \n                        \n                            EmailService\n                        \n                        \n                            HistoryJob\n                        \n                        \n                            WatchListJob\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            HistoryDBModule\n                        \n                        \n                            MovieDBModule\n                        \n                        \n                            UserDBModule\n                        \n                        \n                            VoteDBModule\n                        \n                        \n                            WatchListDBModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { HistoryJob } from \"./jobs/history.job\";\nimport { WatchListJob } from \"./jobs/watchlist.job\";\nimport { MovieDBModule } from \"../db_services/movies/movieDB.module\";\nimport { WatchListDBModule } from \"../db_services/watchlist/watchListDB.module\";\nimport { VoteDBModule } from \"../db_services/votes/voteDB.module\";\nimport { HistoryDBModule } from \"../db_services/histroy/historyDB.module\";\nimport { DiscordService } from \"../util_services/discord.service\";\nimport { AnnounceJob } from \"./jobs/announce.job\";\nimport { EmailService } from \"../util_services/email.service\";\nimport { UserDBModule } from \"../db_services/users/userDB.module\";\n\n@Module({\n  imports: [MovieDBModule, WatchListDBModule, VoteDBModule, HistoryDBModule, UserDBModule],\n  providers: [HistoryJob, WatchListJob, AnnounceJob, DiscordService, EmailService]\n})\nexport class EventModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GravatarService.html":{"url":"injectables/GravatarService.html","title":"injectable - GravatarService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GravatarService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/util_services/gravatar.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                generate_gravatar_url\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(passwordService: PasswordService)\n                    \n                \n                        \n                            \n                                Defined in src/common/util_services/gravatar.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        passwordService\n                                                  \n                                                        \n                                                                        PasswordService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        generate_gravatar_url\n                        \n                    \n                \n            \n            \n                \ngenerate_gravatar_url(username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/util_services/gravatar.service.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { PasswordService } from \"./password.service\";\n\n@Injectable()\nexport class GravatarService {\n\n  constructor(private readonly passwordService: PasswordService) {}\n\n  generate_gravatar_url(username: string): string {\n    const trim = username.trim().toLowerCase();\n    const hash = this.passwordService.hash_md5(trim);\n    return `https://www.gravatar.com/avatar/${hash}`;\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HistoryDBModule.html":{"url":"modules/HistoryDBModule.html","title":"module - HistoryDBModule","body":"\n                   \n\n\n\n\n    Modules\n    HistoryDBModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_HistoryDBModule\n\n\n\ncluster_HistoryDBModule_providers\n\n\n\ncluster_HistoryDBModule_exports\n\n\n\n\nHistoryDBService \n\nHistoryDBService \n\n\n\nHistoryDBModule\n\nHistoryDBModule\n\nHistoryDBService  -->\n\nHistoryDBModule->HistoryDBService \n\n\n\n\n\nHistoryDBService\n\nHistoryDBService\n\nHistoryDBModule -->\n\nHistoryDBService->HistoryDBModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nHistoryDBModule -->\n\nPrismaService->HistoryDBModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/db_services/histroy/historyDB.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            HistoryDBService\n                        \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            HistoryDBService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { HistoryDBService } from './historyDB.service';\nimport { PrismaService } from \"../prisma.service\";\n\n@Module({\n  providers: [HistoryDBService, PrismaService],\n  exports: [HistoryDBService]\n})\nexport class HistoryDBModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HistoryDBService.html":{"url":"injectables/HistoryDBService.html","title":"injectable - HistoryDBService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HistoryDBService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/db_services/histroy/historyDB.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                add\n                            \n                            \n                                    Async\n                                get_all\n                            \n                            \n                                    Async\n                                has\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/common/db_services/histroy/historyDB.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        add\n                        \n                    \n                \n            \n            \n                \n                    \n                    add(data: Prisma.HistoryCreateInput)\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/histroy/historyDB.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            Prisma.HistoryCreateInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get_all\n                        \n                    \n                \n            \n            \n                \n                    \n                    get_all()\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/histroy/historyDB.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        has\n                        \n                    \n                \n            \n            \n                \n                    \n                    has(imdb_id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/histroy/historyDB.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    imdb_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { PrismaService } from \"../prisma.service\";\nimport { Prisma } from \"@prisma/client\";\n\n@Injectable()\nexport class HistoryDBService {\n\n  constructor(private readonly prisma: PrismaService) {}\n\n  async get_all() {\n    return await this.prisma.history.findMany();\n  }\n\n  async add(data: Prisma.HistoryCreateInput) {\n    return await this.prisma.history.create({ data });\n  }\n\n  async has(imdb_id: string) {\n    return (await this.prisma.history.count({ where: { imdb_id } })) > 0;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HistoryJob.html":{"url":"injectables/HistoryJob.html","title":"injectable - HistoryJob","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HistoryJob\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/event_service/jobs/history.job.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                run\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(movieDBService: MovieDBService, historyDBService: HistoryDBService, watchListDBService: WatchListDBService, voteDBService: VoteDBService)\n                    \n                \n                        \n                            \n                                Defined in src/common/event_service/jobs/history.job.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        movieDBService\n                                                  \n                                                        \n                                                                        MovieDBService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        historyDBService\n                                                  \n                                                        \n                                                                        HistoryDBService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        watchListDBService\n                                                  \n                                                        \n                                                                        WatchListDBService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        voteDBService\n                                                  \n                                                        \n                                                                        VoteDBService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        run\n                        \n                    \n                \n            \n            \n                \n                    \n                    run()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Cron(: string)\n                \n            \n\n            \n                \n                    Defined in src/common/event_service/jobs/history.job.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { MovieDBService } from \"../../db_services/movies/movieDB.service\";\nimport { HistoryDBService } from \"../../db_services/histroy/historyDB.service\";\nimport { WatchListDBService } from \"../../db_services/watchlist/watchListDB.service\";\nimport { Movie, Prisma } from \"@prisma/client\";\nimport { VoteDBService } from \"../../db_services/votes/voteDB.service\";\nimport { Cron } from \"@nestjs/schedule\";\n\n@Injectable()\nexport class HistoryJob {\n\n  constructor(private readonly movieDBService: MovieDBService,\n              private readonly historyDBService: HistoryDBService,\n              private readonly watchListDBService: WatchListDBService,\n              private readonly voteDBService: VoteDBService) {}\n\n  @Cron(process.env.SCHEDULE_HISTORY as string)\n  async run() {\n    console.log('History job started');\n    const watch_list = await this.watchListDBService.get_all()\n    for (const movie of watch_list) {\n      const movie_data = await this.movieDBService.get(movie.imdb_id) as Movie\n      const data = {\n        imdb_id: movie.imdb_id,\n        title: movie_data.title,\n        link: movie_data.link\n      } as Prisma.HistoryCreateInput\n      await this.historyDBService.add(data)\n      await this.voteDBService.delete_all(movie.imdb_id)\n      await this.watchListDBService.delete(movie.imdb_id)\n      await this.movieDBService.delete(movie.imdb_id)\n    }\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/auth/jwt-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/auth/jwt.stategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/routes/auth/jwt.stategy.ts:7\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/auth/jwt.stategy.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { JwtUser } from \"../../types/jwtuser.type\";\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: process.env.JWT_SECRET,\n    });\n  }\n\n  async validate(payload: any) : Promise {\n    return { id: payload.sub };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JwtUser.html":{"url":"interfaces/JwtUser.html","title":"interface - JwtUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  JwtUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/jwtuser.type.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface JwtUser {\n  id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/auth/auth.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard('local') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/auth/local.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/routes/auth/local.strategy.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(username: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/auth/local.strategy.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy } from 'passport-local';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { AuthService } from './auth.service';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private authService: AuthService) {\n    super();\n  }\n\n  async validate(username: string, password: string): Promise {\n    const user = await this.authService.validateUser(username, password);\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggerMiddleware.html":{"url":"injectables/LoggerMiddleware.html","title":"injectable - LoggerMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggerMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/middleware/logger.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(req: any, res: any, next: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/logger.middleware.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware } from '@nestjs/common';\n\n@Injectable()\nexport class LoggerMiddleware implements NestMiddleware {\n  use(req: any, res: any, next: () => void) {\n    console.log('----------------------------------');\n    console.log('Request Body');\n    console.log('----------------------------------');\n    console.log(req.body)\n    console.log('----------------------------------');\n    next();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LoginDto.html":{"url":"interfaces/LoginDto.html","title":"interface - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/user.dto/login.dto.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            password\n                                        \n                                \n                                \n                                        \n                                            username\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface LoginDto {\n  username: string;\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MovieController.html":{"url":"controllers/MovieController.html","title":"controller - MovieController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MovieController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/movie/movie.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                movie\n            \n\n\n            \n                Description\n            \n            \n                Controller for movie related routes\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                delete_media\n                            \n                            \n                                    Async\n                                get_all_media\n                            \n                            \n                                    Async\n                                get_history\n                            \n                            \n                                    Async\n                                get_media\n                            \n                            \n                                    Async\n                                get_watchlist\n                            \n                            \n                                    Async\n                                post_media\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete_media\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete_media(user: JwtUser, imdb_id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Delete(':imdb_id')\n                \n            \n\n            \n                \n                    Defined in src/routes/movie/movie.controller.ts:74\n                \n            \n\n\n            \n                \n                    PRIVATE DELETE remove a movie from the movie database by a given imdb_id, when the given user is the proposer\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                JwtUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    imdb_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get_all_media\n                        \n                    \n                \n            \n            \n                \n                    \n                    get_all_media()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('all')\n                \n            \n\n            \n                \n                    Defined in src/routes/movie/movie.controller.ts:24\n                \n            \n\n\n            \n                \n                    PUBLIC GET all movies with its related data\n\n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get_history\n                        \n                    \n                \n            \n            \n                \n                    \n                    get_history()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('history')\n                \n            \n\n            \n                \n                    Defined in src/routes/movie/movie.controller.ts:40\n                \n            \n\n\n            \n                \n                    PUBLIC GET all movies from history with its related data\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get_media\n                        \n                    \n                \n            \n            \n                \n                    \n                    get_media(imdb_id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get(':imdb_id')\n                \n            \n\n            \n                \n                    Defined in src/routes/movie/movie.controller.ts:50\n                \n            \n\n\n            \n                \n                    PRIVATE GET information about a specific movie given by its imdb_id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    imdb_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get_watchlist\n                        \n                    \n                \n            \n            \n                \n                    \n                    get_watchlist()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('watchlist')\n                \n            \n\n            \n                \n                    Defined in src/routes/movie/movie.controller.ts:32\n                \n            \n\n\n            \n                \n                    PUBLIC GET all movies from watchlist with its related data\n\n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        post_media\n                        \n                    \n                \n            \n            \n                \n                    \n                    post_media(user: JwtUser, imdb_id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post(':imdb_id')\n                \n            \n\n            \n                \n                    Defined in src/routes/movie/movie.controller.ts:63\n                \n            \n\n\n            \n                \n                    PRIVATE POST add a movie to the movie database by a given imdb_id.\nThis is only possible if the movie is not already in the movie, watchlist or history database!\nThe given user will be the proposer of the movie.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                JwtUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    imdb_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, Post, UseGuards } from \"@nestjs/common\";\nimport { MovieService } from \"./movie.service\";\nimport { JwtAuthGuard } from \"../auth/jwt-auth.guard\";\nimport { User } from \"../../common/decorators/user.decorator\";\nimport { JwtUser } from \"../../types/jwtuser.type\";\nimport { MovieExtType } from \"../../types/movie.types/movie_ext.type\";\nimport { WatchlistExtType } from \"../../types/movie.types/watchlist_ext.type\";\nimport { History, Vote, Movie } from \"@prisma/client\";\nimport imdb from \"imdb-api\";\nimport { ResDto } from \"../../types/res.dto\";\n\n/**\n * Controller for movie related routes\n */\n@Controller('movie')\nexport class MovieController {\n\n  constructor(private readonly movieService: MovieService) {}\n\n  /**\n   * PUBLIC GET all movies with its related data\n   */\n  @Get('all')\n  async get_all_media() : Promise {\n    return await this.movieService.get_all()\n  }\n\n  /**\n   * PUBLIC GET all movies from watchlist with its related data\n   */\n  @Get('watchlist')\n  async get_watchlist() : Promise {\n    return await this.movieService.get_watchlist()\n  }\n\n  /**\n   * PUBLIC GET all movies from history with its related data\n   */\n  @Get('history')\n  async get_history() : Promise {\n    return await this.movieService.get_history()\n  }\n\n  /**\n   * PRIVATE GET information about a specific movie given by its imdb_id\n   * @param imdb_id\n   */\n  @UseGuards(JwtAuthGuard)\n  @Get(':imdb_id')\n  async get_media(@Param('imdb_id') imdb_id: string) : Promise {\n    return await this.movieService.get(imdb_id)\n  }\n\n  /**\n   * PRIVATE POST add a movie to the movie database by a given imdb_id.\n   * This is only possible if the movie is not already in the movie, watchlist or history database!\n   * The given user will be the proposer of the movie.\n   * @param user\n   * @param imdb_id\n   */\n  @UseGuards(JwtAuthGuard)\n  @Post(':imdb_id')\n  async post_media(@User() user: JwtUser, @Param('imdb_id') imdb_id: string): Promise {\n    return await this.movieService.save(imdb_id, user.id)\n  }\n\n  /**\n   * PRIVATE DELETE remove a movie from the movie database by a given imdb_id, when the given user is the proposer\n   * @param user\n   * @param imdb_id\n   */\n  @UseGuards(JwtAuthGuard)\n  @Delete(':imdb_id')\n  async delete_media(@User() user: JwtUser, @Param('imdb_id') imdb_id: string) : Promise {\n    return await this.movieService.delete(imdb_id, user.id)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MovieDBModule.html":{"url":"modules/MovieDBModule.html","title":"module - MovieDBModule","body":"\n                   \n\n\n\n\n    Modules\n    MovieDBModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_MovieDBModule\n\n\n\ncluster_MovieDBModule_providers\n\n\n\ncluster_MovieDBModule_exports\n\n\n\n\nMovieDBService \n\nMovieDBService \n\n\n\nMovieDBModule\n\nMovieDBModule\n\nMovieDBService  -->\n\nMovieDBModule->MovieDBService \n\n\n\n\n\nMovieDBService\n\nMovieDBService\n\nMovieDBModule -->\n\nMovieDBService->MovieDBModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nMovieDBModule -->\n\nPrismaService->MovieDBModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/db_services/movies/movieDB.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MovieDBService\n                        \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MovieDBService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MovieDBService } from './movieDB.service';\nimport { PrismaService } from \"../prisma.service\";\n\n@Module({\n  providers: [MovieDBService, PrismaService],\n  exports: [MovieDBService]\n})\nexport class MovieDBModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MovieDBService.html":{"url":"injectables/MovieDBService.html","title":"injectable - MovieDBService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MovieDBService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/db_services/movies/movieDB.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                add\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                delete_all_proposed\n                            \n                            \n                                    Async\n                                get\n                            \n                            \n                                    Async\n                                get_all\n                            \n                            \n                                    Async\n                                get_all_proposed\n                            \n                            \n                                    Async\n                                get_imdb\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/common/db_services/movies/movieDB.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        add\n                        \n                    \n                \n            \n            \n                \n                    \n                    add(data: Prisma.MovieCreateInput)\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/movies/movieDB.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            Prisma.MovieCreateInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(imdb_id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/movies/movieDB.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    imdb_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete_all_proposed\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete_all_proposed(user_id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/movies/movieDB.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user_id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(imdb_id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/movies/movieDB.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    imdb_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get_all\n                        \n                    \n                \n            \n            \n                \n                    \n                    get_all()\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/movies/movieDB.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get_all_proposed\n                        \n                    \n                \n            \n            \n                \n                    \n                    get_all_proposed(user_id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/movies/movieDB.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user_id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get_imdb\n                        \n                    \n                \n            \n            \n                \n                    \n                    get_imdb(imdb_id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/movies/movieDB.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    imdb_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PrismaService } from \"../prisma.service\";\nimport { Prisma } from \"@prisma/client\";\n\n@Injectable()\nexport class MovieDBService {\n\n  constructor(private readonly prisma: PrismaService) {}\n\n  async get(imdb_id : string) {\n    return await this.prisma.movie.findUnique({\n      where: { imdb_id },\n    });\n  }\n\n  async get_imdb(imdb_id: string) {\n    return await this.prisma.movie.findUnique({\n      where: { imdb_id },\n    });\n  }\n\n  async get_all() {\n    return await this.prisma.movie.findMany();\n  }\n\n  async get_all_proposed(user_id : number) {\n    return await this.prisma.movie.findMany({\n      where: { proposer_id: user_id }\n    });\n  }\n\n  async add(data: Prisma.MovieCreateInput) {\n    return await this.prisma.movie.create({ data });\n  }\n\n  async delete(imdb_id: string) {\n    return await this.prisma.movie.delete({ where: { imdb_id } });\n  }\n\n  async delete_all_proposed(user_id : number) {\n    return await this.prisma.movie.deleteMany({\n      where: { proposer_id: user_id } as Prisma.MovieWhereUniqueInput\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MovieExtType.html":{"url":"interfaces/MovieExtType.html","title":"interface - MovieExtType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MovieExtType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/movie.types/movie_ext.type.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            createdAt\n                                        \n                                \n                                \n                                        \n                                            genre\n                                        \n                                \n                                \n                                        \n                                            imdb_id\n                                        \n                                \n                                \n                                        \n                                            link\n                                        \n                                \n                                \n                                        \n                                            proposer\n                                        \n                                \n                                \n                                        \n                                            proposer_id\n                                        \n                                \n                                \n                                        \n                                            title\n                                        \n                                \n                                \n                                        \n                                            votes\n                                        \n                                \n                                \n                                        \n                                            year\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        createdAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        createdAt:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        genre\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        genre:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        imdb_id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        imdb_id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        link\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        link:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        proposer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        proposer:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        proposer_id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        proposer_id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        votes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        votes:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        year\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        year:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface MovieExtType {\n  imdb_id: string,\n  title: string,\n  link: string,\n  year: number,\n  genre: string,\n  proposer: string,\n  proposer_id: number,\n  createdAt: Date,\n  votes: number\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MovieModule.html":{"url":"modules/MovieModule.html","title":"module - MovieModule","body":"\n                   \n\n\n\n\n    Modules\n    MovieModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_MovieModule\n\n\n\ncluster_MovieModule_imports\n\n\n\ncluster_MovieModule_providers\n\n\n\n\nHistoryDBModule\n\nHistoryDBModule\n\n\n\nMovieModule\n\nMovieModule\n\nMovieModule -->\n\nHistoryDBModule->MovieModule\n\n\n\n\n\nMovieDBModule\n\nMovieDBModule\n\nMovieModule -->\n\nMovieDBModule->MovieModule\n\n\n\n\n\nUserDBModule\n\nUserDBModule\n\nMovieModule -->\n\nUserDBModule->MovieModule\n\n\n\n\n\nVoteDBModule\n\nVoteDBModule\n\nMovieModule -->\n\nVoteDBModule->MovieModule\n\n\n\n\n\nWatchListDBModule\n\nWatchListDBModule\n\nMovieModule -->\n\nWatchListDBModule->MovieModule\n\n\n\n\n\nMovieService\n\nMovieService\n\nMovieModule -->\n\nMovieService->MovieModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nMovieModule -->\n\nPrismaService->MovieModule\n\n\n\n\n\nVoteService\n\nVoteService\n\nMovieModule -->\n\nVoteService->MovieModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/routes/movie/movie.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MovieService\n                        \n                        \n                            PrismaService\n                        \n                        \n                            VoteService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MovieController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            HistoryDBModule\n                        \n                        \n                            MovieDBModule\n                        \n                        \n                            UserDBModule\n                        \n                        \n                            VoteDBModule\n                        \n                        \n                            WatchListDBModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MovieController } from './movie.controller';\nimport { MovieService } from './movie.service';\nimport { PrismaService } from \"../../common/db_services/prisma.service\";\nimport { MovieDBModule } from \"../../common/db_services/movies/movieDB.module\";\nimport { UserDBModule } from \"../../common/db_services/users/userDB.module\";\nimport { VoteDBModule } from \"../../common/db_services/votes/voteDB.module\";\nimport { VoteService } from \"../vote/vote.service\";\nimport { HistoryDBModule } from \"../../common/db_services/histroy/historyDB.module\";\nimport { WatchListDBModule } from \"../../common/db_services/watchlist/watchListDB.module\";\n\n@Module({\n  imports: [MovieDBModule, UserDBModule, VoteDBModule, HistoryDBModule, WatchListDBModule],\n  controllers: [MovieController],\n  providers: [PrismaService, MovieService, VoteService]\n})\nexport class MovieModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MovieService.html":{"url":"injectables/MovieService.html","title":"injectable - MovieService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MovieService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/movie/movie.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                imdb\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                get\n                            \n                            \n                                    Async\n                                get_all\n                            \n                            \n                                    Async\n                                get_history\n                            \n                            \n                                    Async\n                                get_watchlist\n                            \n                            \n                                    Async\n                                save\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(movieDBService: MovieDBService, userDBService: UserDBService, voteDBService: VoteDBService, histroyDBService: HistoryDBService, watchlistDBService: WatchListDBService, voteService: VoteService)\n                    \n                \n                        \n                            \n                                Defined in src/routes/movie/movie.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        movieDBService\n                                                  \n                                                        \n                                                                        MovieDBService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userDBService\n                                                  \n                                                        \n                                                                        UserDBService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        voteDBService\n                                                  \n                                                        \n                                                                        VoteDBService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        histroyDBService\n                                                  \n                                                        \n                                                                        HistoryDBService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        watchlistDBService\n                                                  \n                                                        \n                                                                        WatchListDBService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        voteService\n                                                  \n                                                        \n                                                                        VoteService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(imdb_id: string, proposer_id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/movie/movie.service.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    imdb_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    proposer_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(imdb_id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/movie/movie.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    imdb_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get_all\n                        \n                    \n                \n            \n            \n                \n                    \n                    get_all()\n                \n            \n\n\n            \n                \n                    Defined in src/routes/movie/movie.service.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get_history\n                        \n                    \n                \n            \n            \n                \n                    \n                    get_history()\n                \n            \n\n\n            \n                \n                    Defined in src/routes/movie/movie.service.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get_watchlist\n                        \n                    \n                \n            \n            \n                \n                    \n                    get_watchlist()\n                \n            \n\n\n            \n                \n                    Defined in src/routes/movie/movie.service.ts:109\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        save\n                        \n                    \n                \n            \n            \n                \n                    \n                    save(imdb_id: string, proposer_id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/movie/movie.service.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    imdb_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    proposer_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        imdb\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Client\n\n                    \n                \n                    \n                        \n                                Defined in src/routes/movie/movie.service.ts:19\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Client } from \"imdb-api\";\nimport { MovieDBService } from \"../../common/db_services/movies/movieDB.service\";\nimport { Prisma, User, Movie } from \"@prisma/client\";\nimport { UserDBService } from \"../../common/db_services/users/userDB.service\";\nimport { VoteDBService } from \"../../common/db_services/votes/voteDB.service\";\nimport { VoteService } from \"../vote/vote.service\";\nimport { HistoryDBService } from \"../../common/db_services/histroy/historyDB.service\";\nimport { WatchListDBService } from \"../../common/db_services/watchlist/watchListDB.service\";\nimport { MovieExtType } from \"../../types/movie.types/movie_ext.type\";\nimport { WatchlistExtType } from \"../../types/movie.types/watchlist_ext.type\";\nimport { ResDto } from \"../../types/res.dto\";\n\n\n\n@Injectable()\nexport class MovieService {\n\n  private readonly imdb: Client\n\n  constructor(private readonly movieDBService: MovieDBService,\n              private readonly userDBService: UserDBService,\n              private readonly voteDBService: VoteDBService,\n              private readonly histroyDBService: HistoryDBService,\n              private readonly watchlistDBService: WatchListDBService,\n              private readonly voteService: VoteService) {\n    this.imdb = new Client({apiKey: process.env.OMDB_API_KEY})\n  }\n\n  async get(imdb_id: string) {\n    try {\n      return await this.imdb.get({ id: imdb_id })\n    } catch (e) {\n      throw new NotFoundException('Movie not found')\n    }\n  }\n\n  async get_all() {\n    const movies = await this.movieDBService.get_all()\n    return await Promise.all(movies.map(async (movie) => {\n      const user = await this.userDBService.get({ id: movie.proposer_id }) as User\n      const votes = await this.voteDBService.get_num_of_votes(movie.imdb_id)\n\n      return {\n        imdb_id: movie.imdb_id,\n        title: movie.title,\n        link: movie.link,\n        year: movie.year,\n        genre: movie.genre,\n        proposer: user.name,\n        proposer_id: user.id,\n        createdAt: movie.createdAt,\n        votes\n      } as MovieExtType;\n    }));\n  }\n\n  async save(imdb_id: string, proposer_id: string) {\n    if (await this.histroyDBService.has(imdb_id)) {\n      throw new ConflictException('Movie is already in history')\n    }\n\n    const movie = await this.get(imdb_id)\n    const { username } : Prisma.UserCreateInput = await this.userDBService.get({id: Number(proposer_id)}) as User\n\n    const movieDB_data: Prisma.MovieCreateInput = {\n      imdb_id: imdb_id,\n      title: movie.title,\n      year: movie.year,\n      genre: movie.genres,\n      link: movie.imdburl,\n      proposer: { connect: { username } } as Prisma.UserCreateNestedOneWithoutMovieInput,\n      runtime: Number((movie.runtime.split(\" \"))[0])\n    }\n\n    try {\n      return this.movieDBService.add(movieDB_data).then((movie) => {\n        return this.voteService.vote(movie.imdb_id, Number(proposer_id))\n          .then((vote) => {\n            return { movie, vote }\n          })\n          .catch((e) => {\n            this.movieDBService.delete(movie.imdb_id)\n            throw e\n          })\n      })\n    } catch (e) {\n      throw new ConflictException('Movie already exists')\n    }\n  }\n\n  async delete(imdb_id: string, proposer_id: string) {\n    const movie = await this.movieDBService.get(imdb_id) as Movie\n    const watchlist = await this.watchlistDBService.get_all()\n    const watchlist_imdbs = watchlist.map((movie) => movie.imdb_id)\n\n    if (watchlist_imdbs.includes(imdb_id)) {\n      throw new ConflictException('Movie is in watchlist')\n    }\n    else if (movie.proposer_id === Number(proposer_id)) {\n      await this.voteDBService.delete_all(imdb_id)\n      await this.movieDBService.delete(imdb_id)\n      return { message: \"Successfully deleted movie: \" + movie.title, show_alert: true } as ResDto\n    } else {\n      throw new NotFoundException('Movie not found or you are not the proposer')\n    }\n  }\n\n  async get_watchlist() {\n    const watchlist = await this.watchlistDBService.get_all()\n\n    return await Promise.all(watchlist.map(async (watch_movie) => {\n      const movie = await this.movieDBService.get(watch_movie.imdb_id) as Movie\n      const votes = await this.voteDBService.get_votes_movie(movie.imdb_id)\n      return {\n        imdb_id: movie.imdb_id,\n        title: movie.title,\n        link: movie.link,\n        start_time: watch_movie.start_time,\n        interested: votes.map((vote) => vote.user.id)\n      } as WatchlistExtType\n    }))\n  }\n\n  async get_history() {\n    return await this.histroyDBService.get_all()\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PasswordDto.html":{"url":"interfaces/PasswordDto.html","title":"interface - PasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/user.dto/password.dto.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            password\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            password_confirm\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password_confirm\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password_confirm:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface PasswordDto {\n  password: string;\n  password_confirm?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PasswordNewDto.html":{"url":"interfaces/PasswordNewDto.html","title":"interface - PasswordNewDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PasswordNewDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/user.dto/password_new.dto.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            password\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            password_confirm\n                                        \n                                \n                                \n                                        \n                                            password_old\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password_confirm\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password_confirm:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password_old\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password_old:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface PasswordNewDto {\n  password_old: string;\n  password: string;\n  password_confirm?: string;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PasswordService.html":{"url":"injectables/PasswordService.html","title":"injectable - PasswordService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PasswordService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/util_services/password.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                compare\n                            \n                            \n                                    Async\n                                hash\n                            \n                            \n                                hash_md5\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        compare\n                        \n                    \n                \n            \n            \n                \n                    \n                    compare(password: string, hash: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/util_services/password.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    hash\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        hash\n                        \n                    \n                \n            \n            \n                \n                    \n                    hash(password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/util_services/password.service.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hash_md5\n                        \n                    \n                \n            \n            \n                \nhash_md5(string: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/util_services/password.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    string\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\n\nconst bcrypt = require('bcrypt');\nimport md5 from \"crypto-js/md5\";\n\n@Injectable()\nexport class PasswordService {\n\n  async hash(password: string): Promise {\n    return bcrypt.hash(password, 10);\n  }\n\n  hash_md5(string: string): string {\n    return md5(string).toString();\n  }\n\n  async compare(password: string, hash: string): Promise {\n    return bcrypt.compare(password, hash);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/db_services/prisma.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                enableShutdownHooks\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        enableShutdownHooks\n                        \n                    \n                \n            \n            \n                \n                    \n                    enableShutdownHooks(app: INestApplication)\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/prisma.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n                                    \n                                            INestApplication\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/prisma.service.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { INestApplication, Injectable, OnModuleInit } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n@Injectable()\nexport class PrismaService extends PrismaClient implements OnModuleInit {\n  async onModuleInit() {\n    await this.$connect();\n  }\n\n  async enableShutdownHooks(app: INestApplication) {\n    this.$on('beforeExit', async () => {\n      await app.close();\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ProfileDto.html":{"url":"interfaces/ProfileDto.html","title":"interface - ProfileDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ProfileDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/user.dto/profile.dto.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            use_gravatar\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        use_gravatar\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        use_gravatar:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ProfileDto {\n  name: string;\n  use_gravatar?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ResDto.html":{"url":"interfaces/ResDto.html","title":"interface - ResDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ResDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/res.dto.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            message\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            show_alert\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        show_alert\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        show_alert:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ResDto {\n  message: string;\n  show_alert?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n            \n                Description\n            \n            \n                Controller for user related routes\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                change_password\n                            \n                            \n                                    Async\n                                change_username\n                            \n                            \n                                    Async\n                                check_profile\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                email_opt_in\n                            \n                            \n                                    Async\n                                get\n                            \n                            \n                                    Async\n                                get_data\n                            \n                            \n                                    Async\n                                get_user\n                            \n                            \n                                    Async\n                                update_profile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        change_password\n                        \n                    \n                \n            \n            \n                \n                    \n                    change_password(user: JwtUser, body: PasswordNewDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post('password')\n                \n            \n\n            \n                \n                    Defined in src/routes/user/user.controller.ts:92\n                \n            \n\n\n            \n                \n                    PRIVATE POST update password\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                JwtUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                PasswordNewDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        change_username\n                        \n                    \n                \n            \n            \n                \n                    \n                    change_username(user: JwtUser, body: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post('username')\n                \n            \n\n            \n                \n                    Defined in src/routes/user/user.controller.ts:81\n                \n            \n\n\n            \n                \n                    PRIVATE POST update username (email)\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                JwtUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        check_profile\n                        \n                    \n                \n            \n            \n                \n                    \n                    check_profile()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('check')\n                \n            \n\n            \n                \n                    Defined in src/routes/user/user.controller.ts:101\n                \n            \n\n\n            \n                \n                    PRIVATE GET check if bearer token is valid\n\n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(user: JwtUser, body: PasswordDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Delete()\n                \n            \n\n            \n                \n                    Defined in src/routes/user/user.controller.ts:60\n                \n            \n\n\n            \n                \n                    PRIVATE DELETE user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                JwtUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                PasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        email_opt_in\n                        \n                    \n                \n            \n            \n                \n                    \n                    email_opt_in(user: JwtUser, body: EmailOptInDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post('email_opt_in')\n                \n            \n\n            \n                \n                    Defined in src/routes/user/user.controller.ts:49\n                \n            \n\n\n            \n                \n                    PRIVATE POST update email_opt_in (set/unset on newsletter)\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                JwtUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                EmailOptInDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(user: JwtUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get()\n                \n            \n\n            \n                \n                    Defined in src/routes/user/user.controller.ts:27\n                \n            \n\n\n            \n                \n                    PRIVATE GET user data\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                JwtUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get_data\n                        \n                    \n                \n            \n            \n                \n                    \n                    get_data(user: JwtUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('data')\n                \n            \n\n            \n                \n                    Defined in src/routes/user/user.controller.ts:70\n                \n            \n\n\n            \n                \n                    PRIVATE GET all saved user data\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                JwtUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get_user\n                        \n                    \n                \n            \n            \n                \n                    \n                    get_user(user_id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':user_id')\n                \n            \n\n            \n                \n                    Defined in src/routes/user/user.controller.ts:110\n                \n            \n\n\n            \n                \n                    PUBLIC GET public user data from given user_id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update_profile\n                        \n                    \n                \n            \n            \n                \n                    \n                    update_profile(user: JwtUser, body: ProfileDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post()\n                \n            \n\n            \n                \n                    Defined in src/routes/user/user.controller.ts:38\n                \n            \n\n\n            \n                \n                    PRIVATE POST update profile information (name, gravatar)\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                JwtUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                ProfileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, UseGuards, Post, Delete, Param, Body } from \"@nestjs/common\";\nimport { JwtAuthGuard } from '../auth/jwt-auth.guard';\nimport { UserService } from \"./user.service\";\nimport { User } from \"../../common/decorators/user.decorator\";\nimport { JwtUser } from \"../../types/jwtuser.type\";\nimport { ProfileDto } from \"../../types/user.dto/profile.dto\";\nimport { EmailOptInDto } from \"../../types/user.dto/email_opt_in.dto\";\nimport { PasswordDto } from \"../../types/user.dto/password.dto\";\nimport { LoginDto } from \"../../types/user.dto/login.dto\";\nimport { PasswordNewDto } from \"../../types/user.dto/password_new.dto\";\nimport { ResDto } from \"../../types/res.dto\";\n\n/**\n * Controller for user related routes\n */\n@Controller('user')\nexport class UserController {\n\n  constructor(private readonly userService: UserService) {}\n\n  /**\n   * PRIVATE GET user data\n   * @param user\n   */\n  @UseGuards(JwtAuthGuard)\n  @Get()\n  async get(@User() user: JwtUser) {\n    return await this.userService.get(Number(user.id));\n  }\n\n  /**\n   * PRIVATE POST update profile information (name, gravatar)\n   * @param user\n   * @param body\n   */\n  @UseGuards(JwtAuthGuard)\n  @Post()\n  async update_profile(@User() user: JwtUser, @Body() body: ProfileDto): Promise {\n    return await this.userService.change_profile(Number(user.id), body);\n  }\n\n  /**\n   * PRIVATE POST update email_opt_in (set/unset on newsletter)\n   * @param user\n   * @param body\n   */\n  @UseGuards(JwtAuthGuard)\n  @Post('email_opt_in')\n  async email_opt_in(@User() user: JwtUser, @Body() body: EmailOptInDto): Promise {\n    return await this.userService.email_opt_in(Number(user.id), Boolean(body.email_opt_in));\n  }\n\n  /**\n   * PRIVATE DELETE user\n   * @param user\n   * @param body\n   */\n  @UseGuards(JwtAuthGuard)\n  @Delete()\n  async delete(@User() user: JwtUser, @Body() body: PasswordDto): Promise {\n    return await this.userService.delete(Number(user.id), body.password);\n  }\n\n  /**\n   * PRIVATE GET all saved user data\n   * @param user\n   */\n  @UseGuards(JwtAuthGuard)\n  @Get('data')\n  async get_data(@User() user: JwtUser) {\n    return await this.userService.get_user_data(Number(user.id));\n  }\n\n  /**\n   * PRIVATE POST update username (email)\n   * @param user\n   * @param body\n   */\n  @UseGuards(JwtAuthGuard)\n  @Post('username')\n  async change_username(@User() user: JwtUser, @Body() body: LoginDto): Promise {\n    return await this.userService.change_username(Number(user.id), body.username, body.password);\n  }\n\n  /**\n   * PRIVATE POST update password\n   * @param user\n   * @param body\n   */\n  @UseGuards(JwtAuthGuard)\n  @Post('password')\n  async change_password(@User() user: JwtUser, @Body() body: PasswordNewDto): Promise {\n    return await this.userService.change_password(Number(user.id), body.password, body.password_old);\n  }\n\n  /**\n   * PRIVATE GET check if bearer token is valid\n   */\n  @UseGuards(JwtAuthGuard)\n  @Get('check')\n  async check_profile() {\n    return true;\n  }\n\n  /**\n   * PUBLIC GET public user data from given user_id\n   * @param user_id\n   */\n  @Get(':user_id')\n  async get_user(@Param('user_id') user_id: string) {\n    return await this.userService.get_public(Number(user_id));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserDBModule.html":{"url":"modules/UserDBModule.html","title":"module - UserDBModule","body":"\n                   \n\n\n\n\n    Modules\n    UserDBModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserDBModule\n\n\n\ncluster_UserDBModule_providers\n\n\n\ncluster_UserDBModule_exports\n\n\n\n\nUserDBService \n\nUserDBService \n\n\n\nUserDBModule\n\nUserDBModule\n\nUserDBService  -->\n\nUserDBModule->UserDBService \n\n\n\n\n\nPasswordService\n\nPasswordService\n\nUserDBModule -->\n\nPasswordService->UserDBModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nUserDBModule -->\n\nPrismaService->UserDBModule\n\n\n\n\n\nUserDBService\n\nUserDBService\n\nUserDBModule -->\n\nUserDBService->UserDBModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/db_services/users/userDB.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PasswordService\n                        \n                        \n                            PrismaService\n                        \n                        \n                            UserDBService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserDBService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UserDBService } from './userDB.service';\nimport { PrismaService } from '../prisma.service';\nimport { PasswordService } from \"../../util_services/password.service\";\n\n@Module({\n  providers: [UserDBService, PrismaService, PasswordService],\n  exports: [UserDBService],\n})\nexport class UserDBModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserDBService.html":{"url":"injectables/UserDBService.html","title":"injectable - UserDBService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserDBService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/db_services/users/userDB.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                get\n                            \n                            \n                                    Async\n                                get_all\n                            \n                            \n                                    Async\n                                get_all_opt_in\n                            \n                            \n                                    Async\n                                has_user\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService, passwordService: PasswordService)\n                    \n                \n                        \n                            \n                                Defined in src/common/db_services/users/userDB.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        passwordService\n                                                  \n                                                        \n                                                                        PasswordService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data: Prisma.UserCreateInput)\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/users/userDB.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                Prisma.UserCreateInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(where: Prisma.UserWhereUniqueInput)\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/users/userDB.service.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    where\n                                    \n                                                Prisma.UserWhereUniqueInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(userWhereUniqueInput: Prisma.UserWhereUniqueInput)\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/users/userDB.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userWhereUniqueInput\n                                    \n                                                Prisma.UserWhereUniqueInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get_all\n                        \n                    \n                \n            \n            \n                \n                    \n                    get_all()\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/users/userDB.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get_all_opt_in\n                        \n                    \n                \n            \n            \n                \n                    \n                    get_all_opt_in()\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/users/userDB.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        has_user\n                        \n                    \n                \n            \n            \n                \n                    \n                    has_user(username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/users/userDB.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(params: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/users/userDB.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PrismaService } from '../prisma.service';\nimport { User, Prisma } from '@prisma/client';\nimport { PasswordService } from \"../../util_services/password.service\";\n\n@Injectable()\nexport class UserDBService {\n  constructor(private readonly prisma: PrismaService,\n              private readonly passwordService: PasswordService) {}\n\n  async get(\n    userWhereUniqueInput: Prisma.UserWhereUniqueInput,\n  ): Promise {\n    return this.prisma.user.findUnique({\n      where: userWhereUniqueInput,\n    });\n  }\n\n  async has_user(username: string): Promise {\n    return (await this.prisma.user.count({ where: {username} })) > 0;\n  }\n\n  async get_all(): Promise {\n    return this.prisma.user.findMany();\n  }\n\n  async get_all_opt_in() : Promise {\n    return this.prisma.user.findMany({ where: { email_opt_in: true } });\n  }\n\n  async create(data: Prisma.UserCreateInput): Promise {\n    data.password = await this.passwordService.hash(data.password);\n    return this.prisma.user.create({ data });\n  }\n\n  async update(params: {\n    where: Prisma.UserWhereUniqueInput;\n    data: Prisma.UserUpdateInput;\n  }): Promise {\n    const { where, data } = params;\n    return this.prisma.user.update({\n      data,\n      where,\n    });\n  }\n\n  async delete(where: Prisma.UserWhereUniqueInput): Promise {\n    return this.prisma.user.delete({ where });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserModule\n\n\n\ncluster_UserModule_imports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nMovieDBModule\n\nMovieDBModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nMovieDBModule->UserModule\n\n\n\n\n\nUserDBModule\n\nUserDBModule\n\nUserModule -->\n\nUserDBModule->UserModule\n\n\n\n\n\nVoteDBModule\n\nVoteDBModule\n\nUserModule -->\n\nVoteDBModule->UserModule\n\n\n\n\n\nWatchListDBModule\n\nWatchListDBModule\n\nUserModule -->\n\nWatchListDBModule->UserModule\n\n\n\n\n\nEmailService\n\nEmailService\n\nUserModule -->\n\nEmailService->UserModule\n\n\n\n\n\nGravatarService\n\nGravatarService\n\nUserModule -->\n\nGravatarService->UserModule\n\n\n\n\n\nPasswordService\n\nPasswordService\n\nUserModule -->\n\nPasswordService->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/routes/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EmailService\n                        \n                        \n                            GravatarService\n                        \n                        \n                            PasswordService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            MovieDBModule\n                        \n                        \n                            UserDBModule\n                        \n                        \n                            VoteDBModule\n                        \n                        \n                            WatchListDBModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UserController } from './user.controller';\nimport { UserService } from \"./user.service\";\nimport { UserDBModule } from \"../../common/db_services/users/userDB.module\";\nimport { MovieDBModule } from \"../../common/db_services/movies/movieDB.module\";\nimport { VoteDBModule } from \"../../common/db_services/votes/voteDB.module\";\nimport { PasswordService } from \"../../common/util_services/password.service\";\nimport { EmailService } from \"../../common/util_services/email.service\";\nimport { GravatarService } from \"../../common/util_services/gravatar.service\";\nimport { WatchListDBModule } from \"../../common/db_services/watchlist/watchListDB.module\";\n\n@Module({\n  imports: [UserDBModule, MovieDBModule, VoteDBModule, WatchListDBModule],\n  controllers: [UserController],\n  providers: [UserService, PasswordService, EmailService, GravatarService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                change_password\n                            \n                            \n                                    Async\n                                change_profile\n                            \n                            \n                                    Async\n                                change_username\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                email_opt_in\n                            \n                            \n                                    Async\n                                get\n                            \n                            \n                                    Async\n                                get_public\n                            \n                            \n                                    Async\n                                get_user_data\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(movieDBService: MovieDBService, userDBService: UserDBService, voteDBService: VoteDBService, watchListDBService: WatchListDBService, passwordService: PasswordService, emailService: EmailService, gravatarService: GravatarService)\n                    \n                \n                        \n                            \n                                Defined in src/routes/user/user.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        movieDBService\n                                                  \n                                                        \n                                                                        MovieDBService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userDBService\n                                                  \n                                                        \n                                                                        UserDBService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        voteDBService\n                                                  \n                                                        \n                                                                        VoteDBService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        watchListDBService\n                                                  \n                                                        \n                                                                        WatchListDBService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        passwordService\n                                                  \n                                                        \n                                                                        PasswordService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        emailService\n                                                  \n                                                        \n                                                                        EmailService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        gravatarService\n                                                  \n                                                        \n                                                                        GravatarService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        change_password\n                        \n                    \n                \n            \n            \n                \n                    \n                    change_password(user_id: number, password_new: string, password_old: string)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/user/user.service.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user_id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password_new\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password_old\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        change_profile\n                        \n                    \n                \n            \n            \n                \n                    \n                    change_profile(user_id: number, data: ProfileDto)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/user/user.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user_id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                ProfileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        change_username\n                        \n                    \n                \n            \n            \n                \n                    \n                    change_username(user_id: number, new_username: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/user/user.service.ts:86\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user_id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    new_username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(user_id: number, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/user/user.service.ts:113\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user_id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        email_opt_in\n                        \n                    \n                \n            \n            \n                \n                    \n                    email_opt_in(user_id: number, opt_in: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/user/user.service.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user_id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    opt_in\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(user_id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/user/user.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user_id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get_public\n                        \n                    \n                \n            \n            \n                \n                    \n                    get_public(user_id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/user/user.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user_id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get_user_data\n                        \n                    \n                \n            \n            \n                \n                    \n                    get_user_data(user_id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/user/user.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user_id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, ForbiddenException, Injectable } from \"@nestjs/common\";\nimport { UserDBService } from \"../../common/db_services/users/userDB.service\";\nimport { Movie, Prisma, User } from \"@prisma/client\";\nimport { MovieDBService } from \"../../common/db_services/movies/movieDB.service\";\nimport { VoteDBService } from \"../../common/db_services/votes/voteDB.service\";\nimport { PasswordService } from \"../../common/util_services/password.service\";\nimport { EmailService } from \"../../common/util_services/email.service\";\nimport cuid from \"cuid\";\nimport { GravatarService } from \"../../common/util_services/gravatar.service\";\nimport { WatchListDBService } from \"../../common/db_services/watchlist/watchListDB.service\";\nimport { ProfileDto } from \"../../types/user.dto/profile.dto\";\n\n@Injectable()\nexport class UserService {\n\n  constructor(private readonly movieDBService: MovieDBService,\n              private readonly userDBService: UserDBService,\n              private readonly voteDBService: VoteDBService,\n              private readonly watchListDBService: WatchListDBService,\n              private readonly passwordService: PasswordService,\n              private readonly emailService: EmailService,\n              private readonly gravatarService: GravatarService) {}\n\n  async get(user_id: number) {\n    const { password, verified, challenge, pw_reset, ...result } = await this.userDBService.get({ id: user_id }) as User;\n    return result\n  }\n\n  async get_public(user_id: number) {\n    const { name, gravatar_url, use_gravatar } = await this.userDBService.get({ id: user_id }) as User;\n    return { name, gravatar_url, use_gravatar };\n  }\n\n  async get_user_data(user_id: number) {\n    const user = await this.userDBService.get({ id: user_id }) as User;\n    const proposed_movies = await this.movieDBService.get_all_proposed(user_id);\n    const votes = await this.voteDBService.get_votes_user(user_id);\n    return { user, movies: proposed_movies, votes };\n  }\n\n  async change_profile(user_id: number, data: ProfileDto) {\n    const user = await this.userDBService.get({ id: user_id }) as User;\n    const data_to_update = {\n      name: data.name\n    } as Prisma.UserUpdateInput;\n\n    if (data.hasOwnProperty(\"use_gravatar\") && data.use_gravatar) {\n      data_to_update[\"use_gravatar\"] = true;\n      data_to_update[\"gravatar_url\"] = this.gravatarService.generate_gravatar_url(user.username);\n\n    } else {\n      data_to_update[\"use_gravatar\"] = false;\n      data_to_update[\"gravatar_url\"] = null;\n    }\n\n    await this.userDBService.update({ where: { id: user_id }, data: data_to_update });\n    return { message: \"Profile updated!\", show_alert: true };\n  }\n\n  async email_opt_in(user_id: number, opt_in: boolean) {\n    await this.userDBService.update({ where: { id: user_id },\n      data: {\n        email_opt_in: opt_in\n      }\n    });\n    return { message: \"Email option updated!\", show_alert: true };\n  }\n\n  async change_password(user_id: number, password_new: string, password_old: string) {\n    const user = await this.userDBService.get({ id: user_id }) as User;\n    if (await this.passwordService.compare(password_old, user.password)) {\n      await this.userDBService.update({ where: { id: user_id },\n        data: {\n          password: await this.passwordService.hash(password_new),\n        }\n      });\n      return { message: \"Password updated! \" +\n          \"The next time you log in, you will need to log in with your email address and new password.\",\n        show_alert: true };\n\n    } else {\n      throw new ForbiddenException(\"Invalid password\");\n    }\n  }\n\n  async change_username(user_id: number, new_username: string, password: string) {\n    const user = await this.userDBService.get({ id: user_id }) as User;\n    if ((user.username === new_username) || (await this.userDBService.has_user(new_username))) {\n      throw new ConflictException(\"Email is already in use\");\n    }\n\n    if (await this.passwordService.compare(password, user.password)) {\n      const new_challenge = cuid();\n      await this.userDBService.update({ where: { id: user_id },\n        data: {\n          username: new_username,\n          verified: false,\n          challenge: new_challenge,\n          gravatar_url: this.gravatarService.generate_gravatar_url(new_username)\n        }\n      });\n      const new_challenge_url = this.emailService.generate_challenge_url(new_challenge);\n      await this.emailService.send_challenge(user.username, user.name, new_challenge_url);\n      return { message: \"Please confirm your new email address by clicking the link sent to your new inbox. \" +\n          \"The next time you log in, you will need to log in with your new verified email address and password.\",\n        show_alert: true };\n\n    } else {\n      throw new ForbiddenException(\"Invalid password\");\n    }\n  }\n\n  async delete(user_id: number, password: string) {\n    const watchlist = await this.watchListDBService.get_all()\n    const watchlist_proposer_ids = await Promise.all(watchlist.map(async wl => {\n      return ((await this.movieDBService.get(wl.imdb_id)) as Movie).proposer_id\n    }));\n    if (watchlist_proposer_ids.includes(user_id)) {\n      throw new ForbiddenException(\"You cannot delete your account while you have movies in the watchlist\");\n    }\n\n    const user = await this.userDBService.get({ id: user_id }) as User;\n    if (await this.passwordService.compare(password, user.password)) {\n      await this.voteDBService.delete_all_user(user_id);\n      await this.movieDBService.delete_all_proposed(user_id);\n      await this.userDBService.delete({ id: user_id });\n      return { message: \"Your account, votes and proposed movies has been deleted.\", show_alert: true };\n\n    } else {\n      throw new ForbiddenException(\"Invalid password\");\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/VoteController.html":{"url":"controllers/VoteController.html","title":"controller - VoteController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  VoteController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/vote/vote.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                vote\n            \n\n\n            \n                Description\n            \n            \n                Controller for the vote routes\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                get_vote\n                            \n                            \n                                    Async\n                                get_votes\n                            \n                            \n                                    Async\n                                save_vote\n                            \n                            \n                                    Async\n                                unvote\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get_vote\n                        \n                    \n                \n            \n            \n                \n                    \n                    get_vote(imdb_id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':imdb_id')\n                \n            \n\n            \n                \n                    Defined in src/routes/vote/vote.controller.ts:31\n                \n            \n\n\n            \n                \n                    PUBLIC GET number of votes for a movie\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    imdb_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get_votes\n                        \n                    \n                \n            \n            \n                \n                    \n                    get_votes(user: JwtUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get()\n                \n            \n\n            \n                \n                    Defined in src/routes/vote/vote.controller.ts:22\n                \n            \n\n\n            \n                \n                    PRIVATE GET imdb_ids for the movies, the given user voted for\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                JwtUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        save_vote\n                        \n                    \n                \n            \n            \n                \n                    \n                    save_vote(user: JwtUser, imdb_id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post(':imdb_id')\n                \n            \n\n            \n                \n                    Defined in src/routes/vote/vote.controller.ts:42\n                \n            \n\n\n            \n                \n                    PRIVATE POST vote for a movie\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                JwtUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    imdb_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        unvote\n                        \n                    \n                \n            \n            \n                \n                    \n                    unvote(user: JwtUser, imdb_id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Delete(':imdb_id')\n                \n            \n\n            \n                \n                    Defined in src/routes/vote/vote.controller.ts:53\n                \n            \n\n\n            \n                \n                    PRIVATE DELETE unvote for a movie\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                JwtUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    imdb_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, Post, UseGuards } from \"@nestjs/common\";\nimport { JwtAuthGuard } from \"../auth/jwt-auth.guard\";\nimport { VoteService } from \"./vote.service\";\nimport { User } from \"../../common/decorators/user.decorator\";\nimport { JwtUser } from \"../../types/jwtuser.type\";\nimport { Vote } from \"@prisma/client\";\n\n/**\n * Controller for the vote routes\n */\n@Controller('vote')\nexport class VoteController {\n\n  constructor(private readonly voteService: VoteService) {}\n\n  /**\n   * PRIVATE GET imdb_ids for the movies, the given user voted for\n   * @param user\n   */\n  @UseGuards(JwtAuthGuard)\n  @Get()\n  async get_votes(@User() user: JwtUser): Promise {\n    return this.voteService.get_votes_user(Number(user.id));\n  }\n\n  /**\n   * PUBLIC GET number of votes for a movie\n   * @param imdb_id\n   */\n  @Get(':imdb_id')\n  async get_vote(@Param('imdb_id') imdb_id: string) : Promise {\n    return this.voteService.get_votes(imdb_id);\n  }\n\n  /**\n   * PRIVATE POST vote for a movie\n   * @param user\n   * @param imdb_id\n   */\n  @UseGuards(JwtAuthGuard)\n  @Post(':imdb_id')\n  async save_vote(@User() user: JwtUser, @Param('imdb_id') imdb_id: string) : Promise {\n    return this.voteService.vote(imdb_id, Number(user.id));\n  }\n\n  /**\n   * PRIVATE DELETE unvote for a movie\n   * @param user\n   * @param imdb_id\n   */\n  @UseGuards(JwtAuthGuard)\n  @Delete(':imdb_id')\n  async unvote(@User() user: JwtUser, @Param('imdb_id') imdb_id: string) : Promise {\n    return this.voteService.unvote(imdb_id, Number(user.id));\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/VoteDBModule.html":{"url":"modules/VoteDBModule.html","title":"module - VoteDBModule","body":"\n                   \n\n\n\n\n    Modules\n    VoteDBModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_VoteDBModule\n\n\n\ncluster_VoteDBModule_exports\n\n\n\ncluster_VoteDBModule_providers\n\n\n\n\nVoteDBService \n\nVoteDBService \n\n\n\nVoteDBModule\n\nVoteDBModule\n\nVoteDBService  -->\n\nVoteDBModule->VoteDBService \n\n\n\n\n\nPrismaService\n\nPrismaService\n\nVoteDBModule -->\n\nPrismaService->VoteDBModule\n\n\n\n\n\nVoteDBService\n\nVoteDBService\n\nVoteDBModule -->\n\nVoteDBService->VoteDBModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/db_services/votes/voteDB.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                        \n                            VoteDBService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            VoteDBService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { VoteDBService } from './voteDB.service';\nimport { PrismaService } from \"../prisma.service\";\n\n@Module({\n  providers: [VoteDBService, PrismaService],\n  exports: [VoteDBService]\n})\nexport class VoteDBModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/VoteDBService.html":{"url":"injectables/VoteDBService.html","title":"injectable - VoteDBService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  VoteDBService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/db_services/votes/voteDB.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                add\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                delete_all\n                            \n                            \n                                    Async\n                                delete_all_user\n                            \n                            \n                                    Async\n                                get\n                            \n                            \n                                    Async\n                                get_most_voted\n                            \n                            \n                                    Async\n                                get_num_of_votes\n                            \n                            \n                                    Async\n                                get_votes_movie\n                            \n                            \n                                    Async\n                                get_votes_user\n                            \n                            \n                                    Async\n                                has\n                            \n                            \n                                    Async\n                                num_of\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/common/db_services/votes/voteDB.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        add\n                        \n                    \n                \n            \n            \n                \n                    \n                    add(data: Prisma.VoteCreateInput)\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/votes/voteDB.service.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            Prisma.VoteCreateInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(data: Prisma.VoteWhereUniqueInput)\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/votes/voteDB.service.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            Prisma.VoteWhereUniqueInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete_all\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete_all(imdb_id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/votes/voteDB.service.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    imdb_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete_all_user\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete_all_user(user_id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/votes/voteDB.service.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user_id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(data: Prisma.VoteWhereUniqueInput)\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/votes/voteDB.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            Prisma.VoteWhereUniqueInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get_most_voted\n                        \n                    \n                \n            \n            \n                \n                    \n                    get_most_voted(count: number)\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/votes/voteDB.service.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    count\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get_num_of_votes\n                        \n                    \n                \n            \n            \n                \n                    \n                    get_num_of_votes(imdb_id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/votes/voteDB.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    imdb_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get_votes_movie\n                        \n                    \n                \n            \n            \n                \n                    \n                    get_votes_movie(imdb_id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/votes/voteDB.service.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    imdb_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get_votes_user\n                        \n                    \n                \n            \n            \n                \n                    \n                    get_votes_user(user_id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/votes/voteDB.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user_id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        has\n                        \n                    \n                \n            \n            \n                \n                    \n                    has(user_id: Prisma.UserWhereUniqueInput, imdb_id: Prisma.MovieWhereUniqueInput)\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/votes/voteDB.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user_id\n                                    \n                                                Prisma.UserWhereUniqueInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    imdb_id\n                                    \n                                            Prisma.MovieWhereUniqueInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        num_of\n                        \n                    \n                \n            \n            \n                \n                    \n                    num_of(user_id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/votes/voteDB.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user_id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PrismaService } from \"../prisma.service\";\nimport { Prisma } from \"@prisma/client\";\n\n@Injectable()\nexport class VoteDBService {\n\n  constructor(private readonly prisma: PrismaService) {}\n\n  async get(data : Prisma.VoteWhereUniqueInput) {\n    return await this.prisma.vote.findUnique({\n      where: data,\n    });\n  }\n\n  async has(user_id: Prisma.UserWhereUniqueInput, imdb_id: Prisma.MovieWhereUniqueInput) {\n    return await this.prisma.vote.findFirst({\n      where: {\n        user: user_id,\n        movie: imdb_id\n      }\n    })\n  }\n\n  async num_of(user_id: number) {\n    return await this.prisma.vote.count({\n      where: {\n        user: { id: user_id }\n      }\n    })\n  }\n\n  async get_num_of_votes(imdb_id: string) {\n    return await this.prisma.vote.count({\n      where: { movie: { imdb_id } }\n    });\n  }\n\n  async get_votes_user(user_id: number) {\n    return await this.prisma.vote.findMany({\n      where: { user: { id: user_id } },\n      select: { imdb_id: true }\n    });\n  }\n\n  async get_votes_movie(imdb_id: string) {\n    return await this.prisma.vote.findMany({\n      where: { movie: { imdb_id } },\n      select: { user: true }\n    })\n  }\n\n  async get_most_voted(count: number) {\n    return await this.prisma.vote.groupBy({\n      by: ['imdb_id'],\n      _count: {\n        user_id: true,\n      },\n      orderBy: {\n        _count: {\n          user_id: 'desc'\n        }\n      },\n      take: count,\n    })\n  }\n\n  async add(data: Prisma.VoteCreateInput) {\n    return await this.prisma.vote.create({ data });\n  }\n\n  async delete(data : Prisma.VoteWhereUniqueInput) {\n    return await this.prisma.vote.delete({ where: data });\n  }\n\n  async delete_all(imdb_id: string) {\n    return await this.prisma.vote.deleteMany({ where: { imdb_id } });\n  }\n\n  async delete_all_user(user_id: number) {\n    return await this.prisma.vote.deleteMany({ where: { user_id } });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/VoteModule.html":{"url":"modules/VoteModule.html","title":"module - VoteModule","body":"\n                   \n\n\n\n\n    Modules\n    VoteModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_VoteModule\n\n\n\ncluster_VoteModule_providers\n\n\n\ncluster_VoteModule_imports\n\n\n\n\nMovieDBModule\n\nMovieDBModule\n\n\n\nVoteModule\n\nVoteModule\n\nVoteModule -->\n\nMovieDBModule->VoteModule\n\n\n\n\n\nUserDBModule\n\nUserDBModule\n\nVoteModule -->\n\nUserDBModule->VoteModule\n\n\n\n\n\nVoteDBModule\n\nVoteDBModule\n\nVoteModule -->\n\nVoteDBModule->VoteModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nVoteModule -->\n\nPrismaService->VoteModule\n\n\n\n\n\nVoteService\n\nVoteService\n\nVoteModule -->\n\nVoteService->VoteModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/routes/vote/vote.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                        \n                            VoteService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            VoteController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            MovieDBModule\n                        \n                        \n                            UserDBModule\n                        \n                        \n                            VoteDBModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { VoteController } from \"./vote.controller\";\nimport { VoteService } from \"./vote.service\";\nimport { VoteDBModule } from \"../../common/db_services/votes/voteDB.module\";\nimport { UserDBModule } from \"../../common/db_services/users/userDB.module\";\nimport { MovieDBModule } from \"../../common/db_services/movies/movieDB.module\";\nimport { PrismaService } from \"../../common/db_services/prisma.service\";\n\n@Module({\n  imports: [VoteDBModule, UserDBModule, MovieDBModule],\n  controllers: [VoteController],\n  providers: [PrismaService, VoteService]\n})\nexport class VoteModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/VoteService.html":{"url":"injectables/VoteService.html","title":"injectable - VoteService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  VoteService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/vote/vote.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                get_votes\n                            \n                            \n                                    Async\n                                get_votes_user\n                            \n                            \n                                    Async\n                                unvote\n                            \n                            \n                                    Async\n                                vote\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(movieDBService: MovieDBService, userDBService: UserDBService, voteDBService: VoteDBService)\n                    \n                \n                        \n                            \n                                Defined in src/routes/vote/vote.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        movieDBService\n                                                  \n                                                        \n                                                                        MovieDBService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userDBService\n                                                  \n                                                        \n                                                                        UserDBService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        voteDBService\n                                                  \n                                                        \n                                                                        VoteDBService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get_votes\n                        \n                    \n                \n            \n            \n                \n                    \n                    get_votes(imdb_id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/vote/vote.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    imdb_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get_votes_user\n                        \n                    \n                \n            \n            \n                \n                    \n                    get_votes_user(user_id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/vote/vote.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user_id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        unvote\n                        \n                    \n                \n            \n            \n                \n                    \n                    unvote(imdb_id: string, user_id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/vote/vote.service.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    imdb_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user_id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        vote\n                        \n                    \n                \n            \n            \n                \n                    \n                    vote(imdb_id: string, user_id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/vote/vote.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    imdb_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user_id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, InternalServerErrorException } from \"@nestjs/common\";\nimport { MovieDBService } from \"../../common/db_services/movies/movieDB.service\";\nimport { UserDBService } from \"../../common/db_services/users/userDB.service\";\nimport { VoteDBService } from \"../../common/db_services/votes/voteDB.service\";\nimport { Movie, Prisma } from \"@prisma/client\";\n\n@Injectable()\nexport class VoteService {\n\n  constructor(private readonly movieDBService: MovieDBService,\n              private readonly userDBService: UserDBService,\n              private readonly voteDBService: VoteDBService) {}\n\n  async get_votes(imdb_id: string) {\n    try {\n      return await this.voteDBService.get_num_of_votes(imdb_id)\n    } catch (e) {\n      throw new InternalServerErrorException('Error getting votes')\n    }\n  }\n\n  async get_votes_user(user_id: number) {\n    try {\n      return (await this.voteDBService.get_votes_user(user_id)).map(vote => vote.imdb_id)\n    } catch (e) {\n      throw new InternalServerErrorException('Error getting votes')\n    }\n  }\n\n  async vote(imdb_id: string, user_id: number) {\n    const num_of_votes = await this.voteDBService.num_of(user_id)\n    if (num_of_votes >= Number(process.env.MAX_VOTES)) {\n      throw new ConflictException(`You have already voted for the maximum number (${process.env.MAX_VOTES}) of movies`)\n    }\n\n    const voteDB_data: Prisma.VoteCreateInput = {\n      movie: { connect: { imdb_id } } as Prisma.MovieCreateNestedOneWithoutVoteInput,\n      user: { connect: { id: user_id } } as Prisma.UserCreateNestedOneWithoutVoteInput\n    }\n\n    try {\n      return await this.voteDBService.add(voteDB_data)\n    } catch (e) {\n      throw new ConflictException('Vote already exists')\n    }\n  }\n\n  async unvote(imdb_id: string, user_id: number) {\n    const movie = await this.movieDBService.get(imdb_id) as Movie\n    if (movie.proposer_id === user_id) {\n      throw new ConflictException('You cannot unvote a movie you proposed')\n    }\n\n    const voteDB_data: Prisma.VoteWhereUniqueInput = {\n      imdb_id_user_id: { imdb_id, user_id: user_id }\n    }\n\n    try {\n      return await this.voteDBService.delete(voteDB_data)\n    } catch (e) {\n      throw new ConflictException('Vote does not exist')\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/WatchListDBModule.html":{"url":"modules/WatchListDBModule.html","title":"module - WatchListDBModule","body":"\n                   \n\n\n\n\n    Modules\n    WatchListDBModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_WatchListDBModule\n\n\n\ncluster_WatchListDBModule_exports\n\n\n\ncluster_WatchListDBModule_providers\n\n\n\n\nWatchListDBService \n\nWatchListDBService \n\n\n\nWatchListDBModule\n\nWatchListDBModule\n\nWatchListDBService  -->\n\nWatchListDBModule->WatchListDBService \n\n\n\n\n\nPrismaService\n\nPrismaService\n\nWatchListDBModule -->\n\nPrismaService->WatchListDBModule\n\n\n\n\n\nWatchListDBService\n\nWatchListDBService\n\nWatchListDBModule -->\n\nWatchListDBService->WatchListDBModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/db_services/watchlist/watchListDB.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                        \n                            WatchListDBService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            WatchListDBService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { WatchListDBService } from './watchListDB.service';\nimport { PrismaService } from \"../prisma.service\";\n\n@Module({\n  providers: [WatchListDBService, PrismaService],\n  exports: [WatchListDBService]\n})\nexport class WatchListDBModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/WatchListDBService.html":{"url":"injectables/WatchListDBService.html","title":"injectable - WatchListDBService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  WatchListDBService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/db_services/watchlist/watchListDB.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                add\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                get_all\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/common/db_services/watchlist/watchListDB.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        add\n                        \n                    \n                \n            \n            \n                \n                    \n                    add(data: Prisma.WatchListCreateInput)\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/watchlist/watchListDB.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            Prisma.WatchListCreateInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(imdb_id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/watchlist/watchListDB.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    imdb_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get_all\n                        \n                    \n                \n            \n            \n                \n                    \n                    get_all()\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/watchlist/watchListDB.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { PrismaService } from \"../prisma.service\";\nimport { Prisma } from \"@prisma/client\";\n\n@Injectable()\nexport class WatchListDBService {\n\n  constructor(private readonly prisma: PrismaService) {}\n\n  async get_all() {\n    return await this.prisma.watchList.findMany()\n  }\n\n  async add(data: Prisma.WatchListCreateInput) {\n    return await this.prisma.watchList.create({ data })\n  }\n\n  async delete(imdb_id: string) {\n    return await this.prisma.watchList.delete({\n      where: {\n        imdb_id\n      }\n    })\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/WatchListJob.html":{"url":"injectables/WatchListJob.html","title":"injectable - WatchListJob","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  WatchListJob\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/event_service/jobs/watchlist.job.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                num_of_movies\n                            \n                            \n                                    Private\n                                    Readonly\n                                pause_time\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                run\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(voteDBService: VoteDBService, watchListDBService: WatchListDBService, movieDBService: MovieDBService, announceJob: AnnounceJob)\n                    \n                \n                        \n                            \n                                Defined in src/common/event_service/jobs/watchlist.job.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        voteDBService\n                                                  \n                                                        \n                                                                        VoteDBService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        watchListDBService\n                                                  \n                                                        \n                                                                        WatchListDBService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        movieDBService\n                                                  \n                                                        \n                                                                        MovieDBService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        announceJob\n                                                  \n                                                        \n                                                                        AnnounceJob\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        run\n                        \n                    \n                \n            \n            \n                \n                    \n                    run()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Cron(: string)\n                \n            \n\n            \n                \n                    Defined in src/common/event_service/jobs/watchlist.job.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        num_of_movies\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Number(process.env.NUM_OF_MOVIES as string)\n                    \n                \n                    \n                        \n                                Defined in src/common/event_service/jobs/watchlist.job.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        pause_time\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Number(process.env.PAUSE_TIME_MIN as string) * 60000\n                    \n                \n                    \n                        \n                                Defined in src/common/event_service/jobs/watchlist.job.ts:14\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { WatchListDBService } from \"../../db_services/watchlist/watchListDB.service\";\nimport { VoteDBService } from \"../../db_services/votes/voteDB.service\";\nimport { MovieDBService } from \"../../db_services/movies/movieDB.service\";\nimport { parseExpression } from \"cron-parser\"\nimport { Movie, Prisma } from \"@prisma/client\";\nimport { Cron } from \"@nestjs/schedule\";\nimport { AnnounceJob } from \"./announce.job\";\n\n@Injectable()\nexport class WatchListJob {\n\n  private readonly num_of_movies = Number(process.env.NUM_OF_MOVIES as string);\n  private readonly pause_time = Number(process.env.PAUSE_TIME_MIN as string) * 60000;\n\n  constructor(private readonly voteDBService: VoteDBService,\n              private readonly watchListDBService: WatchListDBService,\n              private readonly movieDBService: MovieDBService,\n              private readonly announceJob: AnnounceJob) {}\n\n  @Cron(process.env.SCHEDULE_WATCHLIST as string)\n  async run() {\n    console.log('Watchlist job started');\n    const top_movies = await this.voteDBService.get_most_voted(this.num_of_movies)\n    let start_time = parseExpression(process.env.SCHEDULE_START as string).next().toDate()\n\n    for (const movie of top_movies) {\n      const data = {\n        movie: { connect: { imdb_id: movie.imdb_id } },\n        start_time: start_time,\n      } as Prisma.WatchListCreateInput\n      await this.watchListDBService.add(data)\n\n      const movie_data = await this.movieDBService.get(movie.imdb_id) as Movie\n      const round_duration_ms = (Math.round(movie_data.runtime/15) * 15) * 60000\n      start_time = new Date(start_time.getTime() + round_duration_ms + this.pause_time)\n    }\n\n    await this.announceJob.run()\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/WatchlistExtType.html":{"url":"interfaces/WatchlistExtType.html","title":"interface - WatchlistExtType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  WatchlistExtType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/movie.types/watchlist_ext.type.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            imdb_id\n                                        \n                                \n                                \n                                        \n                                            interested\n                                        \n                                \n                                \n                                        \n                                            link\n                                        \n                                \n                                \n                                        \n                                            start_time\n                                        \n                                \n                                \n                                        \n                                            title\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        imdb_id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        imdb_id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        interested\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        interested:     number[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        link\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        link:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        start_time\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        start_time:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface WatchlistExtType {\n  imdb_id: string,\n  title: string,\n  link: string,\n  start_time: Date,\n  interested: number[]\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                client/src/main.ts\n            \n            variable\n            app\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/src/router/router.ts\n            \n            variable\n            router\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/src/util/api.ts\n            \n            function\n            call\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/src/util/cookie.ts\n            \n            variable\n            get_cookie\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/src/util/cookie.ts\n            \n            variable\n            get_cookie_all\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/src/util/cookie.ts\n            \n            variable\n            remove_cookie\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/src/util/cookie.ts\n            \n            variable\n            set_cookie\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/src/util/store.ts\n            \n            variable\n            store\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/db_services/histroy/historyDB.service.ts\n            \n            injectable\n            HistoryDBService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/common/db_services/movies/movieDB.service.ts\n            \n            injectable\n            MovieDBService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/common/db_services/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/db_services/users/userDB.service.ts\n            \n            injectable\n            UserDBService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/common/db_services/votes/voteDB.service.ts\n            \n            injectable\n            VoteDBService\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/common/db_services/watchlist/watchListDB.service.ts\n            \n            injectable\n            WatchListDBService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/common/decorators/user.decorator.ts\n            \n            variable\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/event_service/jobs/announce.job.ts\n            \n            injectable\n            AnnounceJob\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/common/event_service/jobs/history.job.ts\n            \n            injectable\n            HistoryJob\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/event_service/jobs/watchlist.job.ts\n            \n            injectable\n            WatchListJob\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/common/middleware/logger.middleware.ts\n            \n            injectable\n            LoggerMiddleware\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/util_services/discord.service.ts\n            \n            injectable\n            DiscordService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/util_services/email.service.ts\n            \n            injectable\n            EmailService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/common/util_services/email.service.ts\n            \n            variable\n            nodemailer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/util_services/gravatar.service.ts\n            \n            injectable\n            GravatarService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/util_services/password.service.ts\n            \n            injectable\n            PasswordService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/util_services/password.service.ts\n            \n            variable\n            bcrypt\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/routes/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/routes/auth/auth.guard.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/routes/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/routes/auth/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/routes/auth/jwt.stategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/routes/auth/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/routes/movie/movie.controller.ts\n            \n            controller\n            MovieController\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/routes/movie/movie.service.ts\n            \n            injectable\n            MovieService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/routes/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/routes/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/routes/vote/vote.controller.ts\n            \n            controller\n            VoteController\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/routes/vote/vote.service.ts\n            \n            injectable\n            VoteService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/types/jwtuser.type.ts\n            \n            interface\n            JwtUser\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/types/movie.types/movie_ext.type.ts\n            \n            interface\n            MovieExtType\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/types/movie.types/watchlist_ext.type.ts\n            \n            interface\n            WatchlistExtType\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/types/res.dto.ts\n            \n            interface\n            ResDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/types/user.dto/email_opt_in.dto.ts\n            \n            interface\n            EmailOptInDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/types/user.dto/login.dto.ts\n            \n            interface\n            LoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/types/user.dto/password.dto.ts\n            \n            interface\n            PasswordDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/types/user.dto/password_new.dto.ts\n            \n            interface\n            PasswordNewDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/types/user.dto/profile.dto.ts\n            \n            interface\n            ProfileDto\n            \n                0 %\n                (0/3)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/jwt : ^9.0.0\n        \n            @nestjs/passport : ^9.0.0\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/schedule : ^2.1.0\n        \n            @nestjs/serve-static : ^3.0.0\n        \n            @prisma/client : ^4.5.0\n        \n            bcrypt : ^5.0.1\n        \n            cron-parser : ^4.7.0\n        \n            crypto-js : ^4.1.1\n        \n            cuid : ^2.1.8\n        \n            discord.js : ^14.6.0\n        \n            dotenv : ^16.0.1\n        \n            helmet : ^5.1.1\n        \n            imdb-api : ^4.4.1\n        \n            nodemailer : ^6.8.0\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            call   (client/.../api.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    client/src/util/api.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        call\n                        \n                    \n                \n            \n            \n                \ncall(route: string, method?: string, body?: any)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    route\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    method\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n\nMovie Monday Manager\nA full stack management application for voting movies for weekly movie events.\nFeatures\n\nAccount-registration with email verification\nUsers can vote, add and remove movies\nUsers can manage own profile\nClean and responsive Bootstrap-UI\n100% useable without client (via REST-API)\n(soon) automatic management of voted movies around movie events\n(soon) automatic notifications for movie events with the list of interested users\n\nInstallation\n\nYou need node.js installed (version 18.12.1 or newer).\nDownload the newest version of the code\nRename the .env file from .env.tmp to .env\nOpen the configuration file (now .env) and set values.\nIn client folder: run npm install and npm run build\nIn prisma folder: run prismas migrate command (e.g. prisma migrate dev --name init)\nIn root folder: npm install.\nRun the server with npm start.\n\nDev-Docs & API-Docs\nThis documentation is still work in progress.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2022 Elias Schaut\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EventModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HistoryDBModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MovieDBModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MovieModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserDBModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        VoteDBModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        VoteModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        WatchListDBModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_EventModule\n\n\n\ncluster_EventModule_imports\n\n\n\ncluster_EventModule_providers\n\n\n\ncluster_HistoryDBModule\n\n\n\ncluster_HistoryDBModule_exports\n\n\n\ncluster_HistoryDBModule_providers\n\n\n\ncluster_MovieDBModule\n\n\n\ncluster_MovieDBModule_exports\n\n\n\ncluster_MovieDBModule_providers\n\n\n\ncluster_MovieModule\n\n\n\ncluster_MovieModule_providers\n\n\n\ncluster_UserDBModule\n\n\n\ncluster_UserDBModule_exports\n\n\n\ncluster_UserDBModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_VoteDBModule\n\n\n\ncluster_VoteDBModule_exports\n\n\n\ncluster_VoteDBModule_providers\n\n\n\ncluster_WatchListDBModule\n\n\n\ncluster_WatchListDBModule_exports\n\n\n\ncluster_WatchListDBModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nEventModule\n\nEventModule\n\nAppModule -->\n\nEventModule->AppModule\n\n\n\n\n\nMovieModule\n\nMovieModule\n\nAppModule -->\n\nMovieModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nVoteModule\n\nVoteModule\n\nAppModule -->\n\nVoteModule->AppModule\n\n\n\n\n\nUserDBModule\n\nUserDBModule\n\nAuthModule -->\n\nUserDBModule->AuthModule\n\n\n\nEventModule -->\n\nUserDBModule->EventModule\n\n\n\nMovieModule -->\n\nUserDBModule->MovieModule\n\n\n\nUserModule -->\n\nUserDBModule->UserModule\n\n\n\nVoteModule -->\n\nUserDBModule->VoteModule\n\n\n\n\n\nUserDBService \n\nUserDBService \n\nUserDBService  -->\n\nUserDBModule->UserDBService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nEmailService\n\nEmailService\n\nAuthModule -->\n\nEmailService->AuthModule\n\n\n\nEventModule -->\n\nEmailService->EventModule\n\n\n\nUserModule -->\n\nEmailService->UserModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nPasswordService\n\nPasswordService\n\nAuthModule -->\n\nPasswordService->AuthModule\n\n\n\nUserModule -->\n\nPasswordService->UserModule\n\n\n\nUserDBModule -->\n\nPasswordService->UserDBModule\n\n\n\n\n\nHistoryDBModule\n\nHistoryDBModule\n\nEventModule -->\n\nHistoryDBModule->EventModule\n\n\n\nMovieModule -->\n\nHistoryDBModule->MovieModule\n\n\n\n\n\nHistoryDBService \n\nHistoryDBService \n\nHistoryDBService  -->\n\nHistoryDBModule->HistoryDBService \n\n\n\n\n\nMovieDBModule\n\nMovieDBModule\n\nEventModule -->\n\nMovieDBModule->EventModule\n\n\n\nMovieModule -->\n\nMovieDBModule->MovieModule\n\n\n\nUserModule -->\n\nMovieDBModule->UserModule\n\n\n\nVoteModule -->\n\nMovieDBModule->VoteModule\n\n\n\n\n\nMovieDBService \n\nMovieDBService \n\nMovieDBService  -->\n\nMovieDBModule->MovieDBService \n\n\n\n\n\nVoteDBModule\n\nVoteDBModule\n\nEventModule -->\n\nVoteDBModule->EventModule\n\n\n\nMovieModule -->\n\nVoteDBModule->MovieModule\n\n\n\nUserModule -->\n\nVoteDBModule->UserModule\n\n\n\nVoteModule -->\n\nVoteDBModule->VoteModule\n\n\n\n\n\nVoteDBService \n\nVoteDBService \n\nVoteDBService  -->\n\nVoteDBModule->VoteDBService \n\n\n\n\n\nWatchListDBModule\n\nWatchListDBModule\n\nEventModule -->\n\nWatchListDBModule->EventModule\n\n\n\nMovieModule -->\n\nWatchListDBModule->MovieModule\n\n\n\nUserModule -->\n\nWatchListDBModule->UserModule\n\n\n\n\n\nWatchListDBService \n\nWatchListDBService \n\nWatchListDBService  -->\n\nWatchListDBModule->WatchListDBService \n\n\n\n\n\nAnnounceJob\n\nAnnounceJob\n\nEventModule -->\n\nAnnounceJob->EventModule\n\n\n\n\n\nDiscordService\n\nDiscordService\n\nEventModule -->\n\nDiscordService->EventModule\n\n\n\n\n\nHistoryJob\n\nHistoryJob\n\nEventModule -->\n\nHistoryJob->EventModule\n\n\n\n\n\nWatchListJob\n\nWatchListJob\n\nEventModule -->\n\nWatchListJob->EventModule\n\n\n\n\n\nHistoryDBService\n\nHistoryDBService\n\nHistoryDBModule -->\n\nHistoryDBService->HistoryDBModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nMovieModule -->\n\nPrismaService->MovieModule\n\n\n\nVoteModule -->\n\nPrismaService->VoteModule\n\n\n\nUserDBModule -->\n\nPrismaService->UserDBModule\n\n\n\nHistoryDBModule -->\n\nPrismaService->HistoryDBModule\n\n\n\nMovieDBModule -->\n\nPrismaService->MovieDBModule\n\n\n\nVoteDBModule -->\n\nPrismaService->VoteDBModule\n\n\n\nWatchListDBModule -->\n\nPrismaService->WatchListDBModule\n\n\n\n\n\nMovieDBService\n\nMovieDBService\n\nMovieDBModule -->\n\nMovieDBService->MovieDBModule\n\n\n\n\n\nMovieService\n\nMovieService\n\nMovieModule -->\n\nMovieService->MovieModule\n\n\n\n\n\nVoteService\n\nVoteService\n\nMovieModule -->\n\nVoteService->MovieModule\n\n\n\nVoteModule -->\n\nVoteService->VoteModule\n\n\n\n\n\nUserDBService\n\nUserDBService\n\nUserDBModule -->\n\nUserDBService->UserDBModule\n\n\n\n\n\nGravatarService\n\nGravatarService\n\nUserModule -->\n\nGravatarService->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\nVoteDBService\n\nVoteDBService\n\nVoteDBModule -->\n\nVoteDBService->VoteDBModule\n\n\n\n\n\nWatchListDBService\n\nWatchListDBService\n\nWatchListDBModule -->\n\nWatchListDBService->WatchListDBModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        11 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    22 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    9 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 1.0.0-alpha.4\n        \n            Description : \n        \n            License : MIT\n        \n            Author : EliasSchaut\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            app   (client/.../main.ts)\n                        \n                        \n                            bcrypt   (src/.../password.service.ts)\n                        \n                        \n                            get_cookie   (client/.../cookie.ts)\n                        \n                        \n                            get_cookie_all   (client/.../cookie.ts)\n                        \n                        \n                            nodemailer   (src/.../email.service.ts)\n                        \n                        \n                            remove_cookie   (client/.../cookie.ts)\n                        \n                        \n                            router   (client/.../router.ts)\n                        \n                        \n                            set_cookie   (client/.../cookie.ts)\n                        \n                        \n                            store   (client/.../store.ts)\n                        \n                        \n                            User   (src/.../user.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    client/src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        app\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createApp(App)\n                    \n                \n\n\n        \n    \n\n    src/common/util_services/password.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bcrypt\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require('bcrypt')\n                    \n                \n\n\n        \n    \n\n    client/src/util/cookie.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        get_cookie\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (key: string) => {\n  return Cookies.get(key)\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get_cookie_all\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {\n  return Cookies.get()\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove_cookie\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (key: string) => {\n  Cookies.remove(key)\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        set_cookie\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (key: string, value: string) => {\n  Cookies.set(key, value, {\n    expires: 7,\n  })\n}\n                    \n                \n\n\n        \n    \n\n    src/common/util_services/email.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        nodemailer\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require(\"nodemailer\")\n                    \n                \n\n\n        \n    \n\n    client/src/router/router.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        router\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createRouter({\n  history: createWebHistory(import.meta.env.BASE_URL),\n  routes: [\n    {\n      path: '/',\n      name: 'home',\n      component: HomeView\n    },\n    {\n      path: '/login/:challenge?',\n      name: 'login',\n      component: LoginView\n    },\n    {\n      path: '/reset',\n      name: 'reset_request',\n      component: ResetRequestView\n    },\n    {\n      path: '/reset/:challenge',\n      name: 'reset',\n      component: ResetView\n    },\n    {\n      path: '/register',\n      name: 'register',\n      component: RegisterView\n    },\n    {\n      path: '/profile',\n      name: 'profile',\n      component: ProfileView\n    },\n    {\n      path: '/history',\n      name: 'history',\n      component: HistoryView\n    },\n    {\n      path: '/privacy',\n      name: 'privacy',\n      component: PrivacyView\n    }\n  ]\n})\n                    \n                \n\n\n        \n    \n\n    client/src/util/store.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        store\n                        \n                    \n                \n            \n                \n                    \n                        Default value : reactive({\n  logged_in: false,\n  loading: false,\n  alert: {\n    show: false,\n    msg: \"\",\n    type: \"success\",\n  },\n\n  update_loading(loading: boolean) {\n    this.loading = loading;\n  },\n\n  async update_logged_in() {\n    const check = (await fetch(\"/api/user/check\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": \"Bearer \" + (get_cookie(\"access_token\") ?? \"\"),\n      }\n    }));\n    const data = await check.text()\n    this.logged_in = data === \"true\"\n  },\n\n  generate_type(http_code: number) {\n    if (http_code >= 200 && http_code = 400 && http_code = 500 && http_code \n                    \n                \n\n\n        \n    \n\n    src/common/decorators/user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        User\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: unknown, ctx: ExecutionContext) : JwtUser => {\n    const request = ctx.switchToHttp().getRequest();\n    return request.user;\n  },\n)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
