var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/injectables/AnnounceJob.html",[0,0.249,1,2.242]],["body/injectables/AnnounceJob.html",[0,0.306,1,2.763,2,0.8,3,0.177,4,0.177,5,0.14,6,2.784,7,0.363,8,1.443,9,3.346,10,2.189,11,5.379,12,5.379,13,1.088,14,1.593,15,4.102,16,4.615,17,1.061,18,3.236,19,3.86,20,3.102,21,2.937,22,3.102,23,0.982,24,4.615,25,1.038,26,0.018,27,0.897,28,0.485,29,0.771,30,3.236,31,1.088,32,4.615,33,1.021,34,3.236,35,3.996,36,3.236,37,0.769,38,0.363,39,2.784,40,2.486,41,2.486,42,2.381,43,1.168,44,2.784,45,0.177,46,0.088,47,1.012,48,3.236,49,3.236,50,4.615,51,4.615,52,4.615,53,4.615,54,4.615,55,4.615,56,4.615,57,4.615,58,4.615,59,4.615,60,4.615,61,4.615,62,4.615,63,4.615,64,4.615,65,4.615,66,4.615,67,4.615,68,4.615,69,4.615,70,3.236,71,3.236,72,2.486,73,2.086,74,2.473,75,1.849,76,2.263,77,3.236,78,2.486,79,2.486,80,2.263,81,3.236,82,3.236,83,2.784,84,3.236,85,3.236,86,3.236,87,0.011,88,0.011]],["title/modules/AppModule.html",[89,0.97,90,2.618]],["body/modules/AppModule.html",[3,0.205,4,0.205,5,0.163,26,0.019,37,0.876,38,0.421,45,0.205,46,0.102,87,0.012,88,0.012,89,1.327,90,5.201,91,1.426,92,1.849,93,3.233,94,3.233,95,4.355,96,4.355,97,4.355,98,4.355,99,4.355,100,2.151,101,1.357,102,1.499,103,3.758,104,3.067,105,3.758,106,3.758,107,3.758,108,3.233,109,2.887,110,3.758,111,3.758,112,3.758,113,3.758,114,2.629,115,3.758,116,3.233,117,5.123,118,3.758,119,1.578,120,1.664,121,3.935,122,3.758,123,3.758,124,3.935,125,3.758,126,3.758,127,2.536,128,3.758,129,3.758,130,3.758,131,3.233,132,3.758,133,6.258,134,3.758,135,3.233,136,3.758,137,3.758,138,3.233,139,5.123,140,3.758,141,3.233,142,5.123,143,2.887,144,3.233,145,3.758]],["title/controllers/AuthController.html",[146,1.853,147,2.618]],["body/controllers/AuthController.html",[3,0.137,4,0.137,5,0.109,7,0.282,13,0.903,14,1.733,23,0.885,25,1.256,26,0.018,27,1.086,28,0.587,29,0.933,31,1.317,33,1.024,37,0.811,38,0.282,45,0.137,46,0.069,47,0.786,75,1.665,87,0.009,88,0.009,101,1.873,119,1.055,120,3.236,146,2.296,147,2.678,148,1.175,149,2.162,150,1.62,151,2.162,152,1.62,153,3.83,154,2.942,155,2.293,156,3.985,157,2.942,158,2.942,159,3.294,160,3.985,161,2.162,162,3.404,163,3.344,164,3.906,165,3.599,166,3.83,167,6.307,168,2.277,169,2.513,170,2.513,171,4.279,172,3.263,173,2.162,174,2.568,175,4.319,176,3.344,177,4.279,178,3.83,179,2.678,180,3.83,181,3.294,182,2.605,183,2.513,184,2.513,185,2.162,186,3.344,187,2.471,188,2.297,189,2.513,190,2.513,191,2.162,192,2.942,193,2.513,194,2.513,195,2.513,196,3.344,197,2.513,198,2.513,199,1.758,200,1.758,201,1.758,202,1.758,203,2.597,204,1.931,205,1.62,206,1.758,207,2.162,208,2.162,209,1.407,210,1.758,211,2.162,212,4.115,213,1.758,214,1.62,215,1.175,216,1.32,217,2.513,218,2.513,219,3.906,220,2.513,221,2.513,222,2.513,223,1.589,224,2.513,225,2.513,226,2.513,227,2.513,228,2.513,229,2.513,230,2.513,231,2.513,232,2.513,233,2.513,234,2.513,235,2.513,236,2.513,237,2.162]],["title/modules/AuthModule.html",[89,0.97,95,2.413]],["body/modules/AuthModule.html",[3,0.219,4,0.219,5,0.174,22,3.22,26,0.019,37,0.872,38,0.45,45,0.219,46,0.109,87,0.013,88,0.013,89,1.386,91,1.521,92,1.932,95,4.876,100,2.247,101,1.448,102,1.599,104,3.205,147,4.213,148,2.502,203,3.854,204,3.081,238,3.45,239,3.45,240,3.45,241,3.409,242,4.439,243,4.439,244,3.049,245,4.01,246,2.502,247,2.805,248,5.352,249,2.401,250,4.01,251,4.01,252,4.01,253,3.081,254,4.01,255,2.805,256,2.805,257,4.01,258,3.45,259,3.45,260,4.01,261,4.01,262,4.01]],["title/injectables/AuthService.html",[0,0.249,203,2.095]],["body/injectables/AuthService.html",[0,0.217,2,0.506,3,0.112,4,0.112,5,0.089,7,0.229,9,2.171,10,1.451,13,0.769,14,1.709,17,1.07,22,2.651,23,0.898,25,1.275,26,0.019,27,1.144,28,0.596,29,0.947,31,1.274,33,1.096,37,0.783,38,0.229,45,0.112,46,0.056,74,2.617,75,1.957,87,0.008,88,0.008,119,0.859,120,3.009,127,2.675,156,2.507,157,2.507,158,3.566,159,2.807,160,2.507,161,2.807,162,3.364,168,2.293,171,4.243,172,1.615,173,2.807,182,2.51,185,2.807,187,2.547,188,2.606,191,2.807,196,2.992,203,1.826,208,1.761,215,0.957,216,1.075,223,1.538,244,2.51,253,1.572,255,1.432,256,1.432,263,1.761,264,3.263,265,1.761,266,2.527,267,5.669,268,2.047,269,2.047,270,2.245,271,2.047,272,2.047,273,2.047,274,3.263,275,2.047,276,3.263,277,2.047,278,1.432,279,1.572,280,1.761,281,1.761,282,1.432,283,3.263,284,2.047,285,3.126,286,1.432,287,1.761,288,1.432,289,1.761,290,1.432,291,1.761,292,3.566,293,1.761,294,2.807,295,3.263,296,4.648,297,2.047,298,2.807,299,3.566,300,3.794,301,2.047,302,2.807,303,2.047,304,2.807,305,2.047,306,1.572,307,2.047,308,2.047,309,2.047,310,2.047,311,2.047,312,2.047,313,1.572,314,1.572,315,2.047,316,2.047,317,2.047,318,2.992,319,2.047,320,3.247,321,1.572,322,3.263,323,2.047,324,2.047,325,2.047,326,3.5,327,1.623,328,1.761,329,2.047,330,2.047,331,2.047,332,2.047,333,2.047,334,2.047,335,2.047,336,2.047,337,3.263,338,2.047,339,1.319,340,2.047,341,2.047]],["title/injectables/DiscordService.html",[0,0.249,19,2.242]],["body/injectables/DiscordService.html",[0,0.375,2,1.076,3,0.238,4,0.238,5,0.189,7,0.488,8,1.766,9,3.295,10,2.203,13,1.332,14,1.55,17,2.056,19,3.383,23,1.052,25,0.979,26,0.018,27,0.846,28,0.458,29,0.727,31,1.027,33,1.052,37,0.674,38,0.488,45,0.238,46,0.119,87,0.013,88,0.013,127,2.796,188,1.928,223,1.239,270,1.928,318,2.806,342,3.745,343,6.271,344,6.876,345,5.649,346,5.649,347,5.649,348,4.354,349,2.437,350,2.607,351,5.649,352,4.354,353,3.745,354,5.649,355,4.354,356,3.745,357,4.354,358,4.354,359,4.354,360,4.354]],["title/classes/EmailOptInDto.html",[46,0.102,361,2.618]],["body/classes/EmailOptInDto.html",[3,0.305,4,0.305,5,0.242,7,0.626,8,2.061,23,0.885,26,0.018,28,0.587,45,0.305,46,0.152,87,0.016,88,0.016,361,4.612,362,2.766,363,4.807,364,4.906,365,4.25,366,5.587]],["title/injectables/EmailService.html",[0,0.249,22,1.75]],["body/injectables/EmailService.html",[0,0.285,2,0.722,3,0.16,4,0.16,5,0.127,7,0.327,8,1.34,9,2.91,10,1.748,13,1.01,14,1.663,17,0.957,22,2.004,23,1.045,25,1.399,26,0.018,27,1.21,28,0.654,29,1.039,31,1.404,33,1.202,37,0.606,38,0.327,45,0.16,46,0.08,47,0.913,74,2.024,75,1.667,87,0.01,88,0.01,101,1.547,151,2.512,156,3.291,165,2.762,168,1.547,171,2.997,175,1.882,187,1.799,192,2.243,223,1.219,265,2.512,266,2.91,296,5.353,313,2.243,339,1.882,349,1.634,350,1.749,367,2.243,368,4.366,369,5.075,370,4.285,371,4.285,372,4.285,373,4.285,374,4.285,375,4.285,376,4.285,377,2.92,378,4.285,379,2.92,380,4.285,381,2.92,382,4.285,383,6.223,384,2.92,385,5.59,386,4.285,387,2.92,388,4.285,389,2.92,390,2.997,391,2.512,392,4.285,393,2.92,394,2.92,395,2.92,396,2.512,397,2.92,398,2.512,399,2.92,400,2.92,401,2.92,402,2.92,403,2.92,404,5.075,405,6.223,406,4.366,407,5.075,408,5.075,409,4.285,410,4.285,411,3.686,412,2.92,413,2.92,414,5.075,415,2.92,416,2.92,417,4.285,418,2.92,419,2.92,420,2.92,421,2.92,422,2.92]],["title/modules/EventModule.html",[89,0.97,96,2.413]],["body/modules/EventModule.html",[1,4.066,3,0.209,4,0.209,5,0.166,19,4.066,22,3.175,26,0.018,37,0.872,38,0.428,39,3.285,44,3.285,45,0.209,46,0.104,87,0.012,88,0.012,89,1.342,91,1.448,92,1.869,96,4.954,100,2.174,101,1.379,102,1.523,104,3.101,241,3.361,246,2.421,423,3.285,424,3.285,425,3.285,426,4.066,427,3.567,428,3.567,429,3.8,430,4.376,431,4.376,432,3.818,433,3.818,434,3.818,435,3.818,436,3.818,437,3.818,438,3.818,439,3.818,440,3.818]],["title/injectables/GravatarService.html",[0,0.249,441,2.242]],["body/injectables/GravatarService.html",[0,0.399,2,1.184,3,0.262,4,0.262,5,0.208,7,0.537,10,1.497,13,1.415,17,1.57,23,0.951,25,1.35,26,0.018,27,1.167,28,0.631,29,1.003,31,1.129,33,1.122,37,0.716,38,0.537,45,0.262,46,0.131,47,1.497,74,2.394,87,0.014,88,0.014,182,2.12,223,1.363,244,3.198,441,3.595,442,4.12,443,6.003,444,4.789,445,4.789,446,6.003,447,4.789,448,4.789,449,4.789,450,4.789,451,4.12,452,4.789,453,4.789]],["title/modules/HistoryDBModule.html",[89,0.97,426,2.242]],["body/modules/HistoryDBModule.html",[3,0.267,4,0.267,5,0.212,26,0.018,37,0.79,38,0.548,45,0.267,46,0.133,87,0.014,88,0.014,89,1.575,91,1.854,92,2.195,100,2.553,101,1.764,102,1.949,246,2.843,426,4.493,454,4.204,455,4.204,456,4.204,457,4.271,458,2.497,459,4.887,460,3.918,461,4.887,462,2.285]],["title/injectables/HistoryDBService.html",[0,0.249,457,2.095]],["body/injectables/HistoryDBService.html",[0,0.367,2,1.038,3,0.23,4,0.23,5,0.182,7,0.471,10,1.313,13,1.301,14,1.804,17,1.377,23,1.037,25,1.386,26,0.018,27,1.198,28,0.648,29,1.029,31,1.453,33,0.977,37,0.735,38,0.471,43,1.517,45,0.23,46,0.115,47,1.313,75,1.838,87,0.013,88,0.013,223,1.754,270,2.729,327,2.201,457,3.089,458,2.251,462,1.964,463,3.614,464,3.305,465,4.219,466,2.708,467,4.201,468,2.588,469,3.86,470,5.302,471,4.201,472,4.201,473,4.748,474,4.201,475,2.317,476,4.201,477,4.201,478,4.201,479,2.708]],["title/injectables/HistoryJob.html",[0,0.249,430,2.413]],["body/injectables/HistoryJob.html",[0,0.35,2,0.97,3,0.215,4,0.215,5,0.17,7,0.44,9,2.786,10,1.992,13,1.244,14,1.473,15,4.456,17,1.287,20,3.27,21,3.03,23,0.836,25,0.883,26,0.018,27,0.763,28,0.413,29,0.656,31,0.926,33,0.836,37,0.834,38,0.44,40,3.016,41,3.016,42,2.638,43,1.417,45,0.215,46,0.107,47,1.227,72,3.016,73,2.53,74,2.541,75,2.041,76,2.746,78,3.016,79,3.016,83,3.377,87,0.012,88,0.012,114,2.746,163,2.351,327,1.566,430,3.4,457,3.914,468,1.648,470,3.377,475,1.648,480,3.377,481,2.746,482,3.27,483,3.926,484,3.69,485,3.926,486,3.926,487,3.377,488,3.926,489,3.926,490,5.276,491,3.016,492,2.746,493,2.53,494,3.926,495,3.926,496,3.926,497,3.926,498,3.377]],["title/injectables/JwtAuthGuard.html",[0,0.249,499,2.242]],["body/injectables/JwtAuthGuard.html",[0,0.437,2,1.377,3,0.304,4,0.304,5,0.241,26,0.018,37,0.785,38,0.624,45,0.304,46,0.152,87,0.016,88,0.016,249,3.335,499,3.94,500,4.791,501,4.791,502,4.791,503,3.589,504,5.569]],["title/injectables/JwtStrategy.html",[0,0.249,242,2.413]],["body/injectables/JwtStrategy.html",[0,0.393,2,1.157,3,0.256,4,0.256,5,0.203,7,0.525,13,1.395,14,1.604,17,2.127,23,0.938,25,1.053,26,0.018,27,0.91,28,0.492,29,0.782,31,1.104,37,0.814,38,0.525,45,0.256,46,0.128,87,0.014,88,0.014,172,2.929,174,2.318,179,3.275,205,3.018,223,1.332,242,3.814,249,2.804,259,4.028,304,4.028,339,3.018,503,3.018,505,4.028,506,5.091,507,4.682,508,5.918,509,4.682,510,4.682,511,4.028,512,3.597,513,4.028,514,4.028,515,4.028,516,4.682,517,4.682,518,4.682,519,4.682,520,2.804,521,4.682]],["title/interfaces/JwtUser.html",[174,1.853,522,1.967]],["body/interfaces/JwtUser.html",[3,0.305,4,0.305,5,0.242,7,0.626,8,2.061,26,0.018,28,0.587,33,1.112,45,0.305,87,0.016,88,0.016,174,3.264,520,4.339,522,2.936,523,3.908,524,4.807]],["title/injectables/LocalAuthGuard.html",[0,0.249,201,2.618]],["body/injectables/LocalAuthGuard.html",[0,0.438,2,1.381,3,0.305,4,0.305,5,0.242,26,0.018,37,0.787,38,0.626,45,0.305,46,0.152,87,0.016,88,0.016,201,4.612,249,3.346,502,4.807,503,3.601,525,4.807,526,5.587]],["title/injectables/LocalStrategy.html",[0,0.249,243,2.413]],["body/injectables/LocalStrategy.html",[0,0.369,2,1.049,3,0.232,4,0.232,5,0.184,7,0.476,13,1.31,14,1.531,17,1.391,23,0.88,25,1.249,26,0.018,27,1.08,28,0.584,29,0.928,31,1.001,33,1.109,37,0.835,38,0.476,45,0.232,46,0.116,47,1.327,74,2.216,75,1.266,87,0.013,88,0.013,119,1.782,120,2.742,162,2.75,168,2.236,172,2.75,182,1.879,187,2.759,188,1.879,203,3.916,204,3.26,215,1.984,216,2.23,223,1.208,243,3.581,249,2.541,300,2.735,503,2.735,506,4.779,511,3.651,512,3.26,513,3.651,514,3.651,515,3.651,527,3.651,528,4.244,529,4.244,530,5.555,531,4.244,532,3.651,533,5.555,534,4.244,535,4.244]],["title/injectables/LoggerMiddleware.html",[0,0.249,536,2.876]],["body/injectables/LoggerMiddleware.html",[0,0.406,2,1.219,3,0.269,4,0.269,5,0.214,7,0.553,13,1.441,23,0.781,25,1.108,26,0.018,27,0.958,28,0.518,29,0.823,31,1.162,37,0.588,38,0.553,45,0.269,46,0.134,87,0.014,88,0.014,175,3.178,536,4.696,537,4.241,538,4.696,539,6.113,540,6.644,541,5.975,542,6.644,543,4.93,544,4.93,545,4.241,546,6.113,547,4.241,548,6.644,549,4.93,550,4.93]],["title/classes/LoginDto.html",[46,0.102,176,2.413]],["body/classes/LoginDto.html",[3,0.296,4,0.296,5,0.235,7,0.608,8,2.025,23,1.027,26,0.018,28,0.681,33,1.137,45,0.296,46,0.148,87,0.015,88,0.015,176,4.176,182,3.067,187,2.909,362,2.685,551,4.667,552,5.425,553,5.425]],["title/controllers/MovieController.html",[146,1.853,554,2.618]],["body/controllers/MovieController.html",[3,0.13,4,0.13,5,0.103,7,0.266,10,0.742,13,0.864,14,1.755,23,0.912,25,1.007,26,0.018,27,0.871,28,0.471,29,0.748,31,1.356,33,1.007,35,3.246,37,0.811,38,0.266,42,3.163,43,0.857,45,0.13,46,0.065,47,0.742,75,1.716,87,0.009,88,0.009,119,0.997,120,3.122,146,2.217,148,1.11,150,1.53,152,1.53,154,4.758,155,2.195,162,3.213,163,3.445,164,4.024,168,2.295,172,3.32,174,2.968,177,3.132,199,1.661,200,1.661,202,1.661,205,1.53,206,1.661,209,1.329,210,1.661,212,4.194,213,1.661,214,1.53,215,1.11,216,1.248,219,4.024,223,1.637,306,1.824,327,1.786,464,2.195,475,2.853,499,1.422,554,2.564,555,2.043,556,3.666,557,5.036,558,4.332,559,3.666,560,4.332,561,3.666,562,2.374,563,3.666,564,3.154,565,4.419,566,4.987,567,2.374,568,2.374,569,3.22,570,2.374,571,2.374,572,4.682,573,2.374,574,2.374,575,2.374,576,3.154,577,3.666,578,2.374,579,2.374,580,2.374,581,2.374,582,2.374,583,3.666,584,3.154,585,3.44,586,2.043,587,2.374,588,1.175,589,3.869,590,2.682,591,2.043,592,1.824,593,1.53,594,2.043,595,1.53,596,2.043,597,1.53,598,2.816,599,1.53,600,2.374,601,2.374,602,2.374,603,2.374,604,2.374,605,2.374,606,2.374,607,2.374,608,3.44,609,2.043,610,2.374,611,2.374,612,2.043,613,2.374,614,3.154,615,2.374,616,2.043,617,2.043,618,2.374,619,2.374]],["title/modules/MovieDBModule.html",[89,0.97,427,1.967]],["body/modules/MovieDBModule.html",[3,0.267,4,0.267,5,0.212,21,3.378,26,0.018,37,0.79,38,0.548,45,0.267,46,0.133,87,0.014,88,0.014,89,1.575,91,1.854,92,2.195,100,2.553,101,1.764,102,1.949,246,2.843,427,3.942,458,2.497,460,3.918,462,2.285,620,4.204,621,4.204,622,4.204,623,4.887,624,4.887]],["title/injectables/MovieDBService.html",[0,0.249,21,1.657]],["body/injectables/MovieDBService.html",[0,0.292,2,0.749,3,0.166,4,0.166,5,0.131,7,0.34,10,0.948,13,1.038,14,1.86,17,0.994,21,1.949,23,1.077,25,1.498,26,0.019,27,1.296,28,0.7,29,1.113,31,1.571,33,1.12,37,0.619,38,0.34,43,1.094,45,0.166,46,0.083,47,0.948,75,1.987,87,0.01,88,0.01,223,1.896,270,2.95,327,1.756,458,1.957,462,1.417,464,2.636,465,3.667,466,1.954,468,2.177,469,3.079,473,3.787,475,2.798,479,1.954,588,2.179,625,2.608,626,4.403,627,4.403,628,4.403,629,3.031,630,4.46,631,3.031,632,3.382,633,3.031,634,4.403,635,3.121,636,3.031,637,3.667,638,3.787,639,3.031,640,3.031,641,4.403,642,3.031,643,4.403,644,3.031,645,3.031,646,4.403,647,4.403,648,3.031,649,3.382,650,3.031,651,3.031,652,3.031,653,2.608]],["title/interfaces/MovieExtType.html",[522,1.967,593,2.413]],["body/interfaces/MovieExtType.html",[3,0.246,4,0.246,5,0.195,7,0.505,8,1.806,26,0.018,28,0.777,33,1.211,45,0.246,87,0.014,88,0.014,475,2.823,492,4.702,493,4.333,522,2.368,523,3.152,585,5.164,593,3.722,635,3.661,649,5.164,654,3.876,655,5.783,656,5.783,657,4.333,658,5.783,659,5.483]],["title/modules/MovieModule.html",[89,0.97,97,2.413]],["body/modules/MovieModule.html",[3,0.217,4,0.217,5,0.172,26,0.018,37,0.87,38,0.445,45,0.217,46,0.108,87,0.013,88,0.013,89,1.378,91,1.507,92,1.92,97,4.93,100,2.233,101,1.434,102,1.584,104,3.184,148,2.486,241,3.4,246,2.486,247,2.778,426,4.113,427,3.609,428,3.609,429,3.844,458,2.362,554,4.193,590,4.113,591,3.417,660,3.417,661,3.972,662,3.417,663,3.609,664,3.972,665,3.972,666,3.417,667,3.051,668,3.051,669,3.417,670,3.972,671,3.417]],["title/injectables/MovieService.html",[0,0.249,590,2.242]],["body/injectables/MovieService.html",[0,0.204,2,0.469,3,0.104,4,0.104,5,0.082,7,0.213,8,0.959,9,2.904,10,1.979,13,0.724,14,1.684,17,0.622,20,2.57,21,2.311,23,0.937,25,0.999,26,0.019,27,0.864,28,0.513,29,0.742,31,1.231,33,1.003,35,1.978,37,0.789,38,0.213,42,2.534,43,0.685,45,0.104,46,0.052,47,0.593,74,2.525,75,2.049,76,2.146,80,1.326,87,0.007,88,0.007,119,0.796,120,2.803,127,1.519,162,3.006,168,1.604,182,1.359,188,2.617,209,1.718,210,1.326,215,0.887,223,1.728,266,2.57,270,2.311,278,1.326,279,1.457,281,1.631,282,1.326,292,1.457,299,1.457,300,3.811,306,1.457,314,2.357,318,1.978,320,2.146,321,2.357,349,1.061,350,1.136,457,2.486,465,2.863,468,0.796,475,2.403,479,1.222,481,1.326,482,2.57,491,2.97,492,3.107,493,2.491,498,1.631,520,1.838,558,3.821,560,3.821,569,1.061,585,2.357,588,1.519,590,1.838,593,1.978,594,1.631,595,1.978,596,1.631,597,1.222,598,3.412,599,1.222,630,1.631,632,2.357,635,1.913,638,2.64,649,4.542,655,1.631,656,2.64,657,2.491,658,2.64,663,2.888,669,1.631,672,1.631,673,3.821,674,3.069,675,3.866,676,3.069,677,1.896,678,1.896,679,1.896,680,1.896,681,1.896,682,3.069,683,1.896,684,2.97,685,1.896,686,3.069,687,1.457,688,1.457,689,1.896,690,1.631,691,1.457,692,1.896,693,1.896,694,1.896,695,1.896,696,1.896,697,1.896,698,3.325,699,1.896,700,1.896,701,1.896,702,2.64,703,1.896,704,4.442,705,3.069,706,3.069,707,1.896,708,1.896,709,1.896,710,1.896,711,1.896,712,1.896,713,1.896,714,3.069,715,1.896,716,3.069,717,1.896,718,2.64,719,1.896,720,1.631,721,1.896,722,1.896,723,1.896,724,1.896,725,1.457,726,1.896,727,1.896,728,1.896,729,1.896,730,1.896,731,1.896,732,1.896,733,1.896,734,1.631,735,1.896,736,1.896,737,1.896,738,1.896,739,1.896,740,1.896,741,1.896,742,1.896,743,1.896,744,1.631,745,1.896,746,1.896,747,1.896,748,1.896,749,1.457,750,1.896,751,1.896,752,1.896]],["title/classes/PasswordDto.html",[46,0.102,186,2.413]],["body/classes/PasswordDto.html",[3,0.295,4,0.295,5,0.234,7,0.604,8,2.018,23,1.023,26,0.018,28,0.678,29,1.078,33,1.135,45,0.295,46,0.147,87,0.015,88,0.015,186,4.16,187,2.901,362,2.668,753,4.637,754,5.307,755,5.39,756,5.39]],["title/classes/PasswordNewDto.html",[46,0.102,757,2.618]],["body/classes/PasswordNewDto.html",[3,0.286,4,0.286,5,0.227,7,0.587,8,1.983,23,1.081,26,0.018,28,0.717,29,1.06,33,1.17,45,0.286,46,0.143,87,0.015,88,0.015,187,2.865,362,2.593,754,5.242,757,4.437,758,4.506,759,5.87,760,5.238,761,5.238,762,5.238]],["title/injectables/PasswordService.html",[0,0.249,244,1.657]],["body/injectables/PasswordService.html",[0,0.373,2,1.068,3,0.236,4,0.236,5,0.187,7,0.484,13,1.325,14,1.738,23,0.99,25,1.405,26,0.018,27,1.215,28,0.657,29,1.043,31,1.473,33,1.205,37,0.671,38,0.484,45,0.236,46,0.118,74,1.723,87,0.013,88,0.013,172,3.275,187,2.36,223,1.778,244,2.488,451,6.049,763,3.319,764,5.621,765,5.621,766,5.621,767,4.32,768,5.621,769,4.32,770,5.621,771,4.32,772,3.022,773,3.716,774,4.32,775,3.716,776,4.32,777,4.32,778,3.716,779,4.32,780,4.32]],["title/injectables/PrismaService.html",[0,0.249,458,1.288]],["body/injectables/PrismaService.html",[0,0.395,2,1.167,3,0.258,4,0.258,5,0.205,7,0.529,13,1.403,14,1.806,23,0.943,25,1.062,26,0.018,27,0.918,28,0.496,29,0.789,31,1.403,37,0.71,38,0.529,43,1.705,45,0.258,46,0.129,75,1.774,87,0.014,88,0.014,458,2.046,503,3.835,547,4.062,781,4.062,782,6.515,783,5.95,784,7.198,785,5.95,786,6.839,787,4.722,788,4.722,789,4.722,790,4.722,791,4.722,792,4.722]],["title/classes/ProfileDto.html",[46,0.102,793,2.413]],["body/classes/ProfileDto.html",[3,0.295,4,0.295,5,0.234,7,0.604,8,2.018,23,1.023,26,0.018,27,1.343,28,0.678,29,1.078,33,1.023,45,0.295,46,0.147,87,0.015,88,0.015,362,2.668,365,4.16,793,4.16,794,4.637,795,5.943,796,5.39,797,5.39]],["title/classes/RegisterDto.html",[46,0.102,196,2.413]],["body/classes/RegisterDto.html",[3,0.278,4,0.278,5,0.221,7,0.571,8,1.95,23,1.113,26,0.018,27,1.311,28,0.738,29,1.042,33,1.188,45,0.278,46,0.139,87,0.015,88,0.015,182,2.985,187,2.831,196,4.02,362,2.522,754,5.179,798,4.383,799,5.095,800,5.095,801,5.095,802,5.095]],["title/classes/ResDto.html",[46,0.102,209,2.095]],["body/classes/ResDto.html",[3,0.295,4,0.295,5,0.234,7,0.604,8,2.018,23,1.023,26,0.018,28,0.678,29,1.078,33,1.023,45,0.295,46,0.147,87,0.015,88,0.015,209,3.612,318,4.453,320,4.832,362,2.668,365,4.16,803,4.637,804,5.39,805,5.39]],["title/controllers/UserController.html",[146,1.853,806,2.618]],["body/controllers/UserController.html",[3,0.107,4,0.107,5,0.085,7,0.22,10,0.613,13,0.743,14,1.783,23,0.948,25,1.303,26,0.018,27,1.193,28,0.609,29,0.968,31,1.41,33,0.627,37,0.785,38,0.22,45,0.107,46,0.053,47,0.613,75,1.728,87,0.007,88,0.007,119,0.823,120,3.193,127,0.97,146,1.957,148,0.917,150,1.264,152,1.264,154,2.422,155,1.888,162,3.334,163,3.581,164,4.183,165,1.264,168,2.583,172,3.038,174,3.488,175,4.542,176,2.919,177,4.293,181,2.712,182,1.396,186,2.919,187,0.823,199,1.371,200,1.371,202,1.371,205,1.264,206,1.371,207,1.687,209,1.097,210,1.371,211,1.687,212,4.293,213,1.371,214,1.264,215,0.917,216,1.03,219,4.183,223,1.702,237,3.401,270,2.005,327,1.806,361,3.168,364,3.168,499,1.174,566,2.422,576,2.712,588,2.624,589,4.594,592,1.506,608,4.451,637,2.548,757,3.168,793,2.919,806,2.205,807,1.687,808,2.712,809,2.712,810,4.529,811,3.153,812,3.153,813,3.153,814,1.961,815,4.985,816,1.961,817,1.961,818,1.961,819,1.961,820,1.961,821,2.712,822,2.712,823,1.961,824,1.961,825,1.961,826,1.961,827,1.961,828,1.961,829,3.153,830,1.961,831,1.961,832,1.961,833,1.961,834,1.961,835,1.961,836,3.153,837,1.961,838,1.961,839,1.961,840,3.153,841,1.961,842,1.961,843,1.961,844,2.422,845,1.961,846,1.961,847,2.368,848,1.687,849,1.687,850,1.961,851,1.961,852,1.961,853,1.961,854,1.961,855,1.961,856,1.961,857,1.961,858,1.961,859,1.961,860,1.961,861,1.961,862,1.961,863,1.961,864,1.961,865,1.961,866,1.961,867,1.961,868,1.961,869,1.961,870,1.961,871,1.961,872,1.961,873,1.961,874,1.961,875,1.961,876,1.961,877,1.961,878,1.961,879,1.961,880,1.961,881,1.961]],["title/modules/UserDBModule.html",[89,0.97,241,1.853]],["body/modules/UserDBModule.html",[3,0.257,4,0.257,5,0.204,26,0.018,37,0.815,38,0.528,45,0.257,46,0.128,87,0.014,88,0.014,89,1.539,91,1.786,92,2.144,100,2.494,101,1.7,102,1.878,241,3.74,244,3.184,246,2.777,266,3.551,458,2.474,460,3.828,462,2.202,882,4.051,883,4.051,884,4.051,885,4.709,886,4.709,887,4.051]],["title/injectables/UserDBService.html",[0,0.249,266,1.75]],["body/injectables/UserDBService.html",[0,0.3,2,0.776,3,0.172,4,0.172,5,0.136,7,0.352,9,1.468,10,1.412,13,1.065,14,1.85,17,1.029,23,1.066,25,1.435,26,0.019,27,1.24,28,0.707,29,1.066,31,1.55,33,0.838,37,0.69,38,0.352,43,1.133,45,0.172,46,0.086,47,0.981,74,1.252,75,1.347,87,0.011,88,0.011,127,1.554,168,1.133,172,3.581,182,1.999,223,1.871,244,2.911,266,2.111,327,2.444,364,2.196,458,1.989,462,1.468,465,3.727,466,2.023,468,2.221,479,2.023,588,2.235,720,4.549,815,3.884,887,2.7,888,2.7,889,3.884,890,5.783,891,4.515,892,3.139,893,4.515,894,3.139,895,4.515,896,5.656,897,3.139,898,3.139,899,3.139,900,5.288,901,3.139,902,3.139,903,4.515,904,3.139,905,4.515,906,3.884,907,3.139,908,4.515,909,3.139,910,3.139,911,4.515,912,3.139,913,3.139,914,3.139,915,2.7,916,3.139,917,3.139]],["title/modules/UserModule.html",[89,0.97,98,2.413]],["body/modules/UserModule.html",[3,0.217,4,0.217,5,0.172,22,3.212,26,0.018,37,0.87,38,0.445,45,0.217,46,0.108,87,0.013,88,0.013,89,1.378,91,1.507,92,1.92,98,4.93,100,2.233,101,1.434,102,1.584,104,3.184,148,2.486,241,3.4,244,3.041,246,2.486,247,2.778,255,2.778,256,2.778,427,3.609,428,3.609,429,3.844,441,4.113,667,3.051,668,3.051,671,3.417,806,4.193,847,4.113,848,3.417,918,3.417,919,3.972,920,3.417,921,3.972,922,3.972,923,3.417]],["title/injectables/UserService.html",[0,0.249,847,2.242]],["body/injectables/UserService.html",[0,0.183,2,0.41,3,0.091,4,0.091,5,0.072,7,0.186,9,2.292,10,1.623,13,0.649,14,1.713,17,0.544,20,2.427,21,2.17,22,2.427,23,0.893,25,1.267,26,0.019,27,1.184,28,0.592,29,0.941,31,1.28,33,1.014,35,1.07,37,0.774,38,0.186,42,0.735,43,0.599,45,0.091,46,0.045,47,0.519,74,2.516,75,2.078,76,1.161,87,0.007,88,0.007,119,0.697,120,2.87,127,2.426,158,1.275,162,3.209,168,2.278,171,1.924,182,0.735,187,2.28,188,2.404,215,0.776,216,0.872,223,1.603,244,2.298,255,1.161,256,1.161,266,2.427,270,2.404,278,1.161,279,1.275,282,1.161,285,2.707,286,1.161,287,1.428,288,1.161,289,1.428,290,1.161,291,1.428,292,3.987,293,2.367,294,3.032,298,1.428,299,1.275,300,3.5,302,2.367,313,1.275,318,2.93,320,3.179,326,3.527,327,2.07,328,2.367,339,1.773,364,2.465,365,2.271,441,3.108,468,0.697,481,1.161,482,2.427,520,3.647,569,0.929,588,1.362,635,3.431,637,4.347,657,1.773,687,1.275,688,1.275,690,1.428,744,1.428,759,3.032,793,2.643,795,2.367,808,2.367,809,2.367,847,1.648,849,1.428,915,1.428,923,1.428,924,1.428,925,2.752,926,2.752,927,2.752,928,1.66,929,2.752,930,3.524,931,1.66,932,2.752,933,1.66,934,2.752,935,4.546,936,1.66,937,2.752,938,1.66,939,2.752,940,4.1,941,1.66,942,2.752,943,1.66,944,2.752,945,1.66,946,2.752,947,1.66,948,3.524,949,2.752,950,1.66,951,1.66,952,1.66,953,1.66,954,2.752,955,1.66,956,1.66,957,1.66,958,2.752,959,2.752,960,1.66,961,1.66,962,1.66,963,1.66,964,1.66,965,1.66,966,1.66,967,1.66,968,1.66,969,3.524,970,1.66,971,1.66,972,1.66,973,1.66,974,2.752,975,1.66,976,2.752,977,1.66,978,1.66,979,1.66,980,1.66,981,1.66,982,1.66,983,1.66,984,1.66,985,1.66,986,1.66,987,1.66,988,1.66]],["title/controllers/VoteController.html",[146,1.853,989,2.618]],["body/controllers/VoteController.html",[3,0.157,4,0.157,5,0.124,7,0.321,10,0.896,13,0.996,14,1.728,23,0.878,25,1.245,26,0.018,27,1.077,28,0.582,29,0.925,31,1.306,33,1.061,37,0.799,38,0.321,42,2.222,43,1.035,45,0.157,46,0.078,47,0.896,87,0.01,88,0.01,119,1.203,120,3.29,146,2.484,148,1.34,150,1.847,152,1.847,155,2.53,162,3.495,163,3.317,164,3.875,168,2.418,172,3.247,174,3.371,177,3.511,199,2.004,200,2.004,202,2.004,205,1.847,206,2.004,212,4.132,213,2.004,214,1.847,215,1.34,216,1.506,219,3.875,223,1.576,475,2.754,499,1.716,566,3.246,569,2.365,586,2.465,588,2.484,589,4.255,592,2.201,597,3.983,608,3.856,609,2.465,612,2.465,614,3.635,616,3.635,617,2.465,635,2.091,657,2.723,663,2.637,989,2.955,990,2.465,991,4.225,992,3.635,993,4.225,994,4.765,995,2.865,996,2.865,997,2.865,998,2.865,999,4.225,1000,3.635,1001,2.865,1002,2.865,1003,2.865,1004,2.865,1005,2.865,1006,2.865,1007,2.865,1008,2.465,1009,2.865,1010,2.865,1011,2.865,1012,2.865,1013,2.865,1014,2.865,1015,2.865,1016,2.865,1017,2.865,1018,2.865]],["title/modules/VoteDBModule.html",[89,0.97,428,1.967]],["body/modules/VoteDBModule.html",[3,0.267,4,0.267,5,0.212,26,0.018,37,0.79,38,0.548,45,0.267,46,0.133,87,0.014,88,0.014,89,1.575,91,1.854,92,2.195,100,2.553,101,1.764,102,1.949,246,2.843,428,3.942,458,2.497,460,3.918,462,2.285,482,3.568,1019,4.204,1020,4.204,1021,4.204,1022,4.887,1023,4.887]],["title/injectables/VoteDBService.html",[0,0.249,482,1.75]],["body/injectables/VoteDBService.html",[0,0.247,2,0.599,3,0.132,4,0.132,5,0.105,7,0.272,10,0.757,13,0.878,14,1.857,17,0.794,23,1.068,25,1.515,26,0.019,27,1.31,28,0.708,29,1.125,31,1.566,33,1.013,37,0.541,38,0.272,42,2.008,43,0.875,45,0.132,46,0.066,47,0.757,75,1.98,87,0.009,88,0.009,127,2.245,168,1.838,223,1.89,270,2.94,327,2.313,458,1.751,462,1.133,464,2.229,466,1.561,468,1.904,469,2.604,475,2.829,482,1.741,520,2.229,588,1.843,635,3.335,637,4.207,653,3.901,896,3.901,1024,2.084,1025,3.723,1026,3.723,1027,3.723,1028,3.723,1029,3.723,1030,3.203,1031,3.723,1032,2.422,1033,3.901,1034,2.422,1035,3.723,1036,4.989,1037,2.422,1038,3.723,1039,2.422,1040,3.723,1041,2.422,1042,3.723,1043,2.422,1044,3.723,1045,2.422,1046,3.723,1047,3.723,1048,2.422,1049,3.723,1050,2.422,1051,3.203,1052,2.422,1053,3.723,1054,2.422,1055,3.723,1056,2.422,1057,2.422,1058,2.422,1059,3.723,1060,3.723,1061,3.203,1062,2.422,1063,3.723,1064,2.422,1065,2.422,1066,2.422,1067,2.422,1068,2.422,1069,3.723]],["title/modules/VoteModule.html",[89,0.97,99,2.413]],["body/modules/VoteModule.html",[3,0.239,4,0.239,5,0.19,26,0.018,37,0.857,38,0.491,45,0.239,46,0.119,87,0.013,88,0.013,89,1.469,91,1.66,92,2.046,99,4.89,100,2.38,101,1.58,102,1.746,104,3.394,148,2.65,241,3.493,246,2.65,247,3.061,427,3.707,428,3.707,458,2.427,663,3.707,666,3.765,667,3.362,668,3.362,989,4.397,1008,3.765,1070,4.377,1071,4.377,1072,4.377,1073,4.377,1074,4.377]],["title/injectables/VoteService.html",[0,0.249,663,1.967]],["body/injectables/VoteService.html",[0,0.264,2,0.654,3,0.144,4,0.144,5,0.115,7,0.296,8,1.244,9,2.67,10,1.876,13,0.938,14,1.699,17,0.867,21,2.656,23,0.951,25,1.284,26,0.019,27,1.11,28,0.6,29,0.954,31,1.255,33,1.039,37,0.743,38,0.296,42,2.357,43,0.955,45,0.144,46,0.072,47,0.827,74,2.123,75,1.789,87,0.009,88,0.009,119,1.11,120,3.077,162,3.44,168,0.955,188,2.656,215,1.236,216,1.389,223,1.515,266,2.911,270,2.357,278,1.849,280,2.274,282,1.849,300,3.867,314,4.09,321,4.09,349,1.48,350,1.583,468,1.11,475,2.398,481,1.849,482,2.911,520,1.583,597,2.565,635,3.244,637,4.371,663,2.091,687,2.031,688,2.031,698,4.58,702,2.274,718,2.274,725,3.057,734,2.274,992,3.423,994,3.423,1030,3.423,1033,2.274,1036,2.274,1051,3.423,1075,2.274,1076,4.58,1077,3.98,1078,3.98,1079,2.644,1080,2.644,1081,3.98,1082,2.644,1083,3.98,1084,2.644,1085,3.98,1086,2.644,1087,3.98,1088,2.644,1089,2.644,1090,3.98,1091,2.644,1092,3.98,1093,2.644,1094,3.98,1095,2.644,1096,2.644,1097,2.644,1098,2.644,1099,2.644,1100,2.644,1101,2.644,1102,2.644]],["title/modules/WatchListDBModule.html",[89,0.97,429,2.095]],["body/modules/WatchListDBModule.html",[3,0.267,4,0.267,5,0.212,20,3.568,26,0.018,37,0.79,38,0.548,45,0.267,46,0.133,87,0.014,88,0.014,89,1.575,91,1.854,92,2.195,100,2.553,101,1.764,102,1.949,246,2.843,429,4.199,458,2.497,460,3.918,462,2.285,1103,4.204,1104,4.204,1105,4.204,1106,4.887,1107,4.887]],["title/injectables/WatchListDBService.html",[0,0.249,20,1.75]],["body/injectables/WatchListDBService.html",[0,0.367,2,1.038,3,0.23,4,0.23,5,0.182,7,0.471,10,1.313,13,1.301,14,1.804,17,1.377,20,2.581,23,1.037,25,1.386,26,0.018,27,1.198,28,0.648,29,1.029,31,1.453,33,0.977,37,0.735,38,0.471,43,1.517,45,0.23,46,0.115,47,1.313,75,1.838,87,0.013,88,0.013,223,1.754,270,2.729,327,2.201,458,2.251,462,1.964,464,3.305,465,4.219,466,2.708,468,2.588,469,3.86,475,2.317,588,2.732,632,4.24,1108,3.614,1109,4.201,1110,5.302,1111,4.201,1112,4.201,1113,4.201,1114,4.201,1115,4.201,1116,4.201]],["title/injectables/WatchListJob.html",[0,0.249,431,2.413]],["body/injectables/WatchListJob.html",[0,0.316,1,4.02,2,0.834,3,0.184,4,0.184,5,0.146,7,0.378,8,1.486,9,3.259,10,2.208,13,1.12,14,1.36,15,4.178,17,1.106,20,3.139,21,2.972,23,0.947,25,0.758,26,0.019,27,0.656,28,0.354,29,0.563,31,0.795,33,1.035,37,0.818,38,0.378,40,2.591,41,2.591,42,2.645,43,1.218,45,0.184,46,0.092,47,1.054,72,2.591,73,2.174,74,2.512,75,1.782,78,2.591,79,2.591,80,4.178,87,0.011,88,0.011,114,2.359,163,2.02,188,1.493,327,1.345,349,2.66,350,2.846,431,3.063,468,1.416,475,1.416,482,3.055,484,3.849,487,2.901,491,2.591,725,2.591,1110,2.901,1117,2.901,1118,4.733,1119,5.502,1120,3.373,1121,4.752,1122,3.373,1123,4.752,1124,3.373,1125,4.752,1126,5.502,1127,3.373,1128,2.901,1129,3.373,1130,3.373,1131,3.373,1132,4.752,1133,3.373,1134,3.373,1135,3.373,1136,3.373,1137,4.752,1138,3.373,1139,2.901,1140,3.373,1141,3.373,1142,3.373]],["title/interfaces/WatchlistExtType.html",[522,1.967,595,2.413]],["body/interfaces/WatchlistExtType.html",[3,0.273,4,0.273,5,0.216,7,0.559,8,1.925,26,0.018,28,0.753,33,1.193,45,0.273,80,4.878,87,0.015,88,0.015,475,2.928,492,4.878,493,4.495,522,2.621,523,3.489,595,3.969,635,3.306,659,5.745,749,5.357,1143,4.292]],["title/coverage.html",[1144,4.395]],["body/coverage.html",[0,0.49,1,1.63,5,0.118,6,2.341,19,1.63,20,1.272,21,1.205,22,1.272,26,0.018,28,0.286,46,0.171,87,0.01,88,0.01,121,2.09,146,2.674,147,1.903,149,2.341,168,0.982,174,1.347,176,1.754,186,1.754,188,1.205,196,1.754,201,1.903,203,1.523,209,1.523,242,1.754,243,1.754,244,1.205,263,2.341,266,1.272,286,1.903,288,1.903,290,1.903,342,2.341,361,1.903,363,2.341,367,3.124,390,1.903,430,1.754,431,1.754,441,1.63,442,2.341,457,1.523,458,0.936,463,2.341,479,4.991,480,2.341,482,1.272,499,1.63,500,2.341,501,2.341,505,2.341,522,2.558,524,2.341,525,2.341,527,2.341,536,2.09,537,2.341,545,3.498,551,2.341,554,1.903,555,2.341,590,1.63,593,1.754,595,1.754,625,2.341,654,2.341,663,1.43,672,2.341,691,2.09,753,2.341,757,1.903,758,2.341,763,3.124,772,1.903,778,2.341,781,2.341,793,1.754,794,2.341,798,2.341,803,2.341,806,1.903,807,2.341,847,1.63,888,2.341,924,2.341,989,1.903,990,2.341,1024,2.341,1075,2.341,1108,2.341,1117,2.341,1143,2.341,1144,2.341,1145,2.341,1146,2.721,1147,2.721,1148,2.341,1149,7.212,1150,2.09,1151,7.356,1152,2.341,1153,2.341,1154,4.646,1155,2.341,1156,2.341,1157,2.341,1158,2.341,1159,2.341,1160,2.341,1161,5.781,1162,5.401,1163,6.606,1164,4.066,1165,2.721,1166,2.341,1167,4.066,1168,4.869,1169,4.066,1170,2.341,1171,2.341,1172,2.341,1173,2.341,1174,2.341,1175,2.341,1176,2.341,1177,2.341,1178,2.341,1179,3.124,1180,2.09,1181,2.721,1182,2.721,1183,2.721,1184,2.721,1185,2.721,1186,2.721,1187,2.721,1188,2.721,1189,2.721,1190,2.721,1191,2.721]],["title/dependencies.html",[92,1.626,1192,2.69]],["body/dependencies.html",[26,0.019,38,0.511,43,1.645,87,0.014,88,0.014,92,1.645,108,3.918,109,3.499,114,3.186,116,3.918,119,1.913,120,2.017,179,3.186,214,2.936,249,2.728,253,3.499,285,3.499,353,3.918,390,3.186,468,1.913,484,3.186,512,4.921,532,3.918,598,3.499,599,2.936,772,3.186,775,3.918,1128,3.918,1193,6.974,1194,4.555,1195,4.555,1196,4.555,1197,3.918,1198,4.555,1199,4.555,1200,4.555,1201,4.555,1202,4.555,1203,4.555,1204,4.555,1205,4.555,1206,4.555,1207,4.555,1208,4.555,1209,4.555,1210,4.555,1211,3.918,1212,4.555,1213,4.555,1214,4.555,1215,4.555,1216,4.555,1217,3.918,1218,4.555,1219,4.555,1220,4.555,1221,4.555,1222,4.555,1223,4.555,1224,4.555,1225,4.555]],["title/miscellaneous/functions.html",[1226,1.872,1227,3.459]],["body/miscellaneous/functions.html",[7,0.614,25,1.232,26,0.016,27,1.065,28,0.576,29,0.915,33,1.141,87,0.015,88,0.015,175,4.2,1152,4.712,1153,5.606,1179,4.208,1180,5.344,1226,3.28,1227,4.208,1228,4.712,1229,5.478,1230,5.478,1231,5.606,1232,4.712,1233,6.516]],["title/index.html",[7,0.351,73,2.015,1234,2.69]],["body/index.html",[5,0.233,15,4.94,23,0.85,26,0.008,28,0.242,42,2.193,87,0.008,88,0.008,92,1.293,109,1.769,119,0.967,131,1.981,141,1.981,143,3.374,144,3.08,148,1.077,150,1.484,155,2.144,165,1.484,168,0.831,188,1.585,327,1.428,349,1.289,362,1.14,464,2.63,468,2.386,522,1.21,538,2.75,564,1.981,565,4.555,569,2.458,584,3.08,597,1.484,599,3.662,684,5.183,749,1.769,844,1.769,889,1.981,1000,1.981,1061,3.08,1150,2.75,1180,1.769,1211,1.981,1227,1.769,1232,4.262,1235,2.303,1236,2.303,1237,2.303,1238,2.303,1239,4.392,1240,3.08,1241,1.981,1242,2.303,1243,4.392,1244,2.303,1245,2.303,1246,2.303,1247,2.303,1248,3.778,1249,2.303,1250,2.303,1251,2.303,1252,2.303,1253,3.58,1254,3.58,1255,3.08,1256,5.681,1257,4.392,1258,2.303,1259,2.303,1260,3.778,1261,2.303,1262,4.392,1263,3.58,1264,3.58,1265,2.303,1266,1.981,1267,2.303,1268,2.303,1269,4.954,1270,3.58,1271,2.303,1272,3.08,1273,2.303,1274,2.303,1275,2.303,1276,2.303,1277,2.303,1278,2.303,1279,5.366,1280,2.303,1281,2.303,1282,4.392,1283,2.303,1284,2.303,1285,2.303,1286,4.954,1287,2.303,1288,3.58,1289,3.58,1290,6.131,1291,5.274,1292,6.747,1293,3.58,1294,1.981,1295,2.303,1296,4.954,1297,4.392,1298,2.303,1299,2.303,1300,2.303,1301,2.303,1302,2.303,1303,2.303,1304,3.58,1305,2.303,1306,5.681,1307,2.303,1308,2.303,1309,2.303,1310,2.303,1311,2.303,1312,2.303,1313,2.303,1314,2.303,1315,6.437,1316,2.303,1317,2.303,1318,2.303,1319,3.58,1320,4.262,1321,2.303,1322,6.957,1323,3.58,1324,4.392,1325,2.303,1326,2.303,1327,2.303,1328,2.303,1329,2.303,1330,1.981,1331,4.392,1332,2.303,1333,3.58,1334,2.303,1335,2.303,1336,4.262,1337,2.303,1338,4.392,1339,2.303,1340,2.303,1341,2.303,1342,2.303,1343,3.778,1344,2.303,1345,2.303,1346,2.303,1347,2.303,1348,4.954,1349,4.392,1350,3.58,1351,5.366,1352,2.303,1353,2.303,1354,2.303,1355,2.303,1356,2.303,1357,1.981,1358,2.303,1359,3.58,1360,2.303,1361,2.303,1362,2.303,1363,2.303,1364,2.303,1365,2.303,1366,2.303,1367,2.303,1368,2.303,1369,2.303,1370,2.303,1371,3.58,1372,4.392,1373,3.58,1374,2.303,1375,3.58,1376,4.392,1377,2.303,1378,2.303,1379,2.303,1380,2.303,1381,1.981,1382,2.303,1383,3.58,1384,2.303,1385,2.303,1386,2.303,1387,2.303,1388,2.303,1389,2.303,1390,2.303,1391,2.303,1392,2.303,1393,2.303,1394,3.778,1395,2.303,1396,2.303,1397,2.303,1398,2.303,1399,2.303,1400,1.981,1401,2.303,1402,2.303,1403,2.303,1404,2.303,1405,3.58,1406,4.392,1407,2.303,1408,2.303,1409,2.303,1410,2.303,1411,2.303,1412,2.303,1413,2.303,1414,2.303,1415,2.303,1416,2.303,1417,1.981,1418,2.303,1419,2.303,1420,2.303,1421,2.303,1422,3.58,1423,2.303,1424,2.303,1425,2.303,1426,2.303]],["title/license.html",[73,2.015,1234,2.69,1427,2.402]],["body/license.html",[26,0.014,87,0.014,88,0.014,102,1.807,406,3.897,411,3.897,538,4.452,1145,3.897,1197,3.897,1255,5.497,1320,3.897,1417,3.897,1427,3.48,1428,3.897,1429,6.39,1430,4.53,1431,4.53,1432,4.53,1433,4.53,1434,5.796,1435,4.53,1436,4.53,1437,3.897,1438,4.53,1439,4.53,1440,4.53,1441,5.796,1442,7.404,1443,4.53,1444,4.53,1445,4.53,1446,5.796,1447,4.53,1448,4.53,1449,4.53,1450,4.53,1451,4.53,1452,4.53,1453,4.53,1454,4.53,1455,4.53,1456,5.796,1457,4.53,1458,4.53,1459,4.53,1460,4.53,1461,4.53,1462,5.796,1463,5.796,1464,4.53,1465,4.53,1466,4.53,1467,4.53,1468,4.53,1469,4.53,1470,4.53,1471,4.53,1472,4.53,1473,4.53,1474,4.53,1475,4.53,1476,4.53,1477,4.53,1478,3.897,1479,4.53,1480,4.53,1481,4.53,1482,4.53,1483,4.53,1484,4.53,1485,4.53,1486,4.53,1487,4.53,1488,4.53,1489,4.53,1490,4.53,1491,4.53]],["title/modules.html",[91,1.938]],["body/modules.html",[26,0.015,87,0.015,88,0.015,90,3.521,91,1.909,95,3.244,96,3.244,97,3.244,98,3.244,99,3.244,241,2.492,426,3.014,427,2.645,428,2.645,429,2.817,1260,6.561,1492,7.627,1493,7.627,1494,7.627]],["title/overview.html",[1495,4.395]],["body/overview.html",[1,2.896,2,0.665,19,2.896,20,2.928,21,2.772,22,2.69,26,0.018,87,0.01,88,0.01,90,4.825,91,1.021,92,1.456,93,2.315,94,2.315,95,4.576,96,4.77,97,4.692,98,4.692,99,4.495,100,1.693,101,0.971,102,1.073,148,1.258,203,2.706,238,2.315,239,2.315,240,2.315,241,3.485,242,3.117,243,3.117,244,2.547,266,2.928,362,1.332,423,2.315,424,2.315,425,2.315,426,3.944,427,3.578,428,3.578,429,3.754,430,3.117,431,3.117,441,2.896,454,2.315,455,2.315,456,2.315,457,3.505,458,2.265,482,2.928,523,1.882,590,2.896,620,2.315,621,2.315,622,2.315,660,2.315,662,2.315,663,2.822,847,2.896,882,2.315,883,2.315,884,2.315,918,2.315,920,2.315,1019,2.315,1020,2.315,1021,2.315,1103,2.315,1104,2.315,1105,2.315,1357,2.315,1495,2.315,1496,2.691,1497,2.691,1498,2.691,1499,2.315]],["title/properties.html",[8,1.408,1192,2.69]],["body/properties.html",[8,1.764,26,0.018,87,0.016,88,0.016,135,4.855,152,3.638,541,4.855,569,3.159,1217,4.855,1241,4.855,1272,4.855,1336,4.855,1427,4.336,1428,4.855,1500,5.644,1501,5.644,1502,5.644,1503,5.644,1504,5.644]],["title/miscellaneous/typealiases.html",[1226,1.872,1505,4.502]],["body/miscellaneous/typealiases.html",[7,0.646,26,0.016,28,0.705,87,0.016,88,0.016,124,4.425,138,4.955,215,3.139,906,4.955,1226,3.449,1506,5.76,1507,6.712,1508,6.712]],["title/miscellaneous/variables.html",[1226,1.872,1509,3.873]],["body/miscellaneous/variables.html",[7,0.227,14,0.5,26,0.018,27,1.205,28,0.34,29,0.338,33,0.731,35,3.251,42,0.896,74,1.611,75,0.965,87,0.008,88,0.008,101,1.168,121,2.485,124,4.644,127,1.601,143,2.485,155,1.212,157,1.555,160,2.485,165,1.305,168,1.666,174,1.002,179,2.825,182,0.896,187,0.85,188,0.896,192,2.485,223,1.149,258,1.742,270,0.896,286,2.262,288,2.262,290,2.262,327,1.611,339,2.973,349,3.831,350,4.192,356,3.475,365,1.305,367,1.555,368,1.742,390,2.262,391,1.742,396,1.742,398,3.475,484,2.825,493,1.305,565,1.555,569,3.159,572,3.969,599,2.085,635,2.284,657,1.305,673,1.742,684,1.555,691,2.485,763,1.555,772,2.262,773,1.742,821,1.742,822,1.742,844,2.485,1076,1.742,1118,1.742,1139,1.742,1148,1.742,1150,2.485,1154,1.742,1155,2.783,1156,2.783,1157,2.783,1158,2.783,1159,1.742,1160,2.783,1166,1.742,1170,1.742,1171,1.742,1172,2.783,1173,1.742,1174,2.783,1175,1.742,1176,1.742,1177,1.742,1178,1.742,1179,1.555,1226,1.212,1228,1.742,1231,1.742,1240,1.742,1248,1.742,1266,3.475,1291,1.742,1294,4.339,1330,1.742,1343,5.332,1381,1.742,1394,1.742,1400,1.742,1437,1.742,1478,1.742,1499,1.742,1509,1.742,1510,2.025,1511,2.025,1512,2.025,1513,2.025,1514,4.613,1515,2.025,1516,2.025,1517,2.025,1518,2.025,1519,2.025,1520,2.025,1521,2.025,1522,2.025,1523,2.025,1524,3.235,1525,6.953,1526,2.025,1527,2.025,1528,2.025,1529,2.025,1530,2.025,1531,2.025,1532,2.025,1533,2.025,1534,2.025,1535,2.025,1536,2.025,1537,4.04,1538,2.025,1539,2.025,1540,2.025,1541,2.025,1542,4.04,1543,2.025,1544,2.025,1545,5.043,1546,2.025,1547,2.025,1548,2.025,1549,3.235,1550,2.025,1551,2.025,1552,2.025,1553,2.025,1554,2.025,1555,3.235,1556,4.04,1557,4.04,1558,3.235,1559,3.235,1560,2.025,1561,2.025,1562,2.025,1563,4.04,1564,4.04,1565,2.025,1566,2.025,1567,2.025,1568,2.025,1569,2.025,1570,2.025,1571,2.025,1572,2.025,1573,2.025,1574,2.025,1575,2.025,1576,2.025,1577,2.025,1578,2.025,1579,2.025,1580,2.025,1581,2.025,1582,2.025,1583,2.025,1584,4.613,1585,5.378,1586,4.613,1587,2.025,1588,2.025,1589,2.025,1590,2.025,1591,2.025,1592,3.235,1593,2.025,1594,2.025,1595,2.025,1596,2.025,1597,2.025,1598,2.025,1599,2.025,1600,2.025,1601,2.025,1602,2.025,1603,2.025,1604,4.04,1605,2.025,1606,2.025,1607,2.025,1608,2.025,1609,2.025,1610,2.025,1611,2.025,1612,2.025,1613,3.235,1614,2.025,1615,2.025,1616,2.025,1617,2.025,1618,2.025,1619,6.045,1620,2.025,1621,2.025,1622,2.025,1623,2.025,1624,2.025,1625,2.025,1626,2.025,1627,2.025,1628,2.025,1629,2.025,1630,3.235,1631,2.025,1632,2.025,1633,2.025,1634,2.025,1635,3.235,1636,2.025,1637,2.025,1638,2.025,1639,2.025,1640,2.025,1641,2.025,1642,2.025,1643,2.025,1644,2.025,1645,2.025,1646,2.025,1647,2.025,1648,2.025,1649,2.025,1650,2.025,1651,4.613,1652,2.025,1653,2.025,1654,2.025,1655,2.025,1656,2.025,1657,2.025,1658,2.025,1659,2.025,1660,2.025,1661,3.235,1662,2.025,1663,2.025]]],"invertedIndex":[["",{"_index":26,"title":{},"body":{"injectables/AnnounceJob.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"classes/EmailOptInDto.html":{},"injectables/EmailService.html":{},"modules/EventModule.html":{},"injectables/GravatarService.html":{},"modules/HistoryDBModule.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/JwtUser.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoginDto.html":{},"controllers/MovieController.html":{},"modules/MovieDBModule.html":{},"injectables/MovieDBService.html":{},"interfaces/MovieExtType.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"classes/PasswordDto.html":{},"classes/PasswordNewDto.html":{},"injectables/PasswordService.html":{},"injectables/PrismaService.html":{},"classes/ProfileDto.html":{},"classes/RegisterDto.html":{},"classes/ResDto.html":{},"controllers/UserController.html":{},"modules/UserDBModule.html":{},"injectables/UserDBService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"modules/VoteDBModule.html":{},"injectables/VoteDBService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"modules/WatchListDBModule.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{},"interfaces/WatchlistExtType.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":479,"title":{},"body":{"injectables/HistoryDBService.html":{},"injectables/MovieDBService.html":{},"injectables/MovieService.html":{},"injectables/UserDBService.html":{},"coverage.html":{}}}],["0.1.13",{"_index":1221,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":1215,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1151,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1162,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":1165,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1168,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1163,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1169,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1161,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1167,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1189,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1183,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1164,"title":{},"body":{"coverage.html":{}}}],["1\").pattern(cron_pattern",{"_index":1556,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1.0.0",{"_index":1217,"title":{},"body":{"dependencies.html":{},"properties.html":{}}}],["1/10",{"_index":1186,"title":{},"body":{"coverage.html":{}}}],["1/5",{"_index":1188,"title":{},"body":{"coverage.html":{}}}],["1/6",{"_index":1182,"title":{},"body":{"coverage.html":{}}}],["1/7",{"_index":1185,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":778,"title":{},"body":{"injectables/PasswordService.html":{},"coverage.html":{}}}],["10.1.0",{"_index":1213,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":1253,"title":{},"body":{"index.html":{}}}],["11",{"_index":1496,"title":{},"body":{"overview.html":{}}}],["14",{"_index":1184,"title":{},"body":{"coverage.html":{}}}],["14.6.0",{"_index":1207,"title":{},"body":{"dependencies.html":{}}}],["15",{"_index":1139,"title":{},"body":{"injectables/WatchListJob.html":{},"miscellaneous/variables.html":{}}}],["16",{"_index":1181,"title":{},"body":{"coverage.html":{}}}],["17.7.0",{"_index":1212,"title":{},"body":{"dependencies.html":{}}}],["18.12.1",{"_index":1273,"title":{},"body":{"index.html":{}}}],["19",{"_index":1566,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2.1.0",{"_index":1198,"title":{},"body":{"dependencies.html":{}}}],["2.1.8",{"_index":1206,"title":{},"body":{"dependencies.html":{}}}],["2.2.0",{"_index":1194,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":1187,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":1652,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2022",{"_index":1431,"title":{},"body":{"license.html":{}}}],["22",{"_index":1498,"title":{},"body":{"overview.html":{}}}],["23",{"_index":1572,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3",{"_index":1357,"title":{},"body":{"index.html":{},"overview.html":{}}}],["3.0.0",{"_index":1199,"title":{},"body":{"dependencies.html":{}}}],["3.0.2",{"_index":1223,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":1497,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":1216,"title":{},"body":{"dependencies.html":{}}}],["4.1.1",{"_index":1205,"title":{},"body":{"dependencies.html":{}}}],["4.4.1",{"_index":1210,"title":{},"body":{"dependencies.html":{}}}],["4.5.0",{"_index":1201,"title":{},"body":{"dependencies.html":{}}}],["4.7.0",{"_index":1203,"title":{},"body":{"dependencies.html":{}}}],["4.7.1",{"_index":1218,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":1653,"title":{},"body":{"miscellaneous/variables.html":{}}}],["5,7",{"_index":1602,"title":{},"body":{"miscellaneous/variables.html":{}}}],["5.0.1",{"_index":1202,"title":{},"body":{"dependencies.html":{}}}],["5.1.1",{"_index":1209,"title":{},"body":{"dependencies.html":{}}}],["500",{"_index":1654,"title":{},"body":{"miscellaneous/variables.html":{}}}],["6.1.4",{"_index":1200,"title":{},"body":{"dependencies.html":{}}}],["6.8.0",{"_index":1214,"title":{},"body":{"dependencies.html":{}}}],["60000",{"_index":1126,"title":{},"body":{"injectables/WatchListJob.html":{}}}],["7",{"_index":1499,"title":{},"body":{"overview.html":{},"miscellaneous/variables.html":{}}}],["7.2.0",{"_index":1225,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":1604,"title":{},"body":{"miscellaneous/variables.html":{}}}],["9.0.0",{"_index":1193,"title":{},"body":{"dependencies.html":{}}}],["9._",{"_index":1662,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_count",{"_index":1063,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["above",{"_index":1461,"title":{},"body":{"license.html":{}}}],["accept",{"_index":1317,"title":{},"body":{"index.html":{}}}],["acceptlanguageresolver",{"_index":117,"title":{},"body":{"modules/AppModule.html":{}}}],["access",{"_index":180,"title":{},"body":{"controllers/AuthController.html":{}}}],["access_token",{"_index":307,"title":{},"body":{"injectables/AuthService.html":{}}}],["account",{"_index":1245,"title":{},"body":{"index.html":{}}}],["action",{"_index":1486,"title":{},"body":{"license.html":{}}}],["add",{"_index":464,"title":{},"body":{"injectables/HistoryDBService.html":{},"controllers/MovieController.html":{},"injectables/MovieDBService.html":{},"injectables/VoteDBService.html":{},"injectables/WatchListDBService.html":{},"index.html":{}}}],["add(data",{"_index":469,"title":{},"body":{"injectables/HistoryDBService.html":{},"injectables/MovieDBService.html":{},"injectables/VoteDBService.html":{},"injectables/WatchListDBService.html":{}}}],["adding",{"_index":1501,"title":{},"body":{"properties.html":{}}}],["address",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{}}}],["alert",{"_index":1636,"title":{},"body":{"miscellaneous/variables.html":{}}}],["aliases",{"_index":1506,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["alpha.6",{"_index":1500,"title":{},"body":{"properties.html":{}}}],["already",{"_index":584,"title":{},"body":{"controllers/MovieController.html":{},"index.html":{}}}],["always",{"_index":1329,"title":{},"body":{"index.html":{}}}],["and/or",{"_index":1454,"title":{},"body":{"license.html":{}}}],["announce.job",{"_index":1129,"title":{},"body":{"injectables/WatchListJob.html":{}}}],["announce_discord",{"_index":11,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["announce_email",{"_index":12,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["announcejob",{"_index":1,"title":{"injectables/AnnounceJob.html":{}},"body":{"injectables/AnnounceJob.html":{},"modules/EventModule.html":{},"injectables/WatchListJob.html":{},"coverage.html":{},"overview.html":{}}}],["announcement",{"_index":419,"title":{},"body":{"injectables/EmailService.html":{}}}],["annually|yearly|monthly|weekly|daily|hourly|reboot))|(@every",{"_index":1599,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api",{"_index":599,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{},"dependencies.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["apibearerauth",{"_index":589,"title":{},"body":{"controllers/MovieController.html":{},"controllers/UserController.html":{},"controllers/VoteController.html":{}}}],["apioperation",{"_index":212,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MovieController.html":{},"controllers/UserController.html":{},"controllers/VoteController.html":{}}}],["apioperation({summary",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MovieController.html":{},"controllers/UserController.html":{},"controllers/VoteController.html":{}}}],["apitags",{"_index":213,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MovieController.html":{},"controllers/UserController.html":{},"controllers/VoteController.html":{}}}],["apitags('auth",{"_index":217,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('movie",{"_index":600,"title":{},"body":{"controllers/MovieController.html":{}}}],["apitags('user",{"_index":852,"title":{},"body":{"controllers/UserController.html":{}}}],["apitags('vote",{"_index":1009,"title":{},"body":{"controllers/VoteController.html":{}}}],["app",{"_index":788,"title":{},"body":{"injectables/PrismaService.html":{}}}],["app.close",{"_index":792,"title":{},"body":{"injectables/PrismaService.html":{}}}],["application",{"_index":1240,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["application/json",{"_index":1645,"title":{},"body":{"miscellaneous/variables.html":{}}}],["appmodule",{"_index":90,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["args",{"_index":718,"title":{},"body":{"injectables/MovieService.html":{},"injectables/VoteService.html":{}}}],["arising",{"_index":1490,"title":{},"body":{"license.html":{}}}],["around",{"_index":1265,"title":{},"body":{"index.html":{}}}],["associated",{"_index":1443,"title":{},"body":{"license.html":{}}}],["assumes",{"_index":1341,"title":{},"body":{"index.html":{}}}],["async",{"_index":14,"title":{},"body":{"injectables/AnnounceJob.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"injectables/EmailService.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MovieController.html":{},"injectables/MovieDBService.html":{},"injectables/MovieService.html":{},"injectables/PasswordService.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"injectables/VoteDBService.html":{},"injectables/VoteService.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{},"miscellaneous/variables.html":{}}}],["atmosphäre",{"_index":67,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["auch",{"_index":61,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["auf",{"_index":68,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["auth",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{},"injectables/EmailService.html":{}}}],["auth.controller",{"_index":251,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":202,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MovieController.html":{},"controllers/UserController.html":{},"controllers/VoteController.html":{}}}],["auth.guard.ts",{"_index":501,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["auth.service",{"_index":204,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{}}}],["auth/jwt",{"_index":592,"title":{},"body":{"controllers/MovieController.html":{},"controllers/UserController.html":{},"controllers/VoteController.html":{}}}],["authcontroller",{"_index":147,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticate",{"_index":1538,"title":{},"body":{"miscellaneous/variables.html":{}}}],["authentication",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{}}}],["authguard",{"_index":502,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["authguard('jwt",{"_index":504,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('local",{"_index":526,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authmodule",{"_index":95,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1503,"title":{},"body":{"properties.html":{}}}],["authorization",{"_index":1646,"title":{},"body":{"miscellaneous/variables.html":{}}}],["authors",{"_index":1479,"title":{},"body":{"license.html":{}}}],["authservice",{"_index":203,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["automatic",{"_index":1264,"title":{},"body":{"index.html":{}}}],["await",{"_index":75,"title":{},"body":{"injectables/AnnounceJob.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/EmailService.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"injectables/LocalStrategy.html":{},"controllers/MovieController.html":{},"injectables/MovieDBService.html":{},"injectables/MovieService.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{},"injectables/VoteDBService.html":{},"injectables/VoteService.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{},"miscellaneous/variables.html":{}}}],["backend",{"_index":1315,"title":{},"body":{"index.html":{}}}],["bcrypt",{"_index":772,"title":{},"body":{"injectables/PasswordService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["bcrypt.compare(password",{"_index":780,"title":{},"body":{"injectables/PasswordService.html":{}}}],["bcrypt.hash(password",{"_index":777,"title":{},"body":{"injectables/PasswordService.html":{}}}],["bearer",{"_index":822,"title":{},"body":{"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["beginning",{"_index":1567,"title":{},"body":{"miscellaneous/variables.html":{}}}],["below",{"_index":1289,"title":{},"body":{"index.html":{}}}],["between",{"_index":1400,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["body",{"_index":175,"title":{},"body":{"controllers/AuthController.html":{},"injectables/EmailService.html":{},"injectables/LoggerMiddleware.html":{},"controllers/UserController.html":{},"miscellaneous/functions.html":{}}}],["body.password",{"_index":237,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["body.password_old",{"_index":876,"title":{},"body":{"controllers/UserController.html":{}}}],["body.username",{"_index":872,"title":{},"body":{"controllers/UserController.html":{}}}],["boolean",{"_index":365,"title":{},"body":{"classes/EmailOptInDto.html":{},"classes/ProfileDto.html":{},"classes/ResDto.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["boolean(body.email_opt_in",{"_index":863,"title":{},"body":{"controllers/UserController.html":{}}}],["bootstrap",{"_index":1180,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["browse",{"_index":1494,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1492,"title":{},"body":{"modules.html":{}}}],["build",{"_index":1290,"title":{},"body":{"index.html":{}}}],["build:all",{"_index":1293,"title":{},"body":{"index.html":{}}}],["build:client",{"_index":1377,"title":{},"body":{"index.html":{}}}],["build:db",{"_index":1426,"title":{},"body":{"index.html":{}}}],["build:docs",{"_index":1385,"title":{},"body":{"index.html":{}}}],["built",{"_index":1376,"title":{},"body":{"index.html":{}}}],["c",{"_index":1430,"title":{},"body":{"license.html":{}}}],["calculate",{"_index":1568,"title":{},"body":{"miscellaneous/variables.html":{}}}],["call",{"_index":1153,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["call(route",{"_index":1230,"title":{},"body":{"miscellaneous/functions.html":{}}}],["called",{"_index":1299,"title":{},"body":{"index.html":{}}}],["cast",{"_index":1550,"title":{},"body":{"miscellaneous/variables.html":{}}}],["catch",{"_index":321,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MovieService.html":{},"injectables/VoteService.html":{}}}],["catch((e",{"_index":733,"title":{},"body":{"injectables/MovieService.html":{}}}],["challenge",{"_index":171,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/EmailService.html":{},"injectables/UserService.html":{}}}],["challenge'})@get('confirm/:challenge",{"_index":169,"title":{},"body":{"controllers/AuthController.html":{}}}],["challenge_url",{"_index":296,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EmailService.html":{}}}],["challenge_url}\\n\\ndear\\n${this.project_name",{"_index":416,"title":{},"body":{"injectables/EmailService.html":{}}}],["change",{"_index":1380,"title":{},"body":{"index.html":{}}}],["change_password",{"_index":808,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["change_password(@user",{"_index":874,"title":{},"body":{"controllers/UserController.html":{}}}],["change_password(user",{"_index":814,"title":{},"body":{"controllers/UserController.html":{}}}],["change_password(user_id",{"_index":929,"title":{},"body":{"injectables/UserService.html":{}}}],["change_profile",{"_index":925,"title":{},"body":{"injectables/UserService.html":{}}}],["change_profile(user_id",{"_index":932,"title":{},"body":{"injectables/UserService.html":{}}}],["change_username",{"_index":809,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["change_username(@user",{"_index":870,"title":{},"body":{"controllers/UserController.html":{}}}],["change_username(user",{"_index":818,"title":{},"body":{"controllers/UserController.html":{}}}],["change_username(user_id",{"_index":934,"title":{},"body":{"injectables/UserService.html":{}}}],["changeable",{"_index":1312,"title":{},"body":{"index.html":{}}}],["charge",{"_index":1438,"title":{},"body":{"license.html":{}}}],["check",{"_index":821,"title":{},"body":{"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["check.text",{"_index":1648,"title":{},"body":{"miscellaneous/variables.html":{}}}],["check_profile",{"_index":810,"title":{},"body":{"controllers/UserController.html":{}}}],["claim",{"_index":1482,"title":{},"body":{"license.html":{}}}],["class",{"_index":46,"title":{"classes/EmailOptInDto.html":{},"classes/LoginDto.html":{},"classes/PasswordDto.html":{},"classes/PasswordNewDto.html":{},"classes/ProfileDto.html":{},"classes/RegisterDto.html":{},"classes/ResDto.html":{}},"body":{"injectables/AnnounceJob.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"classes/EmailOptInDto.html":{},"injectables/EmailService.html":{},"modules/EventModule.html":{},"injectables/GravatarService.html":{},"modules/HistoryDBModule.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoginDto.html":{},"controllers/MovieController.html":{},"modules/MovieDBModule.html":{},"injectables/MovieDBService.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"classes/PasswordDto.html":{},"classes/PasswordNewDto.html":{},"injectables/PasswordService.html":{},"injectables/PrismaService.html":{},"classes/ProfileDto.html":{},"classes/RegisterDto.html":{},"classes/ResDto.html":{},"controllers/UserController.html":{},"modules/UserDBModule.html":{},"injectables/UserDBService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"modules/VoteDBModule.html":{},"injectables/VoteDBService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"modules/WatchListDBModule.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{},"coverage.html":{}}}],["classes",{"_index":362,"title":{},"body":{"classes/EmailOptInDto.html":{},"classes/LoginDto.html":{},"classes/PasswordDto.html":{},"classes/PasswordNewDto.html":{},"classes/ProfileDto.html":{},"classes/RegisterDto.html":{},"classes/ResDto.html":{},"index.html":{},"overview.html":{}}}],["clean",{"_index":1250,"title":{},"body":{"index.html":{}}}],["clears",{"_index":1573,"title":{},"body":{"miscellaneous/variables.html":{}}}],["clicking",{"_index":410,"title":{},"body":{"injectables/EmailService.html":{}}}],["client",{"_index":684,"title":{},"body":{"injectables/MovieService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["client({apikey",{"_index":695,"title":{},"body":{"injectables/MovieService.html":{}}}],["client/.../api.ts",{"_index":1229,"title":{},"body":{"miscellaneous/functions.html":{}}}],["client/.../cookie.ts",{"_index":1514,"title":{},"body":{"miscellaneous/variables.html":{}}}],["client/.../router.ts",{"_index":1519,"title":{},"body":{"miscellaneous/variables.html":{}}}],["client/.../store.ts",{"_index":1520,"title":{},"body":{"miscellaneous/variables.html":{}}}],["client/dist",{"_index":144,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["client/src/components",{"_index":1412,"title":{},"body":{"index.html":{}}}],["client/src/router",{"_index":1398,"title":{},"body":{"index.html":{}}}],["client/src/router/router.ts",{"_index":1148,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["client/src/util/api.ts",{"_index":1152,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["client/src/util/cookie.ts",{"_index":1154,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["client/src/util/store.ts",{"_index":1159,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["client/src/views",{"_index":1409,"title":{},"body":{"index.html":{}}}],["clients",{"_index":1311,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":93,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":94,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":238,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":240,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":239,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_eventmodule",{"_index":423,"title":{},"body":{"modules/EventModule.html":{},"overview.html":{}}}],["cluster_eventmodule_imports",{"_index":425,"title":{},"body":{"modules/EventModule.html":{},"overview.html":{}}}],["cluster_eventmodule_providers",{"_index":424,"title":{},"body":{"modules/EventModule.html":{},"overview.html":{}}}],["cluster_historydbmodule",{"_index":454,"title":{},"body":{"modules/HistoryDBModule.html":{},"overview.html":{}}}],["cluster_historydbmodule_exports",{"_index":456,"title":{},"body":{"modules/HistoryDBModule.html":{},"overview.html":{}}}],["cluster_historydbmodule_providers",{"_index":455,"title":{},"body":{"modules/HistoryDBModule.html":{},"overview.html":{}}}],["cluster_moviedbmodule",{"_index":620,"title":{},"body":{"modules/MovieDBModule.html":{},"overview.html":{}}}],["cluster_moviedbmodule_exports",{"_index":622,"title":{},"body":{"modules/MovieDBModule.html":{},"overview.html":{}}}],["cluster_moviedbmodule_providers",{"_index":621,"title":{},"body":{"modules/MovieDBModule.html":{},"overview.html":{}}}],["cluster_moviemodule",{"_index":660,"title":{},"body":{"modules/MovieModule.html":{},"overview.html":{}}}],["cluster_moviemodule_imports",{"_index":661,"title":{},"body":{"modules/MovieModule.html":{}}}],["cluster_moviemodule_providers",{"_index":662,"title":{},"body":{"modules/MovieModule.html":{},"overview.html":{}}}],["cluster_userdbmodule",{"_index":882,"title":{},"body":{"modules/UserDBModule.html":{},"overview.html":{}}}],["cluster_userdbmodule_exports",{"_index":884,"title":{},"body":{"modules/UserDBModule.html":{},"overview.html":{}}}],["cluster_userdbmodule_providers",{"_index":883,"title":{},"body":{"modules/UserDBModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":918,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_imports",{"_index":919,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":920,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_votedbmodule",{"_index":1019,"title":{},"body":{"modules/VoteDBModule.html":{},"overview.html":{}}}],["cluster_votedbmodule_exports",{"_index":1020,"title":{},"body":{"modules/VoteDBModule.html":{},"overview.html":{}}}],["cluster_votedbmodule_providers",{"_index":1021,"title":{},"body":{"modules/VoteDBModule.html":{},"overview.html":{}}}],["cluster_votemodule",{"_index":1070,"title":{},"body":{"modules/VoteModule.html":{}}}],["cluster_votemodule_imports",{"_index":1072,"title":{},"body":{"modules/VoteModule.html":{}}}],["cluster_votemodule_providers",{"_index":1071,"title":{},"body":{"modules/VoteModule.html":{}}}],["cluster_watchlistdbmodule",{"_index":1103,"title":{},"body":{"modules/WatchListDBModule.html":{},"overview.html":{}}}],["cluster_watchlistdbmodule_exports",{"_index":1104,"title":{},"body":{"modules/WatchListDBModule.html":{},"overview.html":{}}}],["cluster_watchlistdbmodule_providers",{"_index":1105,"title":{},"body":{"modules/WatchListDBModule.html":{},"overview.html":{}}}],["code",{"_index":1277,"title":{},"body":{"index.html":{}}}],["command",{"_index":1390,"title":{},"body":{"index.html":{}}}],["common",{"_index":1362,"title":{},"body":{"index.html":{}}}],["common/db_services/histroy/historydb.module",{"_index":670,"title":{},"body":{"modules/MovieModule.html":{}}}],["common/db_services/histroy/historydb.service",{"_index":689,"title":{},"body":{"injectables/MovieService.html":{}}}],["common/db_services/movies/moviedb.module",{"_index":667,"title":{},"body":{"modules/MovieModule.html":{},"modules/UserModule.html":{},"modules/VoteModule.html":{}}}],["common/db_services/movies/moviedb.service",{"_index":687,"title":{},"body":{"injectables/MovieService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["common/db_services/prisma.service",{"_index":666,"title":{},"body":{"modules/MovieModule.html":{},"modules/VoteModule.html":{}}}],["common/db_services/users/userdb.module",{"_index":247,"title":{},"body":{"modules/AuthModule.html":{},"modules/MovieModule.html":{},"modules/UserModule.html":{},"modules/VoteModule.html":{}}}],["common/db_services/users/userdb.service",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MovieService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["common/db_services/votes/votedb.module",{"_index":668,"title":{},"body":{"modules/MovieModule.html":{},"modules/UserModule.html":{},"modules/VoteModule.html":{}}}],["common/db_services/votes/votedb.service",{"_index":688,"title":{},"body":{"injectables/MovieService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["common/db_services/watchlist/watchlistdb.module",{"_index":671,"title":{},"body":{"modules/MovieModule.html":{},"modules/UserModule.html":{}}}],["common/db_services/watchlist/watchlistdb.service",{"_index":690,"title":{},"body":{"injectables/MovieService.html":{},"injectables/UserService.html":{}}}],["common/decorators/user.decorator",{"_index":206,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MovieController.html":{},"controllers/UserController.html":{},"controllers/VoteController.html":{}}}],["common/event_service/event.module",{"_index":112,"title":{},"body":{"modules/AppModule.html":{}}}],["common/util_services/email.service",{"_index":255,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["common/util_services/gravatar.service",{"_index":923,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["common/util_services/password.service",{"_index":256,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["common/validation/config.validation",{"_index":122,"title":{},"body":{"modules/AppModule.html":{}}}],["common/validation/patterns/imdb_id.pattern",{"_index":692,"title":{},"body":{"injectables/MovieService.html":{}}}],["common/validation/patterns/name.pattern",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["common/validation/patterns/password.pattern",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["common/validation/patterns/username.pattern",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["compare",{"_index":764,"title":{},"body":{"injectables/PasswordService.html":{}}}],["compare(password",{"_index":766,"title":{},"body":{"injectables/PasswordService.html":{}}}],["compodoc",{"_index":1354,"title":{},"body":{"index.html":{}}}],["component",{"_index":1619,"title":{},"body":{"miscellaneous/variables.html":{}}}],["components",{"_index":1406,"title":{},"body":{"index.html":{}}}],["conditions",{"_index":1460,"title":{},"body":{"license.html":{}}}],["config",{"_index":1287,"title":{},"body":{"index.html":{}}}],["config.validation.ts",{"_index":1305,"title":{},"body":{"index.html":{}}}],["config_validation_schema",{"_index":121,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["configmodule",{"_index":115,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":125,"title":{},"body":{"modules/AppModule.html":{}}}],["configuration",{"_index":1282,"title":{},"body":{"index.html":{}}}],["confirm",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/EmailService.html":{}}}],["confirm(@param('challenge",{"_index":229,"title":{},"body":{"controllers/AuthController.html":{}}}],["confirm(challenge",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["confirmation",{"_index":1529,"title":{},"body":{"miscellaneous/variables.html":{}}}],["conflictexception",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MovieService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["conflictexception(i18n.t(\"user.exception.conflict_username",{"_index":973,"title":{},"body":{"injectables/UserService.html":{}}}],["conflictexception(i18n.t('auth.exception.conflict_username_exists",{"_index":324,"title":{},"body":{"injectables/AuthService.html":{}}}],["conflictexception(i18n.t('movie.exception.conflict_history",{"_index":712,"title":{},"body":{"injectables/MovieService.html":{}}}],["conflictexception(i18n.t('movie.exception.conflict_max_proposed",{"_index":717,"title":{},"body":{"injectables/MovieService.html":{}}}],["conflictexception(i18n.t('movie.exception.conflict_movie",{"_index":714,"title":{},"body":{"injectables/MovieService.html":{}}}],["conflictexception(i18n.t('movie.exception.conflict_watchlist",{"_index":738,"title":{},"body":{"injectables/MovieService.html":{}}}],["conflictexception(i18n.t('vote.exception.conflict_exists",{"_index":1098,"title":{},"body":{"injectables/VoteService.html":{}}}],["conflictexception(i18n.t('vote.exception.conflict_max_voted",{"_index":1093,"title":{},"body":{"injectables/VoteService.html":{}}}],["conflictexception(i18n.t('vote.exception.conflict_not_exists",{"_index":1102,"title":{},"body":{"injectables/VoteService.html":{}}}],["conflictexception(i18n.t('vote.exception.conflict_unvote_proposed",{"_index":1099,"title":{},"body":{"injectables/VoteService.html":{}}}],["connect",{"_index":725,"title":{},"body":{"injectables/MovieService.html":{},"injectables/VoteService.html":{},"injectables/WatchListJob.html":{}}}],["connection",{"_index":1417,"title":{},"body":{"index.html":{},"license.html":{}}}],["console.log",{"_index":548,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["console.log(\"announce",{"_index":71,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["console.log('history",{"_index":489,"title":{},"body":{"injectables/HistoryJob.html":{}}}],["console.log('request",{"_index":549,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["console.log('watchlist",{"_index":1131,"title":{},"body":{"injectables/WatchListJob.html":{}}}],["console.log(req.body",{"_index":550,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["const",{"_index":74,"title":{},"body":{"injectables/AnnounceJob.html":{},"injectables/AuthService.html":{},"injectables/EmailService.html":{},"injectables/GravatarService.html":{},"injectables/HistoryJob.html":{},"injectables/LocalStrategy.html":{},"injectables/MovieService.html":{},"injectables/PasswordService.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"injectables/WatchListJob.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":17,"title":{},"body":{"injectables/AnnounceJob.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"injectables/EmailService.html":{},"injectables/GravatarService.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MovieDBService.html":{},"injectables/MovieService.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{},"injectables/VoteDBService.html":{},"injectables/VoteService.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{}}}],["constructor(authservice",{"_index":528,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(discordservice",{"_index":18,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["constructor(moviedbservice",{"_index":481,"title":{},"body":{"injectables/HistoryJob.html":{},"injectables/MovieService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["constructor(passwordservice",{"_index":444,"title":{},"body":{"injectables/GravatarService.html":{}}}],["constructor(prisma",{"_index":466,"title":{},"body":{"injectables/HistoryDBService.html":{},"injectables/MovieDBService.html":{},"injectables/UserDBService.html":{},"injectables/VoteDBService.html":{},"injectables/WatchListDBService.html":{}}}],["constructor(private",{"_index":47,"title":{},"body":{"injectables/AnnounceJob.html":{},"controllers/AuthController.html":{},"injectables/EmailService.html":{},"injectables/GravatarService.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"injectables/LocalStrategy.html":{},"controllers/MovieController.html":{},"injectables/MovieDBService.html":{},"injectables/MovieService.html":{},"controllers/UserController.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"injectables/VoteDBService.html":{},"injectables/VoteService.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{}}}],["constructor(userdbservice",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EmailService.html":{}}}],["constructor(votedbservice",{"_index":1120,"title":{},"body":{"injectables/WatchListJob.html":{}}}],["content",{"_index":1644,"title":{},"body":{"miscellaneous/variables.html":{}}}],["contract",{"_index":1487,"title":{},"body":{"license.html":{}}}],["controller",{"_index":146,"title":{"controllers/AuthController.html":{},"controllers/MovieController.html":{},"controllers/UserController.html":{},"controllers/VoteController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/MovieController.html":{},"controllers/UserController.html":{},"controllers/VoteController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":218,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('movie",{"_index":601,"title":{},"body":{"controllers/MovieController.html":{}}}],["controller('user",{"_index":853,"title":{},"body":{"controllers/UserController.html":{}}}],["controller('vote",{"_index":1010,"title":{},"body":{"controllers/VoteController.html":{}}}],["controllers",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/MovieController.html":{},"modules/MovieModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"controllers/VoteController.html":{},"modules/VoteModule.html":{},"index.html":{},"overview.html":{}}}],["cookies.get",{"_index":1606,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cookies.get(key",{"_index":1605,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cookies.remove(key",{"_index":1607,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cookies.set(key",{"_index":1608,"title":{},"body":{"miscellaneous/variables.html":{}}}],["copies",{"_index":1456,"title":{},"body":{"license.html":{}}}],["copy",{"_index":1441,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":1429,"title":{},"body":{"license.html":{}}}],["corresponding",{"_index":1352,"title":{},"body":{"index.html":{}}}],["cors",{"_index":1528,"title":{},"body":{"miscellaneous/variables.html":{}}}],["count",{"_index":1046,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["coverage",{"_index":1144,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":889,"title":{},"body":{"injectables/UserDBService.html":{},"index.html":{}}}],["create(data",{"_index":893,"title":{},"body":{"injectables/UserDBService.html":{}}}],["created",{"_index":1424,"title":{},"body":{"index.html":{}}}],["createdat",{"_index":655,"title":{},"body":{"interfaces/MovieExtType.html":{},"injectables/MovieService.html":{}}}],["createparamdecorator",{"_index":1656,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createrouter",{"_index":1616,"title":{},"body":{"miscellaneous/variables.html":{}}}],["creates",{"_index":1559,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createwebhistory(import.meta.env.base_url",{"_index":1617,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cron",{"_index":484,"title":{},"body":{"injectables/HistoryJob.html":{},"injectables/WatchListJob.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["cron(process.env.schedule_history",{"_index":488,"title":{},"body":{"injectables/HistoryJob.html":{}}}],["cron(process.env.schedule_watchlist",{"_index":1130,"title":{},"body":{"injectables/WatchListJob.html":{}}}],["cron_pattern",{"_index":1172,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["crypto",{"_index":775,"title":{},"body":{"injectables/PasswordService.html":{},"dependencies.html":{}}}],["ctx",{"_index":1657,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":1659,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cuid",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["current",{"_index":1408,"title":{},"body":{"index.html":{}}}],["currently",{"_index":1261,"title":{},"body":{"index.html":{}}}],["cyclic",{"_index":1242,"title":{},"body":{"index.html":{}}}],["d)(?=.*[a",{"_index":1612,"title":{},"body":{"miscellaneous/variables.html":{}}}],["d+(ns|us|µs|ms|s|m|h))+)|((((\\d+,)+\\d+|(\\d",{"_index":1600,"title":{},"body":{"miscellaneous/variables.html":{}}}],["d+)|\\d",{"_index":1601,"title":{},"body":{"miscellaneous/variables.html":{}}}],["damages",{"_index":1483,"title":{},"body":{"license.html":{}}}],["data",{"_index":327,"title":{},"body":{"injectables/AuthService.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"controllers/MovieController.html":{},"injectables/MovieDBService.html":{},"controllers/UserController.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{},"injectables/VoteDBService.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["data'})@apibearerauth()@useguards(jwtauthguard)@get",{"_index":833,"title":{},"body":{"controllers/UserController.html":{}}}],["data'})@apibearerauth()@useguards(jwtauthguard)@get('data",{"_index":837,"title":{},"body":{"controllers/UserController.html":{}}}],["data'})@get('all",{"_index":570,"title":{},"body":{"controllers/MovieController.html":{}}}],["data'})@get('history",{"_index":573,"title":{},"body":{"controllers/MovieController.html":{}}}],["data'})@get('watchlist",{"_index":580,"title":{},"body":{"controllers/MovieController.html":{}}}],["data.hasownproperty(\"use_gravatar",{"_index":956,"title":{},"body":{"injectables/UserService.html":{}}}],["data.name",{"_index":955,"title":{},"body":{"injectables/UserService.html":{}}}],["data.password",{"_index":912,"title":{},"body":{"injectables/UserDBService.html":{}}}],["data.use_gravatar",{"_index":957,"title":{},"body":{"injectables/UserService.html":{}}}],["data_to_update",{"_index":954,"title":{},"body":{"injectables/UserService.html":{}}}],["data_to_update[\"gravatar_url",{"_index":959,"title":{},"body":{"injectables/UserService.html":{}}}],["data_to_update[\"use_gravatar",{"_index":958,"title":{},"body":{"injectables/UserService.html":{}}}],["database",{"_index":565,"title":{},"body":{"controllers/MovieController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["database_url",{"_index":1532,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date",{"_index":659,"title":{},"body":{"interfaces/MovieExtType.html":{},"interfaces/WatchlistExtType.html":{}}}],["date(start_time.gettime",{"_index":1140,"title":{},"body":{"injectables/WatchListJob.html":{}}}],["db",{"_index":1383,"title":{},"body":{"index.html":{}}}],["db_services/histroy/historydb.module",{"_index":438,"title":{},"body":{"modules/EventModule.html":{}}}],["db_services/histroy/historydb.service",{"_index":486,"title":{},"body":{"injectables/HistoryJob.html":{}}}],["db_services/movies/moviedb.module",{"_index":435,"title":{},"body":{"modules/EventModule.html":{}}}],["db_services/movies/moviedb.service",{"_index":41,"title":{},"body":{"injectables/AnnounceJob.html":{},"injectables/HistoryJob.html":{},"injectables/WatchListJob.html":{}}}],["db_services/users/userdb.module",{"_index":440,"title":{},"body":{"modules/EventModule.html":{}}}],["db_services/users/userdb.service",{"_index":393,"title":{},"body":{"injectables/EmailService.html":{}}}],["db_services/votes/votedb.module",{"_index":437,"title":{},"body":{"modules/EventModule.html":{}}}],["db_services/votes/votedb.service",{"_index":487,"title":{},"body":{"injectables/HistoryJob.html":{},"injectables/WatchListJob.html":{}}}],["db_services/watchlist/watchlistdb.module",{"_index":436,"title":{},"body":{"modules/EventModule.html":{}}}],["db_services/watchlist/watchlistdb.service",{"_index":40,"title":{},"body":{"injectables/AnnounceJob.html":{},"injectables/HistoryJob.html":{},"injectables/WatchListJob.html":{}}}],["de",{"_index":1309,"title":{},"body":{"index.html":{}}}],["deal",{"_index":1444,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":1491,"title":{},"body":{"license.html":{}}}],["dear\\n${this.project_name",{"_index":413,"title":{},"body":{"injectables/EmailService.html":{}}}],["decorators",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{},"injectables/HistoryJob.html":{},"controllers/MovieController.html":{},"controllers/UserController.html":{},"controllers/VoteController.html":{},"injectables/WatchListJob.html":{}}}],["default",{"_index":349,"title":{},"body":{"injectables/DiscordService.html":{},"injectables/EmailService.html":{},"injectables/MovieService.html":{},"injectables/VoteService.html":{},"injectables/WatchListJob.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":23,"title":{},"body":{"injectables/AnnounceJob.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"classes/EmailOptInDto.html":{},"injectables/EmailService.html":{},"injectables/GravatarService.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoginDto.html":{},"controllers/MovieController.html":{},"injectables/MovieDBService.html":{},"injectables/MovieService.html":{},"classes/PasswordDto.html":{},"classes/PasswordNewDto.html":{},"injectables/PasswordService.html":{},"injectables/PrismaService.html":{},"classes/ProfileDto.html":{},"classes/RegisterDto.html":{},"classes/ResDto.html":{},"controllers/UserController.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"injectables/VoteDBService.html":{},"injectables/VoteService.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{},"index.html":{}}}],["definitions",{"_index":1365,"title":{},"body":{"index.html":{}}}],["del",{"_index":563,"title":{},"body":{"controllers/MovieController.html":{}}}],["delete",{"_index":588,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieDBService.html":{},"injectables/MovieService.html":{},"controllers/UserController.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"injectables/VoteDBService.html":{},"injectables/WatchListDBService.html":{}}}],["delete(':imdb_id",{"_index":617,"title":{},"body":{"controllers/MovieController.html":{},"controllers/VoteController.html":{}}}],["delete(@user",{"_index":864,"title":{},"body":{"controllers/UserController.html":{}}}],["delete(data",{"_index":1035,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["delete(imdb_id",{"_index":632,"title":{},"body":{"injectables/MovieDBService.html":{},"injectables/MovieService.html":{},"injectables/WatchListDBService.html":{}}}],["delete(user",{"_index":825,"title":{},"body":{"controllers/UserController.html":{}}}],["delete(user_id",{"_index":937,"title":{},"body":{"injectables/UserService.html":{}}}],["delete(where",{"_index":895,"title":{},"body":{"injectables/UserDBService.html":{}}}],["delete_all",{"_index":1025,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["delete_all(imdb_id",{"_index":1038,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["delete_all_proposed",{"_index":626,"title":{},"body":{"injectables/MovieDBService.html":{}}}],["delete_all_proposed(user_id",{"_index":634,"title":{},"body":{"injectables/MovieDBService.html":{}}}],["delete_all_user",{"_index":1026,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["delete_all_user(user_id",{"_index":1040,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["delete_media",{"_index":556,"title":{},"body":{"controllers/MovieController.html":{}}}],["delete_media(@user",{"_index":618,"title":{},"body":{"controllers/MovieController.html":{}}}],["delete_media(user",{"_index":562,"title":{},"body":{"controllers/MovieController.html":{}}}],["dependencies",{"_index":92,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventModule.html":{},"modules/HistoryDBModule.html":{},"modules/MovieDBModule.html":{},"modules/MovieModule.html":{},"modules/UserDBModule.html":{},"modules/UserModule.html":{},"modules/VoteDBModule.html":{},"modules/VoteModule.html":{},"modules/WatchListDBModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["depending",{"_index":1407,"title":{},"body":{"index.html":{}}}],["desc",{"_index":1065,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["description",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MovieController.html":{},"controllers/UserController.html":{},"controllers/VoteController.html":{},"properties.html":{}}}],["description('the",{"_index":1525,"title":{},"body":{"miscellaneous/variables.html":{}}}],["description('whether",{"_index":1594,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dest_mail",{"_index":385,"title":{},"body":{"injectables/EmailService.html":{}}}],["dev",{"_index":1338,"title":{},"body":{"index.html":{}}}],["development",{"_index":1371,"title":{},"body":{"index.html":{}}}],["die",{"_index":50,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["diese",{"_index":54,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["different",{"_index":1324,"title":{},"body":{"index.html":{}}}],["directory",{"_index":1298,"title":{},"body":{"index.html":{}}}],["disabled",{"_index":1413,"title":{},"body":{"index.html":{}}}],["discord",{"_index":1563,"title":{},"body":{"miscellaneous/variables.html":{}}}],["discord.js",{"_index":353,"title":{},"body":{"injectables/DiscordService.html":{},"dependencies.html":{}}}],["discord_enable",{"_index":1592,"title":{},"body":{"miscellaneous/variables.html":{}}}],["discord_webhook_pattern",{"_index":1174,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["discord_webhook_url",{"_index":1595,"title":{},"body":{"miscellaneous/variables.html":{}}}],["discordservice",{"_index":19,"title":{"injectables/DiscordService.html":{}},"body":{"injectables/AnnounceJob.html":{},"injectables/DiscordService.html":{},"modules/EventModule.html":{},"coverage.html":{},"overview.html":{}}}],["dist",{"_index":1389,"title":{},"body":{"index.html":{}}}],["distribute",{"_index":1452,"title":{},"body":{"license.html":{}}}],["dived",{"_index":1356,"title":{},"body":{"index.html":{}}}],["docs",{"_index":143,"title":{},"body":{"modules/AppModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["docs/api",{"_index":1335,"title":{},"body":{"index.html":{}}}],["docs/backend",{"_index":141,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["docsview",{"_index":1632,"title":{},"body":{"miscellaneous/variables.html":{}}}],["documentation",{"_index":1145,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["documented",{"_index":1333,"title":{},"body":{"index.html":{}}}],["download",{"_index":1275,"title":{},"body":{"index.html":{}}}],["dto's",{"_index":1370,"title":{},"body":{"index.html":{}}}],["durch",{"_index":53,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["e",{"_index":698,"title":{},"body":{"injectables/MovieService.html":{},"injectables/VoteService.html":{}}}],["e.g",{"_index":1331,"title":{},"body":{"index.html":{}}}],["element",{"_index":1314,"title":{},"body":{"index.html":{}}}],["elias",{"_index":1432,"title":{},"body":{"license.html":{}}}],["eliasschaut",{"_index":1504,"title":{},"body":{"properties.html":{}}}],["email",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{},"injectables/EmailService.html":{},"controllers/UserController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["email)'})@apibearerauth()@useguards(jwtauthguard)@post('username",{"_index":819,"title":{},"body":{"controllers/UserController.html":{}}}],["email)'})@get('reset/:username",{"_index":193,"title":{},"body":{"controllers/AuthController.html":{}}}],["email_host",{"_index":1582,"title":{},"body":{"miscellaneous/variables.html":{}}}],["email_host_password",{"_index":1591,"title":{},"body":{"miscellaneous/variables.html":{}}}],["email_host_user",{"_index":1589,"title":{},"body":{"miscellaneous/variables.html":{}}}],["email_opt_in",{"_index":364,"title":{},"body":{"classes/EmailOptInDto.html":{},"controllers/UserController.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{}}}],["email_opt_in(@user",{"_index":861,"title":{},"body":{"controllers/UserController.html":{}}}],["email_opt_in(user",{"_index":828,"title":{},"body":{"controllers/UserController.html":{}}}],["email_opt_in(user_id",{"_index":939,"title":{},"body":{"injectables/UserService.html":{}}}],["email_port",{"_index":1587,"title":{},"body":{"miscellaneous/variables.html":{}}}],["emailoptindto",{"_index":361,"title":{"classes/EmailOptInDto.html":{}},"body":{"classes/EmailOptInDto.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["emails",{"_index":1586,"title":{},"body":{"miscellaneous/variables.html":{}}}],["emailservice",{"_index":22,"title":{"injectables/EmailService.html":{}},"body":{"injectables/AnnounceJob.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/EmailService.html":{},"modules/EventModule.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["en",{"_index":131,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["enabled",{"_index":343,"title":{},"body":{"injectables/DiscordService.html":{}}}],["enableshutdownhooks",{"_index":783,"title":{},"body":{"injectables/PrismaService.html":{}}}],["enableshutdownhooks(app",{"_index":785,"title":{},"body":{"injectables/PrismaService.html":{}}}],["english",{"_index":1262,"title":{},"body":{"index.html":{}}}],["env",{"_index":1279,"title":{},"body":{"index.html":{}}}],["env.tmp",{"_index":1280,"title":{},"body":{"index.html":{}}}],["error",{"_index":322,"title":{},"body":{"injectables/AuthService.html":{}}}],["es",{"_index":63,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["event",{"_index":1478,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["eventmodule",{"_index":96,"title":{"modules/EventModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EventModule.html":{},"modules.html":{},"overview.html":{}}}],["events",{"_index":1243,"title":{},"body":{"index.html":{}}}],["everything",{"_index":1391,"title":{},"body":{"index.html":{}}}],["executioncontext",{"_index":1658,"title":{},"body":{"miscellaneous/variables.html":{}}}],["expiration",{"_index":1541,"title":{},"body":{"miscellaneous/variables.html":{}}}],["expires",{"_index":1609,"title":{},"body":{"miscellaneous/variables.html":{}}}],["expiresin",{"_index":261,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":45,"title":{},"body":{"injectables/AnnounceJob.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"classes/EmailOptInDto.html":{},"injectables/EmailService.html":{},"modules/EventModule.html":{},"injectables/GravatarService.html":{},"modules/HistoryDBModule.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/JwtUser.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoginDto.html":{},"controllers/MovieController.html":{},"modules/MovieDBModule.html":{},"injectables/MovieDBService.html":{},"interfaces/MovieExtType.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"classes/PasswordDto.html":{},"classes/PasswordNewDto.html":{},"injectables/PasswordService.html":{},"injectables/PrismaService.html":{},"classes/ProfileDto.html":{},"classes/RegisterDto.html":{},"classes/ResDto.html":{},"controllers/UserController.html":{},"modules/UserDBModule.html":{},"injectables/UserDBService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"modules/VoteDBModule.html":{},"injectables/VoteDBService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"modules/WatchListDBModule.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{},"interfaces/WatchlistExtType.html":{}}}],["exports",{"_index":460,"title":{},"body":{"modules/HistoryDBModule.html":{},"modules/MovieDBModule.html":{},"modules/UserDBModule.html":{},"modules/VoteDBModule.html":{},"modules/WatchListDBModule.html":{}}}],["express",{"_index":1197,"title":{},"body":{"dependencies.html":{},"license.html":{}}}],["extends",{"_index":503,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{}}}],["extractjwt",{"_index":510,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":517,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["fallbacklanguage",{"_index":130,"title":{},"body":{"modules/AppModule.html":{}}}],["false",{"_index":339,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EmailService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["features",{"_index":1244,"title":{},"body":{"index.html":{}}}],["fetch(\"/api/user/check",{"_index":1642,"title":{},"body":{"miscellaneous/variables.html":{}}}],["file",{"_index":5,"title":{},"body":{"injectables/AnnounceJob.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"classes/EmailOptInDto.html":{},"injectables/EmailService.html":{},"modules/EventModule.html":{},"injectables/GravatarService.html":{},"modules/HistoryDBModule.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/JwtUser.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoginDto.html":{},"controllers/MovieController.html":{},"modules/MovieDBModule.html":{},"injectables/MovieDBService.html":{},"interfaces/MovieExtType.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"classes/PasswordDto.html":{},"classes/PasswordNewDto.html":{},"injectables/PasswordService.html":{},"injectables/PrismaService.html":{},"classes/ProfileDto.html":{},"classes/RegisterDto.html":{},"classes/ResDto.html":{},"controllers/UserController.html":{},"modules/UserDBModule.html":{},"injectables/UserDBService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"modules/VoteDBModule.html":{},"injectables/VoteDBService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"modules/WatchListDBModule.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{},"interfaces/WatchlistExtType.html":{},"coverage.html":{},"index.html":{}}}],["files",{"_index":1320,"title":{},"body":{"index.html":{},"license.html":{}}}],["filme",{"_index":55,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["fitness",{"_index":1474,"title":{},"body":{"license.html":{}}}],["folder",{"_index":1322,"title":{},"body":{"index.html":{}}}],["following",{"_index":411,"title":{},"body":{"injectables/EmailService.html":{},"license.html":{}}}],["for'})@apibearerauth()@useguards(jwtauthguard)@get",{"_index":1001,"title":{},"body":{"controllers/VoteController.html":{}}}],["forbiddenexception",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MovieService.html":{},"injectables/UserService.html":{}}}],["forbiddenexception(i18n.t(\"user.exception.conflict_delete",{"_index":984,"title":{},"body":{"injectables/UserService.html":{}}}],["forbiddenexception(i18n.t(\"user.exception.forbidden_password",{"_index":969,"title":{},"body":{"injectables/UserService.html":{}}}],["forbiddenexception(i18n.t(\"user.exception.invalid_name",{"_index":953,"title":{},"body":{"injectables/UserService.html":{}}}],["forbiddenexception(i18n.t(\"user.exception.invalid_password",{"_index":965,"title":{},"body":{"injectables/UserService.html":{}}}],["forbiddenexception(i18n.t(\"user.exception.invalid_username",{"_index":971,"title":{},"body":{"injectables/UserService.html":{}}}],["forbiddenexception(i18n.t('auth.exception.forbidden_invalid_registration",{"_index":312,"title":{},"body":{"injectables/AuthService.html":{}}}],["forbiddenexception(i18n.t('auth.exception.forbidden_login",{"_index":303,"title":{},"body":{"injectables/AuthService.html":{}}}],["forbiddenexception(i18n.t('auth.exception.forbidden_not_verified",{"_index":301,"title":{},"body":{"injectables/AuthService.html":{}}}],["forbiddenexception(i18n.t('auth.exception.invalid_password",{"_index":335,"title":{},"body":{"injectables/AuthService.html":{}}}],["forbiddenexception(i18n.t('movie.exception.invalid_imdb_id",{"_index":710,"title":{},"body":{"injectables/MovieService.html":{}}}],["format",{"_index":1423,"title":{},"body":{"index.html":{}}}],["formatted",{"_index":1421,"title":{},"body":{"index.html":{}}}],["found",{"_index":1396,"title":{},"body":{"index.html":{}}}],["framework",{"_index":1350,"title":{},"body":{"index.html":{}}}],["frameworks",{"_index":1344,"title":{},"body":{"index.html":{}}}],["free",{"_index":1437,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["frontend",{"_index":1394,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["frontend_url",{"_index":1526,"title":{},"body":{"miscellaneous/variables.html":{}}}],["full",{"_index":1237,"title":{},"body":{"index.html":{}}}],["function",{"_index":545,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"coverage.html":{}}}],["functions",{"_index":1227,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["furnished",{"_index":1459,"title":{},"body":{"license.html":{}}}],["generate",{"_index":1384,"title":{},"body":{"index.html":{}}}],["generate_challenge_url",{"_index":370,"title":{},"body":{"injectables/EmailService.html":{}}}],["generate_challenge_url(challenge",{"_index":376,"title":{},"body":{"injectables/EmailService.html":{}}}],["generate_gravatar_url",{"_index":443,"title":{},"body":{"injectables/GravatarService.html":{}}}],["generate_gravatar_url(username",{"_index":446,"title":{},"body":{"injectables/GravatarService.html":{}}}],["generate_pw_challenge_url",{"_index":371,"title":{},"body":{"injectables/EmailService.html":{}}}],["generate_pw_challenge_url(challenge",{"_index":378,"title":{},"body":{"injectables/EmailService.html":{}}}],["generate_type(http_code",{"_index":1650,"title":{},"body":{"miscellaneous/variables.html":{}}}],["genre",{"_index":656,"title":{},"body":{"interfaces/MovieExtType.html":{},"injectables/MovieService.html":{}}}],["german",{"_index":1263,"title":{},"body":{"index.html":{}}}],["geschaut:\\n${watchlist.join(\"\\n\")}\\n",{"_index":57,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["get(':imdb_id",{"_index":609,"title":{},"body":{"controllers/MovieController.html":{},"controllers/VoteController.html":{}}}],["get(':user_id",{"_index":879,"title":{},"body":{"controllers/UserController.html":{}}}],["get('all",{"_index":602,"title":{},"body":{"controllers/MovieController.html":{}}}],["get('check",{"_index":878,"title":{},"body":{"controllers/UserController.html":{}}}],["get('confirm/:challenge",{"_index":228,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('data",{"_index":866,"title":{},"body":{"controllers/UserController.html":{}}}],["get('history",{"_index":606,"title":{},"body":{"controllers/MovieController.html":{}}}],["get('reset/:username",{"_index":231,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('watchlist",{"_index":604,"title":{},"body":{"controllers/MovieController.html":{}}}],["get(@user",{"_index":854,"title":{},"body":{"controllers/UserController.html":{}}}],["get(data",{"_index":1042,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["get(imdb_id",{"_index":638,"title":{},"body":{"injectables/MovieDBService.html":{},"injectables/MovieService.html":{}}}],["get(user",{"_index":832,"title":{},"body":{"controllers/UserController.html":{}}}],["get(user_id",{"_index":942,"title":{},"body":{"injectables/UserService.html":{}}}],["get(userwhereuniqueinput",{"_index":898,"title":{},"body":{"injectables/UserDBService.html":{}}}],["get_all",{"_index":465,"title":{},"body":{"injectables/HistoryDBService.html":{},"injectables/MovieDBService.html":{},"injectables/MovieService.html":{},"injectables/UserDBService.html":{},"injectables/WatchListDBService.html":{}}}],["get_all_media",{"_index":557,"title":{},"body":{"controllers/MovieController.html":{}}}],["get_all_opt_in",{"_index":890,"title":{},"body":{"injectables/UserDBService.html":{}}}],["get_all_proposed",{"_index":627,"title":{},"body":{"injectables/MovieDBService.html":{}}}],["get_all_proposed(user_id",{"_index":641,"title":{},"body":{"injectables/MovieDBService.html":{}}}],["get_cookie",{"_index":1155,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["get_cookie(\"access_token",{"_index":1647,"title":{},"body":{"miscellaneous/variables.html":{}}}],["get_cookie_all",{"_index":1156,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["get_data",{"_index":811,"title":{},"body":{"controllers/UserController.html":{}}}],["get_data(@user",{"_index":867,"title":{},"body":{"controllers/UserController.html":{}}}],["get_data(user",{"_index":835,"title":{},"body":{"controllers/UserController.html":{}}}],["get_history",{"_index":558,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{}}}],["get_imdb",{"_index":628,"title":{},"body":{"injectables/MovieDBService.html":{}}}],["get_imdb(imdb_id",{"_index":643,"title":{},"body":{"injectables/MovieDBService.html":{}}}],["get_media",{"_index":559,"title":{},"body":{"controllers/MovieController.html":{}}}],["get_media(@param('imdb_id",{"_index":610,"title":{},"body":{"controllers/MovieController.html":{}}}],["get_media(imdb_id",{"_index":575,"title":{},"body":{"controllers/MovieController.html":{}}}],["get_most_voted",{"_index":1027,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["get_most_voted(count",{"_index":1044,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["get_num_of_votes",{"_index":1028,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["get_num_of_votes(imdb_id",{"_index":1047,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["get_public",{"_index":926,"title":{},"body":{"injectables/UserService.html":{}}}],["get_public(user_id",{"_index":944,"title":{},"body":{"injectables/UserService.html":{}}}],["get_user",{"_index":812,"title":{},"body":{"controllers/UserController.html":{}}}],["get_user(@param('user_id",{"_index":880,"title":{},"body":{"controllers/UserController.html":{}}}],["get_user(user_id",{"_index":839,"title":{},"body":{"controllers/UserController.html":{}}}],["get_user_data",{"_index":927,"title":{},"body":{"injectables/UserService.html":{}}}],["get_user_data(user_id",{"_index":946,"title":{},"body":{"injectables/UserService.html":{}}}],["get_vote",{"_index":991,"title":{},"body":{"controllers/VoteController.html":{}}}],["get_vote(@param('imdb_id",{"_index":1013,"title":{},"body":{"controllers/VoteController.html":{}}}],["get_vote(imdb_id",{"_index":995,"title":{},"body":{"controllers/VoteController.html":{}}}],["get_votes",{"_index":992,"title":{},"body":{"controllers/VoteController.html":{},"injectables/VoteService.html":{}}}],["get_votes(@user",{"_index":1011,"title":{},"body":{"controllers/VoteController.html":{}}}],["get_votes(imdb_id",{"_index":1078,"title":{},"body":{"injectables/VoteService.html":{}}}],["get_votes(user",{"_index":998,"title":{},"body":{"controllers/VoteController.html":{}}}],["get_votes_movie",{"_index":1029,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["get_votes_movie(imdb_id",{"_index":1049,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["get_votes_user",{"_index":1030,"title":{},"body":{"injectables/VoteDBService.html":{},"injectables/VoteService.html":{}}}],["get_votes_user(user_id",{"_index":1051,"title":{},"body":{"injectables/VoteDBService.html":{},"injectables/VoteService.html":{}}}],["get_watchlist",{"_index":560,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{}}}],["getränke",{"_index":65,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["getting",{"_index":1234,"title":{"index.html":{},"license.html":{}},"body":{}}],["gibt",{"_index":64,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["given",{"_index":566,"title":{},"body":{"controllers/MovieController.html":{},"controllers/UserController.html":{},"controllers/VoteController.html":{}}}],["granted",{"_index":1436,"title":{},"body":{"license.html":{}}}],["gravatar",{"_index":856,"title":{},"body":{"controllers/UserController.html":{}}}],["gravatar)'})@apibearerauth()@useguards(jwtauthguard)@post",{"_index":845,"title":{},"body":{"controllers/UserController.html":{}}}],["gravatar_url",{"_index":948,"title":{},"body":{"injectables/UserService.html":{}}}],["gravatarservice",{"_index":441,"title":{"injectables/GravatarService.html":{}},"body":{"injectables/GravatarService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["guide",{"_index":1340,"title":{},"body":{"index.html":{}}}],["handle",{"_index":1351,"title":{},"body":{"index.html":{}}}],["has(imdb_id",{"_index":473,"title":{},"body":{"injectables/HistoryDBService.html":{},"injectables/MovieDBService.html":{}}}],["has(user_id",{"_index":1053,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["has_user",{"_index":891,"title":{},"body":{"injectables/UserDBService.html":{}}}],["has_user(username",{"_index":903,"title":{},"body":{"injectables/UserDBService.html":{}}}],["hash",{"_index":451,"title":{},"body":{"injectables/GravatarService.html":{},"injectables/PasswordService.html":{}}}],["hash(password",{"_index":768,"title":{},"body":{"injectables/PasswordService.html":{}}}],["hash_md5",{"_index":765,"title":{},"body":{"injectables/PasswordService.html":{}}}],["hash_md5(string",{"_index":770,"title":{},"body":{"injectables/PasswordService.html":{}}}],["hashed_password",{"_index":337,"title":{},"body":{"injectables/AuthService.html":{}}}],["header",{"_index":1318,"title":{},"body":{"index.html":{}}}],["headers",{"_index":1643,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hello",{"_index":408,"title":{},"body":{"injectables/EmailService.html":{}}}],["helmet",{"_index":1208,"title":{},"body":{"dependencies.html":{}}}],["hereby",{"_index":1435,"title":{},"body":{"license.html":{}}}],["history",{"_index":572,"title":{},"body":{"controllers/MovieController.html":{},"miscellaneous/variables.html":{}}}],["historydb.service",{"_index":461,"title":{},"body":{"modules/HistoryDBModule.html":{}}}],["historydbmodule",{"_index":426,"title":{"modules/HistoryDBModule.html":{}},"body":{"modules/EventModule.html":{},"modules/HistoryDBModule.html":{},"modules/MovieModule.html":{},"modules.html":{},"overview.html":{}}}],["historydbservice",{"_index":457,"title":{"injectables/HistoryDBService.html":{}},"body":{"modules/HistoryDBModule.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"injectables/MovieService.html":{},"coverage.html":{},"overview.html":{}}}],["historyjob",{"_index":430,"title":{"injectables/HistoryJob.html":{}},"body":{"modules/EventModule.html":{},"injectables/HistoryJob.html":{},"coverage.html":{},"overview.html":{}}}],["historyview",{"_index":1629,"title":{},"body":{"miscellaneous/variables.html":{}}}],["histroydbservice",{"_index":675,"title":{},"body":{"injectables/MovieService.html":{}}}],["holders",{"_index":1480,"title":{},"body":{"license.html":{}}}],["home",{"_index":1618,"title":{},"body":{"miscellaneous/variables.html":{}}}],["homeview",{"_index":1620,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hood",{"_index":1419,"title":{},"body":{"index.html":{}}}],["host",{"_index":396,"title":{},"body":{"injectables/EmailService.html":{},"miscellaneous/variables.html":{}}}],["html",{"_index":1313,"title":{},"body":{"index.html":{}}}],["http://[::1]:3000/api",{"_index":1332,"title":{},"body":{"index.html":{}}}],["http://[::1]:3000/docs/api",{"_index":1337,"title":{},"body":{"index.html":{}}}],["http://[::1]:3000/docs/backend",{"_index":1355,"title":{},"body":{"index.html":{}}}],["http_code",{"_index":1651,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://www.gravatar.com/avatar/${hash",{"_index":453,"title":{},"body":{"injectables/GravatarService.html":{}}}],["https://www.omdbapi.com/apikey.aspx",{"_index":1547,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https:\\/\\/discord.com\\/api\\/webhooks\\/[0",{"_index":1603,"title":{},"body":{"miscellaneous/variables.html":{}}}],["i18n",{"_index":120,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"injectables/VoteService.html":{},"dependencies.html":{}}}],["i18n.t(\"user.success.delete",{"_index":988,"title":{},"body":{"injectables/UserService.html":{}}}],["i18n.t(\"user.success.email_opt_in",{"_index":963,"title":{},"body":{"injectables/UserService.html":{}}}],["i18n.t(\"user.success.password",{"_index":968,"title":{},"body":{"injectables/UserService.html":{}}}],["i18n.t(\"user.success.profile",{"_index":962,"title":{},"body":{"injectables/UserService.html":{}}}],["i18n.t(\"user.success.username",{"_index":978,"title":{},"body":{"injectables/UserService.html":{}}}],["i18n.t('auth.success.password_reset",{"_index":340,"title":{},"body":{"injectables/AuthService.html":{}}}],["i18n.t('auth.success.password_reset_request",{"_index":333,"title":{},"body":{"injectables/AuthService.html":{}}}],["i18n.t('auth.success.register",{"_index":319,"title":{},"body":{"injectables/AuthService.html":{}}}],["i18n.t('auth.success.verified",{"_index":329,"title":{},"body":{"injectables/AuthService.html":{}}}],["i18n.t('movie.success.delete",{"_index":742,"title":{},"body":{"injectables/MovieService.html":{}}}],["i18n.t('movie.success.save",{"_index":732,"title":{},"body":{"injectables/MovieService.html":{}}}],["i18ncontext",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"injectables/VoteService.html":{}}}],["i18ncontext.current",{"_index":534,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["i18nmodule",{"_index":118,"title":{},"body":{"modules/AppModule.html":{}}}],["i18nmodule.forroot",{"_index":129,"title":{},"body":{"modules/AppModule.html":{}}}],["i18npath",{"_index":1507,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["i18ntranslations",{"_index":215,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"injectables/VoteService.html":{},"miscellaneous/typealiases.html":{}}}],["id",{"_index":520,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/JwtUser.html":{},"injectables/MovieService.html":{},"injectables/UserService.html":{},"injectables/VoteDBService.html":{},"injectables/VoteService.html":{}}}],["identifier",{"_index":1146,"title":{},"body":{"coverage.html":{}}}],["ignore",{"_index":359,"title":{},"body":{"injectables/DiscordService.html":{}}}],["ignoreexpiration",{"_index":518,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["imdb",{"_index":598,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{},"dependencies.html":{}}}],["imdb_id",{"_index":475,"title":{},"body":{"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"controllers/MovieController.html":{},"injectables/MovieDBService.html":{},"interfaces/MovieExtType.html":{},"injectables/MovieService.html":{},"controllers/VoteController.html":{},"injectables/VoteDBService.html":{},"injectables/VoteService.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{},"interfaces/WatchlistExtType.html":{}}}],["imdb_id'})@apibearerauth()@useguards(jwtauthguard)@get(':imdb_id",{"_index":578,"title":{},"body":{"controllers/MovieController.html":{}}}],["imdb_id_pattern",{"_index":691,"title":{},"body":{"injectables/MovieService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["imdb_id_pattern.test(imdb_id",{"_index":709,"title":{},"body":{"injectables/MovieService.html":{}}}],["imdb_id_user_id",{"_index":1100,"title":{},"body":{"injectables/VoteService.html":{}}}],["imdb_ids",{"_index":999,"title":{},"body":{"controllers/VoteController.html":{}}}],["implemented",{"_index":1310,"title":{},"body":{"index.html":{}}}],["implements",{"_index":547,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/PrismaService.html":{}}}],["implied",{"_index":1470,"title":{},"body":{"license.html":{}}}],["import",{"_index":37,"title":{},"body":{"injectables/AnnounceJob.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"injectables/EmailService.html":{},"modules/EventModule.html":{},"injectables/GravatarService.html":{},"modules/HistoryDBModule.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"controllers/MovieController.html":{},"modules/MovieDBModule.html":{},"injectables/MovieDBService.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"injectables/PasswordService.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"modules/UserDBModule.html":{},"injectables/UserDBService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"modules/VoteDBModule.html":{},"injectables/VoteDBService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"modules/WatchListDBModule.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{}}}],["imports",{"_index":104,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventModule.html":{},"modules/MovieModule.html":{},"modules/UserModule.html":{},"modules/VoteModule.html":{}}}],["included",{"_index":1464,"title":{},"body":{"license.html":{}}}],["including",{"_index":1446,"title":{},"body":{"license.html":{}}}],["incoming",{"_index":1360,"title":{},"body":{"index.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"injectables/AnnounceJob.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"classes/EmailOptInDto.html":{},"injectables/EmailService.html":{},"injectables/GravatarService.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"injectables/JwtStrategy.html":{},"interfaces/JwtUser.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoginDto.html":{},"controllers/MovieController.html":{},"injectables/MovieDBService.html":{},"interfaces/MovieExtType.html":{},"injectables/MovieService.html":{},"classes/PasswordDto.html":{},"classes/PasswordNewDto.html":{},"injectables/PasswordService.html":{},"injectables/PrismaService.html":{},"classes/ProfileDto.html":{},"classes/RegisterDto.html":{},"classes/ResDto.html":{},"controllers/UserController.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"injectables/VoteDBService.html":{},"injectables/VoteService.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{},"interfaces/WatchlistExtType.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["inestapplication",{"_index":786,"title":{},"body":{"injectables/PrismaService.html":{}}}],["info",{"_index":3,"title":{},"body":{"injectables/AnnounceJob.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"classes/EmailOptInDto.html":{},"injectables/EmailService.html":{},"modules/EventModule.html":{},"injectables/GravatarService.html":{},"modules/HistoryDBModule.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/JwtUser.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoginDto.html":{},"controllers/MovieController.html":{},"modules/MovieDBModule.html":{},"injectables/MovieDBService.html":{},"interfaces/MovieExtType.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"classes/PasswordDto.html":{},"classes/PasswordNewDto.html":{},"injectables/PasswordService.html":{},"injectables/PrismaService.html":{},"classes/ProfileDto.html":{},"classes/RegisterDto.html":{},"classes/ResDto.html":{},"controllers/UserController.html":{},"modules/UserDBModule.html":{},"injectables/UserDBService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"modules/VoteDBModule.html":{},"injectables/VoteDBService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"modules/WatchListDBModule.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{},"interfaces/WatchlistExtType.html":{}}}],["information",{"_index":576,"title":{},"body":{"controllers/MovieController.html":{},"controllers/UserController.html":{}}}],["infos",{"_index":59,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["injectable",{"_index":0,"title":{"injectables/AnnounceJob.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"injectables/EmailService.html":{},"injectables/GravatarService.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"injectables/MovieDBService.html":{},"injectables/MovieService.html":{},"injectables/PasswordService.html":{},"injectables/PrismaService.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{},"injectables/VoteDBService.html":{},"injectables/VoteService.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{}},"body":{"injectables/AnnounceJob.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"injectables/EmailService.html":{},"injectables/GravatarService.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"injectables/MovieDBService.html":{},"injectables/MovieService.html":{},"injectables/PasswordService.html":{},"injectables/PrismaService.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{},"injectables/VoteDBService.html":{},"injectables/VoteService.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{},"coverage.html":{}}}],["injectables",{"_index":2,"title":{},"body":{"injectables/AnnounceJob.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"injectables/EmailService.html":{},"injectables/GravatarService.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"injectables/MovieDBService.html":{},"injectables/MovieService.html":{},"injectables/PasswordService.html":{},"injectables/PrismaService.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{},"injectables/VoteDBService.html":{},"injectables/VoteService.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{},"overview.html":{}}}],["install",{"_index":1373,"title":{},"body":{"index.html":{}}}],["installation",{"_index":1268,"title":{},"body":{"index.html":{}}}],["installed",{"_index":1271,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":323,"title":{},"body":{"injectables/AuthService.html":{}}}],["interact",{"_index":1414,"title":{},"body":{"index.html":{}}}],["interested",{"_index":749,"title":{},"body":{"injectables/MovieService.html":{},"interfaces/WatchlistExtType.html":{},"index.html":{}}}],["interface",{"_index":522,"title":{"interfaces/JwtUser.html":{},"interfaces/MovieExtType.html":{},"interfaces/WatchlistExtType.html":{}},"body":{"interfaces/JwtUser.html":{},"interfaces/MovieExtType.html":{},"interfaces/WatchlistExtType.html":{},"coverage.html":{},"index.html":{}}}],["interfaces",{"_index":523,"title":{},"body":{"interfaces/JwtUser.html":{},"interfaces/MovieExtType.html":{},"interfaces/WatchlistExtType.html":{},"overview.html":{}}}],["internal",{"_index":1366,"title":{},"body":{"index.html":{}}}],["internalservererrorexception",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{},"injectables/VoteService.html":{}}}],["internalservererrorexception(i18n.t('auth.exception.internal_server_error_register",{"_index":325,"title":{},"body":{"injectables/AuthService.html":{}}}],["internalservererrorexception(i18n.t('vote.exception.internal_server_error",{"_index":1087,"title":{},"body":{"injectables/VoteService.html":{}}}],["isglobal",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["issue",{"_index":178,"title":{},"body":{"controllers/AuthController.html":{}}}],["ist",{"_index":52,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["itself",{"_index":1388,"title":{},"body":{"index.html":{}}}],["job",{"_index":72,"title":{},"body":{"injectables/AnnounceJob.html":{},"injectables/HistoryJob.html":{},"injectables/WatchListJob.html":{}}}],["jobs/announce.job",{"_index":439,"title":{},"body":{"modules/EventModule.html":{}}}],["jobs/history.job",{"_index":433,"title":{},"body":{"modules/EventModule.html":{}}}],["jobs/watchlist.job",{"_index":434,"title":{},"body":{"modules/EventModule.html":{}}}],["joi",{"_index":1211,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["joi.boolean().required().default(\"false",{"_index":1593,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.number().required().default(\"15",{"_index":1575,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.number().required().default(\"2",{"_index":1580,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.number().required().default(\"20",{"_index":1548,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.number().required().default(\"3000\").port",{"_index":1530,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.number().required().default(\"5",{"_index":1552,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.number().required().default(\"587",{"_index":1588,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.object",{"_index":1523,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.required",{"_index":1597,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.string().required",{"_index":1524,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.string().required().default(\"0",{"_index":1555,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.string().required().default(\"2h",{"_index":1540,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.string().required().default(\"45",{"_index":1571,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.string().required().default(\"file:./dev.db",{"_index":1533,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.string().required().default(\"secret",{"_index":1535,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.string().required().domain",{"_index":1583,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.string().required().email",{"_index":1590,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.string().required().token",{"_index":1544,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.string().required().uri",{"_index":1527,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.string().when('discord_enable",{"_index":1596,"title":{},"body":{"miscellaneous/variables.html":{}}}],["join",{"_index":123,"title":{},"body":{"modules/AppModule.html":{}}}],["join(__dirname",{"_index":133,"title":{},"body":{"modules/AppModule.html":{}}}],["js",{"_index":1204,"title":{},"body":{"dependencies.html":{}}}],["js/md5",{"_index":776,"title":{},"body":{"injectables/PasswordService.html":{}}}],["jwt",{"_index":179,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["jwt.stategy",{"_index":254,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwt_expiration",{"_index":1539,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwt_secret",{"_index":1534,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwtauthguard",{"_index":499,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"injectables/JwtAuthGuard.html":{},"controllers/MovieController.html":{},"controllers/UserController.html":{},"controllers/VoteController.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":516,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":252,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":257,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":242,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["jwtuser",{"_index":174,"title":{"interfaces/JwtUser.html":{}},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"interfaces/JwtUser.html":{},"controllers/MovieController.html":{},"controllers/UserController.html":{},"controllers/VoteController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["key",{"_index":1545,"title":{},"body":{"miscellaneous/variables.html":{}}}],["kind",{"_index":1469,"title":{},"body":{"license.html":{}}}],["knowledge",{"_index":1342,"title":{},"body":{"index.html":{}}}],["lang",{"_index":1259,"title":{},"body":{"index.html":{}}}],["language",{"_index":1306,"title":{},"body":{"index.html":{}}}],["languages",{"_index":1308,"title":{},"body":{"index.html":{}}}],["liability",{"_index":1484,"title":{},"body":{"license.html":{}}}],["liable",{"_index":1481,"title":{},"body":{"license.html":{}}}],["library",{"_index":1302,"title":{},"body":{"index.html":{}}}],["license",{"_index":1427,"title":{"license.html":{}},"body":{"license.html":{},"properties.html":{}}}],["limitation",{"_index":1447,"title":{},"body":{"license.html":{}}}],["limited",{"_index":1471,"title":{},"body":{"license.html":{}}}],["link",{"_index":493,"title":{},"body":{"injectables/HistoryJob.html":{},"interfaces/MovieExtType.html":{},"injectables/MovieService.html":{},"interfaces/WatchlistExtType.html":{},"miscellaneous/variables.html":{}}}],["link:\\n",{"_index":415,"title":{},"body":{"injectables/EmailService.html":{}}}],["link:\\n${challenge_url}\\n\\n",{"_index":412,"title":{},"body":{"injectables/EmailService.html":{}}}],["list",{"_index":1267,"title":{},"body":{"index.html":{}}}],["listen",{"_index":1531,"title":{},"body":{"miscellaneous/variables.html":{}}}],["literal",{"_index":906,"title":{},"body":{"injectables/UserDBService.html":{},"miscellaneous/typealiases.html":{}}}],["loaderoptions",{"_index":132,"title":{},"body":{"modules/AppModule.html":{}}}],["loading",{"_index":1635,"title":{},"body":{"miscellaneous/variables.html":{}}}],["local",{"_index":532,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["local.strategy",{"_index":250,"title":{},"body":{"modules/AuthModule.html":{}}}],["localauthguard",{"_index":201,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["locales",{"_index":1321,"title":{},"body":{"index.html":{}}}],["localisation",{"_index":1319,"title":{},"body":{"index.html":{}}}],["localstrategy",{"_index":243,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["located",{"_index":1296,"title":{},"body":{"index.html":{}}}],["logged_in",{"_index":1634,"title":{},"body":{"miscellaneous/variables.html":{}}}],["loggermiddleware",{"_index":536,"title":{"injectables/LoggerMiddleware.html":{}},"body":{"injectables/LoggerMiddleware.html":{},"coverage.html":{}}}],["login",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["login(@user",{"_index":222,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(user",{"_index":173,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login/:challenge",{"_index":1621,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logindto",{"_index":176,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/LoginDto.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["loginview",{"_index":1622,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lots",{"_index":1363,"title":{},"body":{"index.html":{}}}],["mail",{"_index":1562,"title":{},"body":{"miscellaneous/variables.html":{}}}],["main",{"_index":1358,"title":{},"body":{"index.html":{}}}],["manage",{"_index":1249,"title":{},"body":{"index.html":{}}}],["management",{"_index":1239,"title":{},"body":{"index.html":{}}}],["manager",{"_index":1236,"title":{},"body":{"index.html":{}}}],["matching",{"_index":88,"title":{},"body":{"injectables/AnnounceJob.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"classes/EmailOptInDto.html":{},"injectables/EmailService.html":{},"modules/EventModule.html":{},"injectables/GravatarService.html":{},"modules/HistoryDBModule.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/JwtUser.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoginDto.html":{},"controllers/MovieController.html":{},"modules/MovieDBModule.html":{},"injectables/MovieDBService.html":{},"interfaces/MovieExtType.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"classes/PasswordDto.html":{},"classes/PasswordNewDto.html":{},"injectables/PasswordService.html":{},"injectables/PrismaService.html":{},"classes/ProfileDto.html":{},"classes/RegisterDto.html":{},"classes/ResDto.html":{},"controllers/UserController.html":{},"modules/UserDBModule.html":{},"injectables/UserDBService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"modules/VoteDBModule.html":{},"injectables/VoteDBService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"modules/WatchListDBModule.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{},"interfaces/WatchlistExtType.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.round(movie_data.runtime/15",{"_index":1138,"title":{},"body":{"injectables/WatchListJob.html":{}}}],["max_proposeable_movies",{"_index":673,"title":{},"body":{"injectables/MovieService.html":{},"miscellaneous/variables.html":{}}}],["max_votes",{"_index":1076,"title":{},"body":{"injectables/VoteService.html":{},"miscellaneous/variables.html":{}}}],["maximum",{"_index":1549,"title":{},"body":{"miscellaneous/variables.html":{}}}],["md5",{"_index":774,"title":{},"body":{"injectables/PasswordService.html":{}}}],["md5(string).tostring",{"_index":779,"title":{},"body":{"injectables/PasswordService.html":{}}}],["mehr",{"_index":58,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["merchantability",{"_index":1473,"title":{},"body":{"license.html":{}}}],["merge",{"_index":1450,"title":{},"body":{"license.html":{}}}],["message",{"_index":318,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"injectables/MovieService.html":{},"classes/ResDto.html":{},"injectables/UserService.html":{}}}],["metadata",{"_index":1220,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":1231,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["methods",{"_index":13,"title":{},"body":{"injectables/AnnounceJob.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"injectables/EmailService.html":{},"injectables/GravatarService.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"controllers/MovieController.html":{},"injectables/MovieDBService.html":{},"injectables/MovieService.html":{},"injectables/PasswordService.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"injectables/VoteDBService.html":{},"injectables/VoteService.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{}}}],["migrate",{"_index":1425,"title":{},"body":{"index.html":{}}}],["minimum",{"_index":1576,"title":{},"body":{"miscellaneous/variables.html":{}}}],["minutes",{"_index":1579,"title":{},"body":{"miscellaneous/variables.html":{}}}],["miscellaneous",{"_index":1226,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1428,"title":{},"body":{"license.html":{},"properties.html":{}}}],["mode",{"_index":1372,"title":{},"body":{"index.html":{}}}],["modify",{"_index":1449,"title":{},"body":{"license.html":{}}}],["module",{"_index":89,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventModule.html":{},"modules/HistoryDBModule.html":{},"modules/MovieDBModule.html":{},"modules/MovieModule.html":{},"modules/UserDBModule.html":{},"modules/UserModule.html":{},"modules/VoteDBModule.html":{},"modules/VoteModule.html":{},"modules/WatchListDBModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventModule.html":{},"modules/HistoryDBModule.html":{},"modules/MovieDBModule.html":{},"modules/MovieModule.html":{},"modules/UserDBModule.html":{},"modules/UserModule.html":{},"modules/VoteDBModule.html":{},"modules/VoteModule.html":{},"modules/WatchListDBModule.html":{}}}],["modules",{"_index":91,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventModule.html":{},"modules/HistoryDBModule.html":{},"modules/MovieDBModule.html":{},"modules/MovieModule.html":{},"modules/UserDBModule.html":{},"modules/UserModule.html":{},"modules/VoteDBModule.html":{},"modules/VoteModule.html":{},"modules/WatchListDBModule.html":{},"modules.html":{},"overview.html":{}}}],["momomat",{"_index":1348,"title":{},"body":{"index.html":{}}}],["monday",{"_index":1235,"title":{},"body":{"index.html":{}}}],["movie",{"_index":42,"title":{},"body":{"injectables/AnnounceJob.html":{},"injectables/HistoryJob.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"injectables/VoteDBService.html":{},"injectables/VoteService.html":{},"injectables/WatchListJob.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["movie'})@apibearerauth()@useguards(jwtauthguard)@delete(':imdb_id",{"_index":1006,"title":{},"body":{"controllers/VoteController.html":{}}}],["movie'})@apibearerauth()@useguards(jwtauthguard)@post(':imdb_id",{"_index":586,"title":{},"body":{"controllers/MovieController.html":{},"controllers/VoteController.html":{}}}],["movie'})@get(':imdb_id",{"_index":996,"title":{},"body":{"controllers/VoteController.html":{}}}],["movie).proposer_id",{"_index":982,"title":{},"body":{"injectables/UserService.html":{}}}],["movie.controller",{"_index":665,"title":{},"body":{"modules/MovieModule.html":{}}}],["movie.createdat",{"_index":708,"title":{},"body":{"injectables/MovieService.html":{}}}],["movie.genre",{"_index":707,"title":{},"body":{"injectables/MovieService.html":{}}}],["movie.genres",{"_index":723,"title":{},"body":{"injectables/MovieService.html":{}}}],["movie.imdb_id",{"_index":491,"title":{},"body":{"injectables/HistoryJob.html":{},"injectables/MovieService.html":{},"injectables/WatchListJob.html":{}}}],["movie.imdburl",{"_index":724,"title":{},"body":{"injectables/MovieService.html":{}}}],["movie.link",{"_index":705,"title":{},"body":{"injectables/MovieService.html":{}}}],["movie.proposer_id",{"_index":702,"title":{},"body":{"injectables/MovieService.html":{},"injectables/VoteService.html":{}}}],["movie.service",{"_index":591,"title":{},"body":{"controllers/MovieController.html":{},"modules/MovieModule.html":{}}}],["movie.start_time.tolocalestring",{"_index":81,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["movie.title",{"_index":704,"title":{},"body":{"injectables/MovieService.html":{}}}],["movie.year",{"_index":706,"title":{},"body":{"injectables/MovieService.html":{}}}],["movie_data",{"_index":78,"title":{},"body":{"injectables/AnnounceJob.html":{},"injectables/HistoryJob.html":{},"injectables/WatchListJob.html":{}}}],["movie_data.link",{"_index":494,"title":{},"body":{"injectables/HistoryJob.html":{}}}],["movie_data.title",{"_index":83,"title":{},"body":{"injectables/AnnounceJob.html":{},"injectables/HistoryJob.html":{}}}],["moviecontroller",{"_index":554,"title":{"controllers/MovieController.html":{}},"body":{"controllers/MovieController.html":{},"modules/MovieModule.html":{},"coverage.html":{}}}],["moviedb.service",{"_index":624,"title":{},"body":{"modules/MovieDBModule.html":{}}}],["moviedb_data",{"_index":722,"title":{},"body":{"injectables/MovieService.html":{}}}],["moviedbmodule",{"_index":427,"title":{"modules/MovieDBModule.html":{}},"body":{"modules/EventModule.html":{},"modules/MovieDBModule.html":{},"modules/MovieModule.html":{},"modules/UserModule.html":{},"modules/VoteModule.html":{},"modules.html":{},"overview.html":{}}}],["moviedbservice",{"_index":21,"title":{"injectables/MovieDBService.html":{}},"body":{"injectables/AnnounceJob.html":{},"injectables/HistoryJob.html":{},"modules/MovieDBModule.html":{},"injectables/MovieDBService.html":{},"injectables/MovieService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"injectables/WatchListJob.html":{},"coverage.html":{},"overview.html":{}}}],["movieexttype",{"_index":593,"title":{"interfaces/MovieExtType.html":{}},"body":{"controllers/MovieController.html":{},"interfaces/MovieExtType.html":{},"injectables/MovieService.html":{},"coverage.html":{}}}],["moviemodule",{"_index":97,"title":{"modules/MovieModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MovieModule.html":{},"modules.html":{},"overview.html":{}}}],["movies",{"_index":569,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["movieservice",{"_index":590,"title":{"injectables/MovieService.html":{}},"body":{"controllers/MovieController.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"coverage.html":{},"overview.html":{}}}],["msg",{"_index":1637,"title":{},"body":{"miscellaneous/variables.html":{}}}],["multi",{"_index":1258,"title":{},"body":{"index.html":{}}}],["multiple",{"_index":1307,"title":{},"body":{"index.html":{}}}],["n",{"_index":49,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["name",{"_index":27,"title":{},"body":{"injectables/AnnounceJob.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"injectables/EmailService.html":{},"injectables/GravatarService.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"controllers/MovieController.html":{},"injectables/MovieDBService.html":{},"injectables/MovieService.html":{},"injectables/PasswordService.html":{},"injectables/PrismaService.html":{},"classes/ProfileDto.html":{},"classes/RegisterDto.html":{},"controllers/UserController.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"injectables/VoteDBService.html":{},"injectables/VoteService.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["name_pattern",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["name_pattern.test(data.name",{"_index":952,"title":{},"body":{"injectables/UserService.html":{}}}],["name_pattern.test(user.name",{"_index":309,"title":{},"body":{"injectables/AuthService.html":{}}}],["navigation",{"_index":1399,"title":{},"body":{"index.html":{}}}],["need",{"_index":1269,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":119,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"injectables/VoteService.html":{},"dependencies.html":{},"index.html":{}}}],["nestjs/common",{"_index":38,"title":{},"body":{"injectables/AnnounceJob.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"injectables/EmailService.html":{},"modules/EventModule.html":{},"injectables/GravatarService.html":{},"modules/HistoryDBModule.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"controllers/MovieController.html":{},"modules/MovieDBModule.html":{},"injectables/MovieDBService.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"injectables/PasswordService.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"modules/UserDBModule.html":{},"injectables/UserDBService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"modules/VoteDBModule.html":{},"injectables/VoteDBService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"modules/WatchListDBModule.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":116,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":1195,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":253,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":249,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1196,"title":{},"body":{"dependencies.html":{}}}],["nestjs/schedule",{"_index":114,"title":{},"body":{"modules/AppModule.html":{},"injectables/HistoryJob.html":{},"injectables/WatchListJob.html":{},"dependencies.html":{}}}],["nestjs/serve",{"_index":108,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":214,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MovieController.html":{},"controllers/UserController.html":{},"controllers/VoteController.html":{},"dependencies.html":{}}}],["nestmiddleware",{"_index":546,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["new",{"_index":188,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"injectables/LocalStrategy.html":{},"injectables/MovieService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"injectables/WatchListJob.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["new_challenge",{"_index":974,"title":{},"body":{"injectables/UserService.html":{}}}],["new_challenge_url",{"_index":976,"title":{},"body":{"injectables/UserService.html":{}}}],["new_username",{"_index":935,"title":{},"body":{"injectables/UserService.html":{}}}],["newer",{"_index":1274,"title":{},"body":{"index.html":{}}}],["newest",{"_index":1276,"title":{},"body":{"index.html":{}}}],["newsletter",{"_index":859,"title":{},"body":{"controllers/UserController.html":{}}}],["newsletter)'})@apibearerauth()@useguards(jwtauthguard)@post('email_opt_in",{"_index":830,"title":{},"body":{"controllers/UserController.html":{}}}],["next",{"_index":541,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"properties.html":{}}}],["node.js",{"_index":1270,"title":{},"body":{"index.html":{}}}],["nodemailer",{"_index":390,"title":{},"body":{"injectables/EmailService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["nodemailer.createtransport",{"_index":395,"title":{},"body":{"injectables/EmailService.html":{}}}],["noninfringement",{"_index":1477,"title":{},"body":{"license.html":{}}}],["note",{"_index":1375,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MovieService.html":{}}}],["notfoundexception(i18n.t('auth.exception.not_found_challenge",{"_index":330,"title":{},"body":{"injectables/AuthService.html":{}}}],["notfoundexception(i18n.t('auth.exception.not_found_password_reset",{"_index":341,"title":{},"body":{"injectables/AuthService.html":{}}}],["notfoundexception(i18n.t('movie.exception.not_found",{"_index":699,"title":{},"body":{"injectables/MovieService.html":{}}}],["notfoundexception(i18n.t('movie.exception.not_found_or_not_proposer",{"_index":743,"title":{},"body":{"injectables/MovieService.html":{}}}],["notice",{"_index":1462,"title":{},"body":{"license.html":{}}}],["notifications",{"_index":1266,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["now",{"_index":1283,"title":{},"body":{"index.html":{}}}],["npm",{"_index":1292,"title":{},"body":{"index.html":{}}}],["npx",{"_index":1422,"title":{},"body":{"index.html":{}}}],["null",{"_index":961,"title":{},"body":{"injectables/UserService.html":{}}}],["num_of",{"_index":1031,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["num_of(user_id",{"_index":1055,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["num_of_movies",{"_index":1118,"title":{},"body":{"injectables/WatchListJob.html":{},"miscellaneous/variables.html":{}}}],["num_of_votes",{"_index":1090,"title":{},"body":{"injectables/VoteService.html":{}}}],["number",{"_index":635,"title":{},"body":{"injectables/MovieDBService.html":{},"interfaces/MovieExtType.html":{},"injectables/MovieService.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"injectables/VoteDBService.html":{},"injectables/VoteService.html":{},"interfaces/WatchlistExtType.html":{},"miscellaneous/variables.html":{}}}],["number((movie.runtime.split",{"_index":728,"title":{},"body":{"injectables/MovieService.html":{}}}],["number(process.env.max_proposeable_movies",{"_index":686,"title":{},"body":{"injectables/MovieService.html":{}}}],["number(process.env.max_votes",{"_index":1085,"title":{},"body":{"injectables/VoteService.html":{}}}],["number(process.env.num_of_movies",{"_index":1123,"title":{},"body":{"injectables/WatchListJob.html":{}}}],["number(process.env.pause_time_min",{"_index":1125,"title":{},"body":{"injectables/WatchListJob.html":{}}}],["number(proposer_id",{"_index":739,"title":{},"body":{"injectables/MovieService.html":{}}}],["number(user.id",{"_index":616,"title":{},"body":{"controllers/MovieController.html":{},"controllers/VoteController.html":{}}}],["objects",{"_index":1369,"title":{},"body":{"index.html":{}}}],["obtaining",{"_index":1440,"title":{},"body":{"license.html":{}}}],["omdb",{"_index":1546,"title":{},"body":{"miscellaneous/variables.html":{}}}],["omdb_api_key",{"_index":1543,"title":{},"body":{"miscellaneous/variables.html":{}}}],["one",{"_index":1392,"title":{},"body":{"index.html":{}}}],["onmoduleinit",{"_index":784,"title":{},"body":{"injectables/PrismaService.html":{}}}],["open",{"_index":1281,"title":{},"body":{"index.html":{}}}],["opt_in",{"_index":940,"title":{},"body":{"injectables/UserService.html":{}}}],["opt_in_users",{"_index":417,"title":{},"body":{"injectables/EmailService.html":{}}}],["option",{"_index":1328,"title":{},"body":{"index.html":{}}}],["optional",{"_index":29,"title":{},"body":{"injectables/AnnounceJob.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"injectables/EmailService.html":{},"injectables/GravatarService.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"controllers/MovieController.html":{},"injectables/MovieDBService.html":{},"injectables/MovieService.html":{},"classes/PasswordDto.html":{},"classes/PasswordNewDto.html":{},"injectables/PasswordService.html":{},"injectables/PrismaService.html":{},"classes/ProfileDto.html":{},"classes/RegisterDto.html":{},"classes/ResDto.html":{},"controllers/UserController.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"injectables/VoteDBService.html":{},"injectables/VoteService.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["orderby",{"_index":1064,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["orm",{"_index":1416,"title":{},"body":{"index.html":{}}}],["otherwise",{"_index":1489,"title":{},"body":{"license.html":{}}}],["out",{"_index":102,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventModule.html":{},"modules/HistoryDBModule.html":{},"modules/MovieDBModule.html":{},"modules/MovieModule.html":{},"modules/UserDBModule.html":{},"modules/UserModule.html":{},"modules/VoteDBModule.html":{},"modules/VoteModule.html":{},"modules/WatchListDBModule.html":{},"license.html":{},"overview.html":{}}}],["output",{"_index":77,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["output.push(`${start_time",{"_index":82,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["overview",{"_index":1495,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1192,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":1403,"title":{},"body":{"index.html":{}}}],["pages",{"_index":1401,"title":{},"body":{"index.html":{}}}],["param",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MovieController.html":{},"controllers/UserController.html":{},"controllers/VoteController.html":{}}}],["param('imdb_id",{"_index":614,"title":{},"body":{"controllers/MovieController.html":{},"controllers/VoteController.html":{}}}],["parameters",{"_index":25,"title":{},"body":{"injectables/AnnounceJob.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"injectables/EmailService.html":{},"injectables/GravatarService.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"controllers/MovieController.html":{},"injectables/MovieDBService.html":{},"injectables/MovieService.html":{},"injectables/PasswordService.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"injectables/VoteDBService.html":{},"injectables/VoteService.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":908,"title":{},"body":{"injectables/UserDBService.html":{}}}],["parseexpression",{"_index":1127,"title":{},"body":{"injectables/WatchListJob.html":{}}}],["parseexpression(process.env.schedule_start",{"_index":1134,"title":{},"body":{"injectables/WatchListJob.html":{}}}],["parser",{"_index":1128,"title":{},"body":{"injectables/WatchListJob.html":{},"dependencies.html":{}}}],["particular",{"_index":1475,"title":{},"body":{"license.html":{}}}],["parts",{"_index":1359,"title":{},"body":{"index.html":{}}}],["party",{"_index":1502,"title":{},"body":{"properties.html":{}}}],["pass",{"_index":402,"title":{},"body":{"injectables/EmailService.html":{}}}],["passport",{"_index":512,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":248,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":513,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":514,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["password",{"_index":187,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/EmailService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordDto.html":{},"classes/PasswordNewDto.html":{},"injectables/PasswordService.html":{},"classes/RegisterDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["password'})@apibearerauth()@useguards(jwtauthguard)@post('password",{"_index":816,"title":{},"body":{"controllers/UserController.html":{}}}],["password'})@post('reset/:challenge",{"_index":189,"title":{},"body":{"controllers/AuthController.html":{}}}],["password'})@useguards(localauthguard)@post('login",{"_index":183,"title":{},"body":{"controllers/AuthController.html":{}}}],["password.service",{"_index":448,"title":{},"body":{"injectables/GravatarService.html":{}}}],["password_confirm",{"_index":754,"title":{},"body":{"classes/PasswordDto.html":{},"classes/PasswordNewDto.html":{},"classes/RegisterDto.html":{}}}],["password_new",{"_index":930,"title":{},"body":{"injectables/UserService.html":{}}}],["password_old",{"_index":759,"title":{},"body":{"classes/PasswordNewDto.html":{},"injectables/UserService.html":{}}}],["password_pattern",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["password_pattern.test(password",{"_index":334,"title":{},"body":{"injectables/AuthService.html":{}}}],["password_pattern.test(password_new",{"_index":964,"title":{},"body":{"injectables/UserService.html":{}}}],["password_pattern.test(user.password",{"_index":311,"title":{},"body":{"injectables/AuthService.html":{}}}],["passworddto",{"_index":186,"title":{"classes/PasswordDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/PasswordDto.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["passwordnewdto",{"_index":757,"title":{"classes/PasswordNewDto.html":{}},"body":{"classes/PasswordNewDto.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["passwordservice",{"_index":244,"title":{"injectables/PasswordService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/GravatarService.html":{},"injectables/PasswordService.html":{},"modules/UserDBModule.html":{},"injectables/UserDBService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["path",{"_index":124,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["pattern",{"_index":1557,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pattern(discord_webhook_pattern",{"_index":1598,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pause",{"_index":1577,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pause_time",{"_index":1119,"title":{},"body":{"injectables/WatchListJob.html":{}}}],["pause_time_min",{"_index":1574,"title":{},"body":{"miscellaneous/variables.html":{}}}],["payload",{"_index":304,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.sub",{"_index":521,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["per",{"_index":1561,"title":{},"body":{"miscellaneous/variables.html":{}}}],["permission",{"_index":1434,"title":{},"body":{"license.html":{}}}],["permit",{"_index":1457,"title":{},"body":{"license.html":{}}}],["person",{"_index":1439,"title":{},"body":{"license.html":{}}}],["persons",{"_index":1458,"title":{},"body":{"license.html":{}}}],["plus",{"_index":1327,"title":{},"body":{"index.html":{}}}],["port",{"_index":398,"title":{},"body":{"injectables/EmailService.html":{},"miscellaneous/variables.html":{}}}],["portions",{"_index":1466,"title":{},"body":{"license.html":{}}}],["possible",{"_index":583,"title":{},"body":{"controllers/MovieController.html":{}}}],["post",{"_index":177,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MovieController.html":{},"controllers/UserController.html":{},"controllers/VoteController.html":{}}}],["post(':imdb_id",{"_index":612,"title":{},"body":{"controllers/MovieController.html":{},"controllers/VoteController.html":{}}}],["post('email_opt_in",{"_index":860,"title":{},"body":{"controllers/UserController.html":{}}}],["post('login",{"_index":221,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('password",{"_index":873,"title":{},"body":{"controllers/UserController.html":{}}}],["post('register",{"_index":225,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('reset/:challenge",{"_index":234,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('username",{"_index":869,"title":{},"body":{"controllers/UserController.html":{}}}],["post_media",{"_index":561,"title":{},"body":{"controllers/MovieController.html":{}}}],["post_media(@user",{"_index":613,"title":{},"body":{"controllers/MovieController.html":{}}}],["post_media(user",{"_index":582,"title":{},"body":{"controllers/MovieController.html":{}}}],["prefix",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MovieController.html":{},"controllers/UserController.html":{},"controllers/VoteController.html":{},"index.html":{}}}],["prisma",{"_index":468,"title":{},"body":{"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"injectables/MovieDBService.html":{},"injectables/MovieService.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{},"injectables/VoteDBService.html":{},"injectables/VoteService.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{},"dependencies.html":{},"index.html":{}}}],["prisma.historycreateinput",{"_index":470,"title":{},"body":{"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{}}}],["prisma.moviecreateinput",{"_index":630,"title":{},"body":{"injectables/MovieDBService.html":{},"injectables/MovieService.html":{}}}],["prisma.moviecreatenestedonewithoutvoteinput",{"_index":1095,"title":{},"body":{"injectables/VoteService.html":{}}}],["prisma.moviewhereuniqueinput",{"_index":653,"title":{},"body":{"injectables/MovieDBService.html":{},"injectables/VoteDBService.html":{}}}],["prisma.service",{"_index":462,"title":{},"body":{"modules/HistoryDBModule.html":{},"injectables/HistoryDBService.html":{},"modules/MovieDBModule.html":{},"injectables/MovieDBService.html":{},"modules/UserDBModule.html":{},"injectables/UserDBService.html":{},"modules/VoteDBModule.html":{},"injectables/VoteDBService.html":{},"modules/WatchListDBModule.html":{},"injectables/WatchListDBService.html":{}}}],["prisma.usercreateinput",{"_index":720,"title":{},"body":{"injectables/MovieService.html":{},"injectables/UserDBService.html":{}}}],["prisma.usercreatenestedonewithoutmovieinput",{"_index":726,"title":{},"body":{"injectables/MovieService.html":{}}}],["prisma.usercreatenestedonewithoutvoteinput",{"_index":1096,"title":{},"body":{"injectables/VoteService.html":{}}}],["prisma.userupdateinput",{"_index":915,"title":{},"body":{"injectables/UserDBService.html":{},"injectables/UserService.html":{}}}],["prisma.userwhereuniqueinput",{"_index":896,"title":{},"body":{"injectables/UserDBService.html":{},"injectables/VoteDBService.html":{}}}],["prisma.votecreateinput",{"_index":1033,"title":{},"body":{"injectables/VoteDBService.html":{},"injectables/VoteService.html":{}}}],["prisma.votewhereuniqueinput",{"_index":1036,"title":{},"body":{"injectables/VoteDBService.html":{},"injectables/VoteService.html":{}}}],["prisma.watchlistcreateinput",{"_index":1110,"title":{},"body":{"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{}}}],["prisma/client",{"_index":43,"title":{},"body":{"injectables/AnnounceJob.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"controllers/MovieController.html":{},"injectables/MovieDBService.html":{},"injectables/MovieService.html":{},"injectables/PrismaService.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"injectables/VoteDBService.html":{},"injectables/VoteService.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{},"dependencies.html":{}}}],["prisma/client/runtime",{"_index":284,"title":{},"body":{"injectables/AuthService.html":{}}}],["prismaclient",{"_index":782,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismaclientknownrequesterror",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{}}}],["prismaservice",{"_index":458,"title":{"injectables/PrismaService.html":{}},"body":{"modules/HistoryDBModule.html":{},"injectables/HistoryDBService.html":{},"modules/MovieDBModule.html":{},"injectables/MovieDBService.html":{},"modules/MovieModule.html":{},"injectables/PrismaService.html":{},"modules/UserDBModule.html":{},"injectables/UserDBService.html":{},"modules/VoteDBModule.html":{},"injectables/VoteDBService.html":{},"modules/VoteModule.html":{},"modules/WatchListDBModule.html":{},"injectables/WatchListDBService.html":{},"coverage.html":{},"overview.html":{}}}],["privacy",{"_index":1630,"title":{},"body":{"miscellaneous/variables.html":{}}}],["privacyview",{"_index":1631,"title":{},"body":{"miscellaneous/variables.html":{}}}],["private",{"_index":9,"title":{},"body":{"injectables/AnnounceJob.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"injectables/EmailService.html":{},"injectables/HistoryJob.html":{},"injectables/MovieService.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"injectables/WatchListJob.html":{}}}],["process.env.discord_enable",{"_index":351,"title":{},"body":{"injectables/DiscordService.html":{}}}],["process.env.discord_webhook_url",{"_index":357,"title":{},"body":{"injectables/DiscordService.html":{}}}],["process.env.email_host",{"_index":397,"title":{},"body":{"injectables/EmailService.html":{}}}],["process.env.email_host_password",{"_index":403,"title":{},"body":{"injectables/EmailService.html":{}}}],["process.env.email_host_user",{"_index":401,"title":{},"body":{"injectables/EmailService.html":{}}}],["process.env.email_port",{"_index":399,"title":{},"body":{"injectables/EmailService.html":{}}}],["process.env.frontend_url}\\n\\n",{"_index":62,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["process.env.frontend_url}login/${challenge",{"_index":421,"title":{},"body":{"injectables/EmailService.html":{}}}],["process.env.frontend_url}login/${userdb.challenge",{"_index":317,"title":{},"body":{"injectables/AuthService.html":{}}}],["process.env.frontend_url}reset/${challenge",{"_index":422,"title":{},"body":{"injectables/EmailService.html":{}}}],["process.env.jwt_expiration",{"_index":262,"title":{},"body":{"modules/AuthModule.html":{}}}],["process.env.jwt_secret",{"_index":259,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["process.env.omdb_api_key",{"_index":696,"title":{},"body":{"injectables/MovieService.html":{}}}],["process.env.project_name",{"_index":388,"title":{},"body":{"injectables/EmailService.html":{}}}],["production",{"_index":1415,"title":{},"body":{"index.html":{}}}],["profile",{"_index":844,"title":{},"body":{"controllers/UserController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["profiledto",{"_index":793,"title":{"classes/ProfileDto.html":{}},"body":{"classes/ProfileDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["profileview",{"_index":1628,"title":{},"body":{"miscellaneous/variables.html":{}}}],["project",{"_index":1291,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["project_name",{"_index":368,"title":{},"body":{"injectables/EmailService.html":{},"miscellaneous/variables.html":{}}}],["projects",{"_index":1325,"title":{},"body":{"index.html":{}}}],["promise",{"_index":172,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MovieController.html":{},"injectables/PasswordService.html":{},"controllers/UserController.html":{},"injectables/UserDBService.html":{},"controllers/VoteController.html":{}}}],["promise.all(movies.map(async",{"_index":701,"title":{},"body":{"injectables/MovieService.html":{}}}],["promise.all(watchlist.map(async",{"_index":744,"title":{},"body":{"injectables/MovieService.html":{},"injectables/UserService.html":{}}}],["properties",{"_index":8,"title":{"properties.html":{}},"body":{"injectables/AnnounceJob.html":{},"injectables/DiscordService.html":{},"classes/EmailOptInDto.html":{},"injectables/EmailService.html":{},"interfaces/JwtUser.html":{},"classes/LoginDto.html":{},"interfaces/MovieExtType.html":{},"injectables/MovieService.html":{},"classes/PasswordDto.html":{},"classes/PasswordNewDto.html":{},"classes/ProfileDto.html":{},"classes/RegisterDto.html":{},"classes/ResDto.html":{},"injectables/VoteService.html":{},"injectables/WatchListJob.html":{},"interfaces/WatchlistExtType.html":{},"properties.html":{}}}],["propose",{"_index":1553,"title":{},"body":{"miscellaneous/variables.html":{}}}],["proposed_movies",{"_index":949,"title":{},"body":{"injectables/UserService.html":{}}}],["proposer",{"_index":585,"title":{},"body":{"controllers/MovieController.html":{},"interfaces/MovieExtType.html":{},"injectables/MovieService.html":{}}}],["proposer'})@apibearerauth()@useguards(jwtauthguard)@delete(':imdb_id",{"_index":567,"title":{},"body":{"controllers/MovieController.html":{}}}],["proposer_id",{"_index":649,"title":{},"body":{"injectables/MovieDBService.html":{},"interfaces/MovieExtType.html":{},"injectables/MovieService.html":{}}}],["provided",{"_index":1467,"title":{},"body":{"license.html":{}}}],["providers",{"_index":246,"title":{},"body":{"modules/AuthModule.html":{},"modules/EventModule.html":{},"modules/HistoryDBModule.html":{},"modules/MovieDBModule.html":{},"modules/MovieModule.html":{},"modules/UserDBModule.html":{},"modules/UserModule.html":{},"modules/VoteDBModule.html":{},"modules/VoteModule.html":{},"modules/WatchListDBModule.html":{}}}],["providing",{"_index":167,"title":{},"body":{"controllers/AuthController.html":{}}}],["public",{"_index":840,"title":{},"body":{"controllers/UserController.html":{}}}],["publish",{"_index":1451,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":1476,"title":{},"body":{"license.html":{}}}],["pw_reset",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["pw_reset(@param('challenge",{"_index":235,"title":{},"body":{"controllers/AuthController.html":{}}}],["pw_reset(challenge",{"_index":185,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["pw_reset_request",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["pw_reset_request(@param('username",{"_index":232,"title":{},"body":{"controllers/AuthController.html":{}}}],["pw_reset_request(username",{"_index":191,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["reactive",{"_index":1633,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reacts",{"_index":1316,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":10,"title":{},"body":{"injectables/AnnounceJob.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"injectables/EmailService.html":{},"injectables/GravatarService.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"controllers/MovieController.html":{},"injectables/MovieDBService.html":{},"injectables/MovieService.html":{},"controllers/UserController.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"injectables/VoteDBService.html":{},"injectables/VoteService.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{}}}],["reflect",{"_index":1219,"title":{},"body":{"dependencies.html":{}}}],["register",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["register(@body",{"_index":226,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(body",{"_index":195,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(user",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{}}}],["registerdto",{"_index":196,"title":{"classes/RegisterDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RegisterDto.html":{},"coverage.html":{}}}],["registerview",{"_index":1627,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registration",{"_index":1246,"title":{},"body":{"index.html":{}}}],["related",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MovieController.html":{},"controllers/UserController.html":{}}}],["remove",{"_index":564,"title":{},"body":{"controllers/MovieController.html":{},"index.html":{}}}],["remove_cookie",{"_index":1157,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["rename",{"_index":1278,"title":{},"body":{"index.html":{}}}],["req",{"_index":544,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["request",{"_index":192,"title":{},"body":{"controllers/AuthController.html":{},"injectables/EmailService.html":{},"miscellaneous/variables.html":{}}}],["request.user",{"_index":1660,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requests",{"_index":1361,"title":{},"body":{"index.html":{}}}],["require(\"nodemailer",{"_index":391,"title":{},"body":{"injectables/EmailService.html":{},"miscellaneous/variables.html":{}}}],["require('./../package.json",{"_index":1655,"title":{},"body":{"miscellaneous/variables.html":{}}}],["require('bcrypt",{"_index":773,"title":{},"body":{"injectables/PasswordService.html":{},"miscellaneous/variables.html":{}}}],["res",{"_index":540,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["resdto",{"_index":209,"title":{"classes/ResDto.html":{}},"body":{"controllers/AuthController.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"classes/ResDto.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["reset",{"_index":101,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/EmailService.html":{},"modules/EventModule.html":{},"modules/HistoryDBModule.html":{},"modules/MovieDBModule.html":{},"modules/MovieModule.html":{},"modules/UserDBModule.html":{},"modules/UserModule.html":{},"modules/VoteDBModule.html":{},"modules/VoteModule.html":{},"modules/WatchListDBModule.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["reset/:challenge",{"_index":1625,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reset_request",{"_index":1623,"title":{},"body":{"miscellaneous/variables.html":{}}}],["resetrequestview",{"_index":1624,"title":{},"body":{"miscellaneous/variables.html":{}}}],["resetview",{"_index":1626,"title":{},"body":{"miscellaneous/variables.html":{}}}],["resolvers",{"_index":136,"title":{},"body":{"modules/AppModule.html":{}}}],["responsive",{"_index":1251,"title":{},"body":{"index.html":{}}}],["rest",{"_index":1257,"title":{},"body":{"index.html":{}}}],["restriction",{"_index":1445,"title":{},"body":{"license.html":{}}}],["result",{"_index":302,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["results",{"_index":87,"title":{},"body":{"injectables/AnnounceJob.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"classes/EmailOptInDto.html":{},"injectables/EmailService.html":{},"modules/EventModule.html":{},"injectables/GravatarService.html":{},"modules/HistoryDBModule.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/JwtUser.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoginDto.html":{},"controllers/MovieController.html":{},"modules/MovieDBModule.html":{},"injectables/MovieDBService.html":{},"interfaces/MovieExtType.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"classes/PasswordDto.html":{},"classes/PasswordNewDto.html":{},"injectables/PasswordService.html":{},"injectables/PrismaService.html":{},"classes/ProfileDto.html":{},"classes/RegisterDto.html":{},"classes/ResDto.html":{},"controllers/UserController.html":{},"modules/UserDBModule.html":{},"injectables/UserDBService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"modules/VoteDBModule.html":{},"injectables/VoteDBService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"modules/WatchListDBModule.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{},"interfaces/WatchlistExtType.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":223,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"injectables/EmailService.html":{},"injectables/GravatarService.html":{},"injectables/HistoryDBService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MovieController.html":{},"injectables/MovieDBService.html":{},"injectables/MovieService.html":{},"injectables/PasswordService.html":{},"controllers/UserController.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"injectables/VoteDBService.html":{},"injectables/VoteService.html":{},"injectables/WatchListDBService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":31,"title":{},"body":{"injectables/AnnounceJob.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"injectables/EmailService.html":{},"injectables/GravatarService.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"controllers/MovieController.html":{},"injectables/MovieDBService.html":{},"injectables/MovieService.html":{},"injectables/PasswordService.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"injectables/VoteDBService.html":{},"injectables/VoteService.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{}}}],["rights",{"_index":1448,"title":{},"body":{"license.html":{}}}],["rimraf",{"_index":1222,"title":{},"body":{"dependencies.html":{}}}],["root",{"_index":1297,"title":{},"body":{"index.html":{}}}],["rootpath",{"_index":142,"title":{},"body":{"modules/AppModule.html":{}}}],["round_duration_ms",{"_index":1137,"title":{},"body":{"injectables/WatchListJob.html":{}}}],["route",{"_index":1232,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["router",{"_index":1150,"title":{},"body":{"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["routes",{"_index":155,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MovieController.html":{},"controllers/UserController.html":{},"controllers/VoteController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["routes/auth/auth.module",{"_index":105,"title":{},"body":{"modules/AppModule.html":{}}}],["routes/movie/movie.module",{"_index":110,"title":{},"body":{"modules/AppModule.html":{}}}],["routes/user/user.module",{"_index":106,"title":{},"body":{"modules/AppModule.html":{}}}],["routes/vote/vote.module",{"_index":111,"title":{},"body":{"modules/AppModule.html":{}}}],["run",{"_index":15,"title":{},"body":{"injectables/AnnounceJob.html":{},"injectables/HistoryJob.html":{},"injectables/WatchListJob.html":{},"index.html":{}}}],["runtime",{"_index":727,"title":{},"body":{"injectables/MovieService.html":{}}}],["rxjs",{"_index":1224,"title":{},"body":{"dependencies.html":{}}}],["same",{"_index":1581,"title":{},"body":{"miscellaneous/variables.html":{}}}],["save",{"_index":674,"title":{},"body":{"injectables/MovieService.html":{}}}],["save(imdb_id",{"_index":682,"title":{},"body":{"injectables/MovieService.html":{}}}],["save_vote",{"_index":993,"title":{},"body":{"controllers/VoteController.html":{}}}],["save_vote(@user",{"_index":1015,"title":{},"body":{"controllers/VoteController.html":{}}}],["save_vote(user",{"_index":1003,"title":{},"body":{"controllers/VoteController.html":{}}}],["saved",{"_index":836,"title":{},"body":{"controllers/UserController.html":{}}}],["schaut",{"_index":1433,"title":{},"body":{"license.html":{}}}],["schedule",{"_index":1558,"title":{},"body":{"miscellaneous/variables.html":{}}}],["schedule_history",{"_index":1570,"title":{},"body":{"miscellaneous/variables.html":{}}}],["schedule_start",{"_index":1565,"title":{},"body":{"miscellaneous/variables.html":{}}}],["schedule_watchlist",{"_index":1554,"title":{},"body":{"miscellaneous/variables.html":{}}}],["schedulemodule",{"_index":113,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulemodule.forroot",{"_index":145,"title":{},"body":{"modules/AppModule.html":{}}}],["schema",{"_index":1304,"title":{},"body":{"index.html":{}}}],["scheme",{"_index":1420,"title":{},"body":{"index.html":{}}}],["secret",{"_index":258,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["secretorkey",{"_index":519,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["section",{"_index":1288,"title":{},"body":{"index.html":{}}}],["secure",{"_index":400,"title":{},"body":{"injectables/EmailService.html":{}}}],["see",{"_index":1286,"title":{},"body":{"index.html":{}}}],["select",{"_index":1061,"title":{},"body":{"injectables/VoteDBService.html":{},"index.html":{}}}],["sell",{"_index":1455,"title":{},"body":{"license.html":{}}}],["send",{"_index":1585,"title":{},"body":{"miscellaneous/variables.html":{}}}],["send_all_opt_in",{"_index":372,"title":{},"body":{"injectables/EmailService.html":{}}}],["send_all_opt_in(body",{"_index":380,"title":{},"body":{"injectables/EmailService.html":{}}}],["send_announce",{"_index":16,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["send_announce(watchlist",{"_index":32,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["send_challenge",{"_index":373,"title":{},"body":{"injectables/EmailService.html":{}}}],["send_challenge(dest_mail",{"_index":382,"title":{},"body":{"injectables/EmailService.html":{}}}],["send_message",{"_index":345,"title":{},"body":{"injectables/DiscordService.html":{}}}],["send_message(message",{"_index":347,"title":{},"body":{"injectables/DiscordService.html":{}}}],["send_password_reset",{"_index":374,"title":{},"body":{"injectables/EmailService.html":{}}}],["send_password_reset(dest_mail",{"_index":386,"title":{},"body":{"injectables/EmailService.html":{}}}],["sends",{"_index":1560,"title":{},"body":{"miscellaneous/variables.html":{}}}],["served",{"_index":1379,"title":{},"body":{"index.html":{}}}],["server",{"_index":1294,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["serveroot",{"_index":140,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticmodule",{"_index":107,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticmodule.forroot",{"_index":139,"title":{},"body":{"modules/AppModule.html":{}}}],["services",{"_index":1353,"title":{},"body":{"index.html":{}}}],["set",{"_index":1284,"title":{},"body":{"index.html":{}}}],["set/unset",{"_index":829,"title":{},"body":{"controllers/UserController.html":{}}}],["set_cookie",{"_index":1158,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["shall",{"_index":1463,"title":{},"body":{"license.html":{}}}],["show",{"_index":1381,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["show_alert",{"_index":320,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MovieService.html":{},"classes/ResDto.html":{},"injectables/UserService.html":{}}}],["shown",{"_index":1386,"title":{},"body":{"index.html":{}}}],["shows",{"_index":1404,"title":{},"body":{"index.html":{}}}],["siehe",{"_index":60,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["sign",{"_index":1536,"title":{},"body":{"miscellaneous/variables.html":{}}}],["signoptions",{"_index":260,"title":{},"body":{"modules/AuthModule.html":{}}}],["simply",{"_index":1326,"title":{},"body":{"index.html":{}}}],["singe",{"_index":1402,"title":{},"body":{"index.html":{}}}],["small",{"_index":1339,"title":{},"body":{"index.html":{}}}],["smtp",{"_index":1584,"title":{},"body":{"miscellaneous/variables.html":{}}}],["software",{"_index":1442,"title":{},"body":{"license.html":{}}}],["source",{"_index":4,"title":{},"body":{"injectables/AnnounceJob.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"classes/EmailOptInDto.html":{},"injectables/EmailService.html":{},"modules/EventModule.html":{},"injectables/GravatarService.html":{},"modules/HistoryDBModule.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/JwtUser.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoginDto.html":{},"controllers/MovieController.html":{},"modules/MovieDBModule.html":{},"injectables/MovieDBService.html":{},"interfaces/MovieExtType.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"classes/PasswordDto.html":{},"classes/PasswordNewDto.html":{},"injectables/PasswordService.html":{},"injectables/PrismaService.html":{},"classes/ProfileDto.html":{},"classes/RegisterDto.html":{},"classes/ResDto.html":{},"controllers/UserController.html":{},"modules/UserDBModule.html":{},"injectables/UserDBService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"modules/VoteDBModule.html":{},"injectables/VoteDBService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"modules/WatchListDBModule.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{},"interfaces/WatchlistExtType.html":{}}}],["special",{"_index":1411,"title":{},"body":{"index.html":{}}}],["specific",{"_index":577,"title":{},"body":{"controllers/MovieController.html":{}}}],["spendenbasis!\\n\\n",{"_index":69,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["src",{"_index":1323,"title":{},"body":{"index.html":{}}}],["src/.../config.validation.ts",{"_index":1511,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../cron.pattern.ts",{"_index":1512,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../discord_webhook.pattern.ts",{"_index":1513,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../email.service.ts",{"_index":1517,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../i18n.generated.ts",{"_index":1508,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../imdb_id.pattern.ts",{"_index":1515,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1228,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../name.pattern.ts",{"_index":1516,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../password.pattern.ts",{"_index":1518,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../password.service.ts",{"_index":1510,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.decorator.ts",{"_index":1521,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../username.pattern.ts",{"_index":1522,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["src/common/db_services/histroy/historydb.module.ts",{"_index":459,"title":{},"body":{"modules/HistoryDBModule.html":{}}}],["src/common/db_services/histroy/historydb.service.ts",{"_index":463,"title":{},"body":{"injectables/HistoryDBService.html":{},"coverage.html":{}}}],["src/common/db_services/histroy/historydb.service.ts:10",{"_index":472,"title":{},"body":{"injectables/HistoryDBService.html":{}}}],["src/common/db_services/histroy/historydb.service.ts:14",{"_index":471,"title":{},"body":{"injectables/HistoryDBService.html":{}}}],["src/common/db_services/histroy/historydb.service.ts:18",{"_index":474,"title":{},"body":{"injectables/HistoryDBService.html":{}}}],["src/common/db_services/histroy/historydb.service.ts:6",{"_index":467,"title":{},"body":{"injectables/HistoryDBService.html":{}}}],["src/common/db_services/movies/moviedb.module.ts",{"_index":623,"title":{},"body":{"modules/MovieDBModule.html":{}}}],["src/common/db_services/movies/moviedb.service.ts",{"_index":625,"title":{},"body":{"injectables/MovieDBService.html":{},"coverage.html":{}}}],["src/common/db_services/movies/moviedb.service.ts:10",{"_index":639,"title":{},"body":{"injectables/MovieDBService.html":{}}}],["src/common/db_services/movies/moviedb.service.ts:16",{"_index":644,"title":{},"body":{"injectables/MovieDBService.html":{}}}],["src/common/db_services/movies/moviedb.service.ts:22",{"_index":640,"title":{},"body":{"injectables/MovieDBService.html":{}}}],["src/common/db_services/movies/moviedb.service.ts:26",{"_index":645,"title":{},"body":{"injectables/MovieDBService.html":{}}}],["src/common/db_services/movies/moviedb.service.ts:30",{"_index":642,"title":{},"body":{"injectables/MovieDBService.html":{}}}],["src/common/db_services/movies/moviedb.service.ts:36",{"_index":631,"title":{},"body":{"injectables/MovieDBService.html":{}}}],["src/common/db_services/movies/moviedb.service.ts:40",{"_index":633,"title":{},"body":{"injectables/MovieDBService.html":{}}}],["src/common/db_services/movies/moviedb.service.ts:44",{"_index":636,"title":{},"body":{"injectables/MovieDBService.html":{}}}],["src/common/db_services/movies/moviedb.service.ts:6",{"_index":629,"title":{},"body":{"injectables/MovieDBService.html":{}}}],["src/common/db_services/prisma.service.ts",{"_index":781,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/common/db_services/prisma.service.ts:10",{"_index":787,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/common/db_services/prisma.service.ts:6",{"_index":789,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/common/db_services/users/userdb.module.ts",{"_index":885,"title":{},"body":{"modules/UserDBModule.html":{}}}],["src/common/db_services/users/userdb.service.ts",{"_index":888,"title":{},"body":{"injectables/UserDBService.html":{},"coverage.html":{}}}],["src/common/db_services/users/userdb.service.ts:11",{"_index":899,"title":{},"body":{"injectables/UserDBService.html":{}}}],["src/common/db_services/users/userdb.service.ts:19",{"_index":904,"title":{},"body":{"injectables/UserDBService.html":{}}}],["src/common/db_services/users/userdb.service.ts:23",{"_index":901,"title":{},"body":{"injectables/UserDBService.html":{}}}],["src/common/db_services/users/userdb.service.ts:27",{"_index":902,"title":{},"body":{"injectables/UserDBService.html":{}}}],["src/common/db_services/users/userdb.service.ts:31",{"_index":894,"title":{},"body":{"injectables/UserDBService.html":{}}}],["src/common/db_services/users/userdb.service.ts:36",{"_index":907,"title":{},"body":{"injectables/UserDBService.html":{}}}],["src/common/db_services/users/userdb.service.ts:47",{"_index":897,"title":{},"body":{"injectables/UserDBService.html":{}}}],["src/common/db_services/users/userdb.service.ts:7",{"_index":892,"title":{},"body":{"injectables/UserDBService.html":{}}}],["src/common/db_services/votes/votedb.module.ts",{"_index":1022,"title":{},"body":{"modules/VoteDBModule.html":{}}}],["src/common/db_services/votes/votedb.service.ts",{"_index":1024,"title":{},"body":{"injectables/VoteDBService.html":{},"coverage.html":{}}}],["src/common/db_services/votes/votedb.service.ts:10",{"_index":1043,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["src/common/db_services/votes/votedb.service.ts:16",{"_index":1054,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["src/common/db_services/votes/votedb.service.ts:25",{"_index":1056,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["src/common/db_services/votes/votedb.service.ts:33",{"_index":1048,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["src/common/db_services/votes/votedb.service.ts:39",{"_index":1052,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["src/common/db_services/votes/votedb.service.ts:46",{"_index":1050,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["src/common/db_services/votes/votedb.service.ts:53",{"_index":1045,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["src/common/db_services/votes/votedb.service.ts:6",{"_index":1032,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["src/common/db_services/votes/votedb.service.ts:68",{"_index":1034,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["src/common/db_services/votes/votedb.service.ts:72",{"_index":1037,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["src/common/db_services/votes/votedb.service.ts:76",{"_index":1039,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["src/common/db_services/votes/votedb.service.ts:80",{"_index":1041,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["src/common/db_services/watchlist/watchlistdb.module.ts",{"_index":1106,"title":{},"body":{"modules/WatchListDBModule.html":{}}}],["src/common/db_services/watchlist/watchlistdb.service.ts",{"_index":1108,"title":{},"body":{"injectables/WatchListDBService.html":{},"coverage.html":{}}}],["src/common/db_services/watchlist/watchlistdb.service.ts:10",{"_index":1113,"title":{},"body":{"injectables/WatchListDBService.html":{}}}],["src/common/db_services/watchlist/watchlistdb.service.ts:14",{"_index":1111,"title":{},"body":{"injectables/WatchListDBService.html":{}}}],["src/common/db_services/watchlist/watchlistdb.service.ts:18",{"_index":1112,"title":{},"body":{"injectables/WatchListDBService.html":{}}}],["src/common/db_services/watchlist/watchlistdb.service.ts:6",{"_index":1109,"title":{},"body":{"injectables/WatchListDBService.html":{}}}],["src/common/decorators/user.decorator.ts",{"_index":1166,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/event_service/event.module.ts",{"_index":432,"title":{},"body":{"modules/EventModule.html":{}}}],["src/common/event_service/jobs/announce.job.ts",{"_index":6,"title":{},"body":{"injectables/AnnounceJob.html":{},"coverage.html":{}}}],["src/common/event_service/jobs/announce.job.ts:11",{"_index":36,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["src/common/event_service/jobs/announce.job.ts:12",{"_index":24,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["src/common/event_service/jobs/announce.job.ts:28",{"_index":30,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["src/common/event_service/jobs/announce.job.ts:42",{"_index":34,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["src/common/event_service/jobs/history.job.ts",{"_index":480,"title":{},"body":{"injectables/HistoryJob.html":{},"coverage.html":{}}}],["src/common/event_service/jobs/history.job.ts:10",{"_index":483,"title":{},"body":{"injectables/HistoryJob.html":{}}}],["src/common/event_service/jobs/history.job.ts:18",{"_index":485,"title":{},"body":{"injectables/HistoryJob.html":{}}}],["src/common/event_service/jobs/watchlist.job.ts",{"_index":1117,"title":{},"body":{"injectables/WatchListJob.html":{},"coverage.html":{}}}],["src/common/event_service/jobs/watchlist.job.ts:13",{"_index":1124,"title":{},"body":{"injectables/WatchListJob.html":{}}}],["src/common/event_service/jobs/watchlist.job.ts:14",{"_index":1121,"title":{},"body":{"injectables/WatchListJob.html":{}}}],["src/common/event_service/jobs/watchlist.job.ts:22",{"_index":1122,"title":{},"body":{"injectables/WatchListJob.html":{}}}],["src/common/middleware/logger.middleware.ts",{"_index":537,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"coverage.html":{}}}],["src/common/middleware/logger.middleware.ts:5",{"_index":543,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["src/common/util_services/discord.service.ts",{"_index":342,"title":{},"body":{"injectables/DiscordService.html":{},"coverage.html":{}}}],["src/common/util_services/discord.service.ts:15",{"_index":348,"title":{},"body":{"injectables/DiscordService.html":{}}}],["src/common/util_services/discord.service.ts:6",{"_index":352,"title":{},"body":{"injectables/DiscordService.html":{}}}],["src/common/util_services/discord.service.ts:7",{"_index":346,"title":{},"body":{"injectables/DiscordService.html":{}}}],["src/common/util_services/email.service.ts",{"_index":367,"title":{},"body":{"injectables/EmailService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/util_services/email.service.ts:10",{"_index":389,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/common/util_services/email.service.ts:11",{"_index":375,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/common/util_services/email.service.ts:25",{"_index":384,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/common/util_services/email.service.ts:35",{"_index":387,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/common/util_services/email.service.ts:45",{"_index":381,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/common/util_services/email.service.ts:57",{"_index":377,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/common/util_services/email.service.ts:61",{"_index":379,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/common/util_services/gravatar.service.ts",{"_index":442,"title":{},"body":{"injectables/GravatarService.html":{},"coverage.html":{}}}],["src/common/util_services/gravatar.service.ts:5",{"_index":445,"title":{},"body":{"injectables/GravatarService.html":{}}}],["src/common/util_services/gravatar.service.ts:9",{"_index":447,"title":{},"body":{"injectables/GravatarService.html":{}}}],["src/common/util_services/password.service.ts",{"_index":763,"title":{},"body":{"injectables/PasswordService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/util_services/password.service.ts:13",{"_index":771,"title":{},"body":{"injectables/PasswordService.html":{}}}],["src/common/util_services/password.service.ts:17",{"_index":767,"title":{},"body":{"injectables/PasswordService.html":{}}}],["src/common/util_services/password.service.ts:9",{"_index":769,"title":{},"body":{"injectables/PasswordService.html":{}}}],["src/common/validation/config.validation.ts",{"_index":1170,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/validation/patterns/cron.pattern.ts",{"_index":1171,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/validation/patterns/discord_webhook.pattern.ts",{"_index":1173,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/validation/patterns/imdb_id.pattern.ts",{"_index":1175,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/validation/patterns/name.pattern.ts",{"_index":1176,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/validation/patterns/password.pattern.ts",{"_index":1177,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/validation/patterns/username.pattern.ts",{"_index":1178,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/locales",{"_index":134,"title":{},"body":{"modules/AppModule.html":{}}}],["src/main.ts",{"_index":1179,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/routes/auth/auth.controller.ts",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/routes/auth/auth.controller.ts:25",{"_index":184,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/routes/auth/auth.controller.ts:31",{"_index":198,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/routes/auth/auth.controller.ts:37",{"_index":170,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/routes/auth/auth.controller.ts:43",{"_index":194,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/routes/auth/auth.controller.ts:49",{"_index":190,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/routes/auth/auth.guard.ts",{"_index":525,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["src/routes/auth/auth.module.ts",{"_index":245,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/routes/auth/auth.service.ts",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/routes/auth/auth.service.ts:105",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/routes/auth/auth.service.ts:22",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/routes/auth/auth.service.ts:31",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/routes/auth/auth.service.ts:48",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/routes/auth/auth.service.ts:55",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/routes/auth/auth.service.ts:76",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/routes/auth/auth.service.ts:90",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/routes/auth/jwt",{"_index":500,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/routes/auth/jwt.stategy.ts",{"_index":505,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/routes/auth/jwt.stategy.ts:16",{"_index":509,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/routes/auth/jwt.stategy.ts:7",{"_index":507,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/routes/auth/local.strategy.ts",{"_index":527,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/routes/auth/local.strategy.ts:14",{"_index":531,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/routes/auth/local.strategy.ts:9",{"_index":529,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/routes/movie/movie.controller.ts",{"_index":555,"title":{},"body":{"controllers/MovieController.html":{},"coverage.html":{}}}],["src/routes/movie/movie.controller.ts:26",{"_index":571,"title":{},"body":{"controllers/MovieController.html":{}}}],["src/routes/movie/movie.controller.ts:32",{"_index":581,"title":{},"body":{"controllers/MovieController.html":{}}}],["src/routes/movie/movie.controller.ts:38",{"_index":574,"title":{},"body":{"controllers/MovieController.html":{}}}],["src/routes/movie/movie.controller.ts:46",{"_index":579,"title":{},"body":{"controllers/MovieController.html":{}}}],["src/routes/movie/movie.controller.ts:54",{"_index":587,"title":{},"body":{"controllers/MovieController.html":{}}}],["src/routes/movie/movie.controller.ts:62",{"_index":568,"title":{},"body":{"controllers/MovieController.html":{}}}],["src/routes/movie/movie.module.ts",{"_index":664,"title":{},"body":{"modules/MovieModule.html":{}}}],["src/routes/movie/movie.service.ts",{"_index":672,"title":{},"body":{"injectables/MovieService.html":{},"coverage.html":{}}}],["src/routes/movie/movie.service.ts:108",{"_index":677,"title":{},"body":{"injectables/MovieService.html":{}}}],["src/routes/movie/movie.service.ts:125",{"_index":681,"title":{},"body":{"injectables/MovieService.html":{}}}],["src/routes/movie/movie.service.ts:141",{"_index":680,"title":{},"body":{"injectables/MovieService.html":{}}}],["src/routes/movie/movie.service.ts:20",{"_index":685,"title":{},"body":{"injectables/MovieService.html":{}}}],["src/routes/movie/movie.service.ts:21",{"_index":676,"title":{},"body":{"injectables/MovieService.html":{}}}],["src/routes/movie/movie.service.ts:32",{"_index":678,"title":{},"body":{"injectables/MovieService.html":{}}}],["src/routes/movie/movie.service.ts:40",{"_index":679,"title":{},"body":{"injectables/MovieService.html":{}}}],["src/routes/movie/movie.service.ts:60",{"_index":683,"title":{},"body":{"injectables/MovieService.html":{}}}],["src/routes/user/user.controller.ts",{"_index":807,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/routes/user/user.controller.ts:29",{"_index":834,"title":{},"body":{"controllers/UserController.html":{}}}],["src/routes/user/user.controller.ts:37",{"_index":846,"title":{},"body":{"controllers/UserController.html":{}}}],["src/routes/user/user.controller.ts:45",{"_index":831,"title":{},"body":{"controllers/UserController.html":{}}}],["src/routes/user/user.controller.ts:53",{"_index":827,"title":{},"body":{"controllers/UserController.html":{}}}],["src/routes/user/user.controller.ts:61",{"_index":838,"title":{},"body":{"controllers/UserController.html":{}}}],["src/routes/user/user.controller.ts:69",{"_index":820,"title":{},"body":{"controllers/UserController.html":{}}}],["src/routes/user/user.controller.ts:77",{"_index":817,"title":{},"body":{"controllers/UserController.html":{}}}],["src/routes/user/user.controller.ts:85",{"_index":824,"title":{},"body":{"controllers/UserController.html":{}}}],["src/routes/user/user.controller.ts:91",{"_index":842,"title":{},"body":{"controllers/UserController.html":{}}}],["src/routes/user/user.module.ts",{"_index":921,"title":{},"body":{"modules/UserModule.html":{}}}],["src/routes/user/user.service.ts",{"_index":924,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/routes/user/user.service.ts:126",{"_index":938,"title":{},"body":{"injectables/UserService.html":{}}}],["src/routes/user/user.service.ts:19",{"_index":928,"title":{},"body":{"injectables/UserService.html":{}}}],["src/routes/user/user.service.ts:29",{"_index":943,"title":{},"body":{"injectables/UserService.html":{}}}],["src/routes/user/user.service.ts:34",{"_index":945,"title":{},"body":{"injectables/UserService.html":{}}}],["src/routes/user/user.service.ts:39",{"_index":947,"title":{},"body":{"injectables/UserService.html":{}}}],["src/routes/user/user.service.ts:46",{"_index":933,"title":{},"body":{"injectables/UserService.html":{}}}],["src/routes/user/user.service.ts:69",{"_index":941,"title":{},"body":{"injectables/UserService.html":{}}}],["src/routes/user/user.service.ts:78",{"_index":931,"title":{},"body":{"injectables/UserService.html":{}}}],["src/routes/user/user.service.ts:97",{"_index":936,"title":{},"body":{"injectables/UserService.html":{}}}],["src/routes/vote/vote.controller.ts",{"_index":990,"title":{},"body":{"controllers/VoteController.html":{},"coverage.html":{}}}],["src/routes/vote/vote.controller.ts:24",{"_index":1002,"title":{},"body":{"controllers/VoteController.html":{}}}],["src/routes/vote/vote.controller.ts:30",{"_index":997,"title":{},"body":{"controllers/VoteController.html":{}}}],["src/routes/vote/vote.controller.ts:38",{"_index":1004,"title":{},"body":{"controllers/VoteController.html":{}}}],["src/routes/vote/vote.controller.ts:46",{"_index":1007,"title":{},"body":{"controllers/VoteController.html":{}}}],["src/routes/vote/vote.module.ts",{"_index":1073,"title":{},"body":{"modules/VoteModule.html":{}}}],["src/routes/vote/vote.service.ts",{"_index":1075,"title":{},"body":{"injectables/VoteService.html":{},"coverage.html":{}}}],["src/routes/vote/vote.service.ts:12",{"_index":1077,"title":{},"body":{"injectables/VoteService.html":{}}}],["src/routes/vote/vote.service.ts:18",{"_index":1079,"title":{},"body":{"injectables/VoteService.html":{}}}],["src/routes/vote/vote.service.ts:26",{"_index":1080,"title":{},"body":{"injectables/VoteService.html":{}}}],["src/routes/vote/vote.service.ts:34",{"_index":1084,"title":{},"body":{"injectables/VoteService.html":{}}}],["src/routes/vote/vote.service.ts:52",{"_index":1082,"title":{},"body":{"injectables/VoteService.html":{}}}],["src/types/generated/i18n.generated",{"_index":693,"title":{},"body":{"injectables/MovieService.html":{}}}],["src/types/generated/i18n.generated.ts",{"_index":138,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/typealiases.html":{}}}],["src/types/jwtuser.type.ts",{"_index":524,"title":{},"body":{"interfaces/JwtUser.html":{},"coverage.html":{}}}],["src/types/movie.types/movie_ext.type.ts",{"_index":654,"title":{},"body":{"interfaces/MovieExtType.html":{},"coverage.html":{}}}],["src/types/movie.types/watchlist_ext.type.ts",{"_index":1143,"title":{},"body":{"interfaces/WatchlistExtType.html":{},"coverage.html":{}}}],["src/types/res.dto.ts",{"_index":803,"title":{},"body":{"classes/ResDto.html":{},"coverage.html":{}}}],["src/types/res.dto.ts:3",{"_index":804,"title":{},"body":{"classes/ResDto.html":{}}}],["src/types/res.dto.ts:4",{"_index":805,"title":{},"body":{"classes/ResDto.html":{}}}],["src/types/user.dto/email_opt_in.dto.ts",{"_index":363,"title":{},"body":{"classes/EmailOptInDto.html":{},"coverage.html":{}}}],["src/types/user.dto/email_opt_in.dto.ts:3",{"_index":366,"title":{},"body":{"classes/EmailOptInDto.html":{}}}],["src/types/user.dto/login.dto.ts",{"_index":551,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/types/user.dto/login.dto.ts:3",{"_index":553,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/types/user.dto/login.dto.ts:4",{"_index":552,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/types/user.dto/password.dto.ts",{"_index":753,"title":{},"body":{"classes/PasswordDto.html":{},"coverage.html":{}}}],["src/types/user.dto/password.dto.ts:3",{"_index":755,"title":{},"body":{"classes/PasswordDto.html":{}}}],["src/types/user.dto/password.dto.ts:4",{"_index":756,"title":{},"body":{"classes/PasswordDto.html":{}}}],["src/types/user.dto/password_new.dto.ts",{"_index":758,"title":{},"body":{"classes/PasswordNewDto.html":{},"coverage.html":{}}}],["src/types/user.dto/password_new.dto.ts:3",{"_index":762,"title":{},"body":{"classes/PasswordNewDto.html":{}}}],["src/types/user.dto/password_new.dto.ts:4",{"_index":760,"title":{},"body":{"classes/PasswordNewDto.html":{}}}],["src/types/user.dto/password_new.dto.ts:5",{"_index":761,"title":{},"body":{"classes/PasswordNewDto.html":{}}}],["src/types/user.dto/profile.dto.ts",{"_index":794,"title":{},"body":{"classes/ProfileDto.html":{},"coverage.html":{}}}],["src/types/user.dto/profile.dto.ts:3",{"_index":796,"title":{},"body":{"classes/ProfileDto.html":{}}}],["src/types/user.dto/profile.dto.ts:4",{"_index":797,"title":{},"body":{"classes/ProfileDto.html":{}}}],["src/types/user.dto/register.dto.ts",{"_index":798,"title":{},"body":{"classes/RegisterDto.html":{},"coverage.html":{}}}],["src/types/user.dto/register.dto.ts:3",{"_index":802,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/types/user.dto/register.dto.ts:4",{"_index":799,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/types/user.dto/register.dto.ts:5",{"_index":800,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/types/user.dto/register.dto.ts:6",{"_index":801,"title":{},"body":{"classes/RegisterDto.html":{}}}],["stack",{"_index":1238,"title":{},"body":{"index.html":{}}}],["start",{"_index":1330,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["start:dev",{"_index":1374,"title":{},"body":{"index.html":{}}}],["start:docs",{"_index":1387,"title":{},"body":{"index.html":{}}}],["start:prod",{"_index":1295,"title":{},"body":{"index.html":{}}}],["start_time",{"_index":80,"title":{},"body":{"injectables/AnnounceJob.html":{},"injectables/MovieService.html":{},"injectables/WatchListJob.html":{},"interfaces/WatchlistExtType.html":{}}}],["started",{"_index":73,"title":{"index.html":{},"license.html":{}},"body":{"injectables/AnnounceJob.html":{},"injectables/HistoryJob.html":{},"injectables/WatchListJob.html":{}}}],["startup",{"_index":1301,"title":{},"body":{"index.html":{}}}],["statements",{"_index":1147,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":109,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{},"index.html":{}}}],["statically",{"_index":1378,"title":{},"body":{"index.html":{}}}],["step",{"_index":1393,"title":{},"body":{"index.html":{}}}],["store",{"_index":1160,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["strategy",{"_index":511,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["string",{"_index":33,"title":{},"body":{"injectables/AnnounceJob.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"injectables/EmailService.html":{},"injectables/GravatarService.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"interfaces/JwtUser.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"controllers/MovieController.html":{},"injectables/MovieDBService.html":{},"interfaces/MovieExtType.html":{},"injectables/MovieService.html":{},"classes/PasswordDto.html":{},"classes/PasswordNewDto.html":{},"injectables/PasswordService.html":{},"classes/ProfileDto.html":{},"classes/RegisterDto.html":{},"classes/ResDto.html":{},"controllers/UserController.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"injectables/VoteDBService.html":{},"injectables/VoteService.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{},"interfaces/WatchlistExtType.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["string).next().todate",{"_index":1135,"title":{},"body":{"injectables/WatchListJob.html":{}}}],["structures",{"_index":1367,"title":{},"body":{"index.html":{}}}],["sub",{"_index":305,"title":{},"body":{"injectables/AuthService.html":{}}}],["subject",{"_index":406,"title":{},"body":{"injectables/EmailService.html":{},"license.html":{}}}],["sublicense",{"_index":1453,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":1465,"title":{},"body":{"license.html":{}}}],["success",{"_index":1638,"title":{},"body":{"miscellaneous/variables.html":{}}}],["summary",{"_index":219,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MovieController.html":{},"controllers/UserController.html":{},"controllers/VoteController.html":{}}}],["super",{"_index":515,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["support",{"_index":1260,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":1493,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1334,"title":{},"body":{"index.html":{}}}],["table",{"_index":1191,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1190,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":1066,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["team\\n",{"_index":414,"title":{},"body":{"injectables/EmailService.html":{}}}],["text",{"_index":407,"title":{},"body":{"injectables/EmailService.html":{}}}],["then((vote",{"_index":731,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.$connect",{"_index":790,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$on('beforeexit",{"_index":791,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.announce_discord",{"_index":48,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["this.announce_email",{"_index":70,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["this.announcejob.run",{"_index":1142,"title":{},"body":{"injectables/WatchListJob.html":{}}}],["this.authservice.confirm(challenge",{"_index":230,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.login(user",{"_index":224,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.pw_reset(challenge",{"_index":236,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.pw_reset_request(username",{"_index":233,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.register(body",{"_index":227,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser(username",{"_index":535,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.discordservice.send_message(this.announce_discord(watchlist",{"_index":85,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["this.emailservice.generate_challenge_url(new_challenge",{"_index":977,"title":{},"body":{"injectables/UserService.html":{}}}],["this.emailservice.generate_challenge_url(user.challenge",{"_index":297,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.emailservice.generate_pw_challenge_url(challenge",{"_index":331,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.emailservice.send_all_opt_in(this.announce_email(watchlist",{"_index":86,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["this.emailservice.send_challenge(user.username",{"_index":298,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["this.emailservice.send_password_reset(user.username",{"_index":332,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.enabled",{"_index":354,"title":{},"body":{"injectables/DiscordService.html":{}}}],["this.get(imdb_id",{"_index":719,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.gravatarservice.generate_gravatar_url(new_username",{"_index":975,"title":{},"body":{"injectables/UserService.html":{}}}],["this.gravatarservice.generate_gravatar_url(user.username",{"_index":960,"title":{},"body":{"injectables/UserService.html":{}}}],["this.historydbservice.add(data",{"_index":495,"title":{},"body":{"injectables/HistoryJob.html":{}}}],["this.histroydbservice.get_all",{"_index":752,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.histroydbservice.has(imdb_id",{"_index":711,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.imdb",{"_index":694,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.imdb.get",{"_index":697,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.jwtservice.sign(payload",{"_index":308,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.loading",{"_index":1640,"title":{},"body":{"miscellaneous/variables.html":{}}}],["this.logged_in",{"_index":1649,"title":{},"body":{"miscellaneous/variables.html":{}}}],["this.max_proposeable_movies",{"_index":716,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.max_votes",{"_index":1092,"title":{},"body":{"injectables/VoteService.html":{}}}],["this.moviedbservice.add(moviedb_data).then((movie",{"_index":729,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.moviedbservice.delete(imdb_id",{"_index":741,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.moviedbservice.delete(movie.imdb_id",{"_index":498,"title":{},"body":{"injectables/HistoryJob.html":{},"injectables/MovieService.html":{}}}],["this.moviedbservice.delete_all_proposed(user_id",{"_index":986,"title":{},"body":{"injectables/UserService.html":{}}}],["this.moviedbservice.get(imdb_id",{"_index":734,"title":{},"body":{"injectables/MovieService.html":{},"injectables/VoteService.html":{}}}],["this.moviedbservice.get(movie.imdb_id",{"_index":79,"title":{},"body":{"injectables/AnnounceJob.html":{},"injectables/HistoryJob.html":{},"injectables/WatchListJob.html":{}}}],["this.moviedbservice.get(watch_movie.imdb_id",{"_index":746,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.moviedbservice.get(wl.imdb_id",{"_index":981,"title":{},"body":{"injectables/UserService.html":{}}}],["this.moviedbservice.get_all",{"_index":700,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.moviedbservice.get_all_proposed(proposer_id)).length",{"_index":715,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.moviedbservice.get_all_proposed(user_id",{"_index":950,"title":{},"body":{"injectables/UserService.html":{}}}],["this.moviedbservice.has(imdb_id",{"_index":713,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.movieservice.delete(imdb_id",{"_index":619,"title":{},"body":{"controllers/MovieController.html":{}}}],["this.movieservice.get(imdb_id",{"_index":611,"title":{},"body":{"controllers/MovieController.html":{}}}],["this.movieservice.get_all",{"_index":603,"title":{},"body":{"controllers/MovieController.html":{}}}],["this.movieservice.get_history",{"_index":607,"title":{},"body":{"controllers/MovieController.html":{}}}],["this.movieservice.get_watchlist",{"_index":605,"title":{},"body":{"controllers/MovieController.html":{}}}],["this.movieservice.save(imdb_id",{"_index":615,"title":{},"body":{"controllers/MovieController.html":{}}}],["this.passwordservice.compare(password",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["this.passwordservice.compare(password_old",{"_index":966,"title":{},"body":{"injectables/UserService.html":{}}}],["this.passwordservice.hash(data.password",{"_index":913,"title":{},"body":{"injectables/UserDBService.html":{}}}],["this.passwordservice.hash(password",{"_index":338,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.passwordservice.hash(password_new",{"_index":967,"title":{},"body":{"injectables/UserService.html":{}}}],["this.passwordservice.hash_md5(trim",{"_index":452,"title":{},"body":{"injectables/GravatarService.html":{}}}],["this.pause_time",{"_index":1141,"title":{},"body":{"injectables/WatchListJob.html":{}}}],["this.prisma.history.count",{"_index":478,"title":{},"body":{"injectables/HistoryDBService.html":{}}}],["this.prisma.history.create",{"_index":477,"title":{},"body":{"injectables/HistoryDBService.html":{}}}],["this.prisma.history.findmany",{"_index":476,"title":{},"body":{"injectables/HistoryDBService.html":{}}}],["this.prisma.movie.count",{"_index":648,"title":{},"body":{"injectables/MovieDBService.html":{}}}],["this.prisma.movie.create",{"_index":650,"title":{},"body":{"injectables/MovieDBService.html":{}}}],["this.prisma.movie.delete",{"_index":651,"title":{},"body":{"injectables/MovieDBService.html":{}}}],["this.prisma.movie.deletemany",{"_index":652,"title":{},"body":{"injectables/MovieDBService.html":{}}}],["this.prisma.movie.findmany",{"_index":647,"title":{},"body":{"injectables/MovieDBService.html":{}}}],["this.prisma.movie.findunique",{"_index":646,"title":{},"body":{"injectables/MovieDBService.html":{}}}],["this.prisma.user.count",{"_index":910,"title":{},"body":{"injectables/UserDBService.html":{}}}],["this.prisma.user.create",{"_index":914,"title":{},"body":{"injectables/UserDBService.html":{}}}],["this.prisma.user.delete",{"_index":917,"title":{},"body":{"injectables/UserDBService.html":{}}}],["this.prisma.user.findmany",{"_index":911,"title":{},"body":{"injectables/UserDBService.html":{}}}],["this.prisma.user.findunique",{"_index":909,"title":{},"body":{"injectables/UserDBService.html":{}}}],["this.prisma.user.update",{"_index":916,"title":{},"body":{"injectables/UserDBService.html":{}}}],["this.prisma.vote.count",{"_index":1059,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["this.prisma.vote.create",{"_index":1067,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["this.prisma.vote.delete",{"_index":1068,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["this.prisma.vote.deletemany",{"_index":1069,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["this.prisma.vote.findfirst",{"_index":1058,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["this.prisma.vote.findmany",{"_index":1060,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["this.prisma.vote.findunique",{"_index":1057,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["this.prisma.vote.groupby",{"_index":1062,"title":{},"body":{"injectables/VoteDBService.html":{}}}],["this.prisma.watchlist.create",{"_index":1115,"title":{},"body":{"injectables/WatchListDBService.html":{}}}],["this.prisma.watchlist.delete",{"_index":1116,"title":{},"body":{"injectables/WatchListDBService.html":{}}}],["this.prisma.watchlist.findmany",{"_index":1114,"title":{},"body":{"injectables/WatchListDBService.html":{}}}],["this.project_name",{"_index":405,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.send_announce(output",{"_index":84,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["this.transporter",{"_index":394,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.transporter.sendmail",{"_index":404,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.userdbservice.create(payload",{"_index":316,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userdbservice.delete",{"_index":987,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userdbservice.get",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MovieService.html":{},"injectables/UserService.html":{}}}],["this.userdbservice.get({id",{"_index":721,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.userdbservice.get_all_opt_in",{"_index":418,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.userdbservice.has_user(new_username",{"_index":972,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userdbservice.update",{"_index":326,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["this.userservice.change_password(number(user.id",{"_index":875,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.change_profile(number(user.id",{"_index":858,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.change_username(number(user.id",{"_index":871,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.delete(number(user.id",{"_index":865,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.email_opt_in(number(user.id",{"_index":862,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.get(number(user.id",{"_index":855,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.get_public(number(user_id",{"_index":881,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.get_user_data(number(user.id",{"_index":868,"title":{},"body":{"controllers/UserController.html":{}}}],["this.votedbservice.add(votedb_data",{"_index":1097,"title":{},"body":{"injectables/VoteService.html":{}}}],["this.votedbservice.delete(votedb_data",{"_index":1101,"title":{},"body":{"injectables/VoteService.html":{}}}],["this.votedbservice.delete_all(imdb_id",{"_index":740,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.votedbservice.delete_all(movie.imdb_id",{"_index":496,"title":{},"body":{"injectables/HistoryJob.html":{}}}],["this.votedbservice.delete_all_user(user_id",{"_index":985,"title":{},"body":{"injectables/UserService.html":{}}}],["this.votedbservice.get_most_voted(this.num_of_movies",{"_index":1133,"title":{},"body":{"injectables/WatchListJob.html":{}}}],["this.votedbservice.get_num_of_votes(imdb_id",{"_index":1086,"title":{},"body":{"injectables/VoteService.html":{}}}],["this.votedbservice.get_num_of_votes(movie.imdb_id",{"_index":703,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.votedbservice.get_votes_movie(movie.imdb_id",{"_index":747,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.votedbservice.get_votes_user(user_id",{"_index":951,"title":{},"body":{"injectables/UserService.html":{}}}],["this.votedbservice.get_votes_user(user_id)).map(vote",{"_index":1088,"title":{},"body":{"injectables/VoteService.html":{}}}],["this.votedbservice.num_of(user_id",{"_index":1091,"title":{},"body":{"injectables/VoteService.html":{}}}],["this.voteservice.get_votes(imdb_id",{"_index":1014,"title":{},"body":{"controllers/VoteController.html":{}}}],["this.voteservice.get_votes_user(number(user.id",{"_index":1012,"title":{},"body":{"controllers/VoteController.html":{}}}],["this.voteservice.unvote(imdb_id",{"_index":1018,"title":{},"body":{"controllers/VoteController.html":{}}}],["this.voteservice.vote(imdb_id",{"_index":1016,"title":{},"body":{"controllers/VoteController.html":{}}}],["this.voteservice.vote(movie.imdb_id",{"_index":730,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.watchlistdbservice.add(data",{"_index":1136,"title":{},"body":{"injectables/WatchListJob.html":{}}}],["this.watchlistdbservice.delete(movie.imdb_id",{"_index":497,"title":{},"body":{"injectables/HistoryJob.html":{}}}],["this.watchlistdbservice.get_all",{"_index":76,"title":{},"body":{"injectables/AnnounceJob.html":{},"injectables/HistoryJob.html":{},"injectables/MovieService.html":{},"injectables/UserService.html":{}}}],["this.webhookclient",{"_index":355,"title":{},"body":{"injectables/DiscordService.html":{}}}],["this.webhookclient.send(message",{"_index":360,"title":{},"body":{"injectables/DiscordService.html":{}}}],["throw",{"_index":300,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"injectables/MovieService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["time",{"_index":1542,"title":{},"body":{"miscellaneous/variables.html":{}}}],["times",{"_index":1569,"title":{},"body":{"miscellaneous/variables.html":{}}}],["title",{"_index":492,"title":{},"body":{"injectables/HistoryJob.html":{},"interfaces/MovieExtType.html":{},"injectables/MovieService.html":{},"interfaces/WatchlistExtType.html":{}}}],["token",{"_index":181,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["tokens",{"_index":1537,"title":{},"body":{"miscellaneous/variables.html":{}}}],["top_movies",{"_index":1132,"title":{},"body":{"injectables/WatchListJob.html":{}}}],["tort",{"_index":1488,"title":{},"body":{"license.html":{}}}],["total",{"_index":1551,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transmission",{"_index":1368,"title":{},"body":{"index.html":{}}}],["transporter",{"_index":369,"title":{},"body":{"injectables/EmailService.html":{}}}],["transportoptions",{"_index":392,"title":{},"body":{"injectables/EmailService.html":{}}}],["trim",{"_index":449,"title":{},"body":{"injectables/GravatarService.html":{}}}],["true",{"_index":127,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"injectables/MovieService.html":{},"controllers/UserController.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{},"injectables/VoteDBService.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":314,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MovieService.html":{},"injectables/VoteService.html":{}}}],["ts",{"_index":358,"title":{},"body":{"injectables/DiscordService.html":{}}}],["tt[0",{"_index":1610,"title":{},"body":{"miscellaneous/variables.html":{}}}],["two",{"_index":1578,"title":{},"body":{"miscellaneous/variables.html":{}}}],["type",{"_index":28,"title":{},"body":{"injectables/AnnounceJob.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"classes/EmailOptInDto.html":{},"injectables/EmailService.html":{},"injectables/GravatarService.html":{},"injectables/HistoryDBService.html":{},"injectables/HistoryJob.html":{},"injectables/JwtStrategy.html":{},"interfaces/JwtUser.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoginDto.html":{},"controllers/MovieController.html":{},"injectables/MovieDBService.html":{},"interfaces/MovieExtType.html":{},"injectables/MovieService.html":{},"classes/PasswordDto.html":{},"classes/PasswordNewDto.html":{},"injectables/PasswordService.html":{},"injectables/PrismaService.html":{},"classes/ProfileDto.html":{},"classes/RegisterDto.html":{},"classes/ResDto.html":{},"controllers/UserController.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"injectables/VoteDBService.html":{},"injectables/VoteService.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{},"interfaces/WatchlistExtType.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1505,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types/generated/i18n.generated",{"_index":216,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"controllers/MovieController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"injectables/VoteService.html":{}}}],["types/jwtuser.type",{"_index":205,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"controllers/MovieController.html":{},"controllers/UserController.html":{},"controllers/VoteController.html":{}}}],["types/movie.types/movie_ext.type",{"_index":594,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{}}}],["types/movie.types/watchlist_ext.type",{"_index":596,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{}}}],["types/res.dto",{"_index":210,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"controllers/UserController.html":{}}}],["types/user.dto/email_opt_in.dto",{"_index":850,"title":{},"body":{"controllers/UserController.html":{}}}],["types/user.dto/login.dto",{"_index":211,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["types/user.dto/password.dto",{"_index":207,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["types/user.dto/password_new.dto",{"_index":851,"title":{},"body":{"controllers/UserController.html":{}}}],["types/user.dto/profile.dto",{"_index":849,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["types/user.dto/register.dto",{"_index":208,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["typescript",{"_index":1347,"title":{},"body":{"index.html":{}}}],["typesoutputpath",{"_index":137,"title":{},"body":{"modules/AppModule.html":{}}}],["ui",{"_index":1252,"title":{},"body":{"index.html":{}}}],["unauthorizedexception",{"_index":533,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["und",{"_index":66,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["under",{"_index":1418,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DiscordService.html":{},"injectables/HistoryDBService.html":{},"injectables/MovieDBService.html":{},"injectables/MovieService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/VoteDBService.html":{},"injectables/VoteService.html":{},"injectables/WatchListDBService.html":{},"miscellaneous/variables.html":{}}}],["unvote",{"_index":994,"title":{},"body":{"controllers/VoteController.html":{},"injectables/VoteService.html":{}}}],["unvote(@user",{"_index":1017,"title":{},"body":{"controllers/VoteController.html":{}}}],["unvote(imdb_id",{"_index":1081,"title":{},"body":{"injectables/VoteService.html":{}}}],["unvote(user",{"_index":1005,"title":{},"body":{"controllers/VoteController.html":{}}}],["up",{"_index":1382,"title":{},"body":{"index.html":{}}}],["update",{"_index":815,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserDBService.html":{}}}],["update(params",{"_index":905,"title":{},"body":{"injectables/UserDBService.html":{}}}],["update_loading(loading",{"_index":1639,"title":{},"body":{"miscellaneous/variables.html":{}}}],["update_logged_in",{"_index":1641,"title":{},"body":{"miscellaneous/variables.html":{}}}],["update_profile",{"_index":813,"title":{},"body":{"controllers/UserController.html":{}}}],["update_profile(@user",{"_index":857,"title":{},"body":{"controllers/UserController.html":{}}}],["update_profile(user",{"_index":843,"title":{},"body":{"controllers/UserController.html":{}}}],["url",{"_index":356,"title":{},"body":{"injectables/DiscordService.html":{},"miscellaneous/variables.html":{}}}],["usable",{"_index":1254,"title":{},"body":{"index.html":{}}}],["use",{"_index":538,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"index.html":{},"license.html":{}}}],["use(req",{"_index":539,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["use_gravatar",{"_index":795,"title":{},"body":{"classes/ProfileDto.html":{},"injectables/UserService.html":{}}}],["used",{"_index":1343,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["usefully",{"_index":1364,"title":{},"body":{"index.html":{}}}],["useguards",{"_index":199,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MovieController.html":{},"controllers/UserController.html":{},"controllers/VoteController.html":{}}}],["useguards(jwtauthguard",{"_index":608,"title":{},"body":{"controllers/MovieController.html":{},"controllers/UserController.html":{},"controllers/VoteController.html":{}}}],["useguards(localauthguard",{"_index":220,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":168,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/EmailService.html":{},"injectables/LocalStrategy.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"controllers/UserController.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"injectables/VoteDBService.html":{},"injectables/VoteService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["user'})@apibearerauth()@useguards(jwtauthguard)@delete",{"_index":826,"title":{},"body":{"controllers/UserController.html":{}}}],["user'})@post('register",{"_index":197,"title":{},"body":{"controllers/AuthController.html":{}}}],["user.controller",{"_index":922,"title":{},"body":{"modules/UserModule.html":{}}}],["user.id",{"_index":306,"title":{},"body":{"injectables/AuthService.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{}}}],["user.name",{"_index":299,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MovieService.html":{},"injectables/UserService.html":{}}}],["user.name},\\n\\n${body}\\ndear\\n${this.project_name",{"_index":420,"title":{},"body":{"injectables/EmailService.html":{}}}],["user.password",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["user.pw_reset",{"_index":336,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.service",{"_index":848,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user.username",{"_index":313,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EmailService.html":{},"injectables/UserService.html":{}}}],["user.verified",{"_index":295,"title":{},"body":{"injectables/AuthService.html":{}}}],["user_id",{"_index":637,"title":{},"body":{"injectables/MovieDBService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/VoteDBService.html":{},"injectables/VoteService.html":{}}}],["user_id'})@get(':user_id",{"_index":841,"title":{},"body":{"controllers/UserController.html":{}}}],["user_name",{"_index":383,"title":{},"body":{"injectables/EmailService.html":{}}}],["user_name},\\n\\nplease",{"_index":409,"title":{},"body":{"injectables/EmailService.html":{}}}],["usercontroller",{"_index":806,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userdb",{"_index":315,"title":{},"body":{"injectables/AuthService.html":{}}}],["userdb.service",{"_index":886,"title":{},"body":{"modules/UserDBModule.html":{}}}],["userdbmodule",{"_index":241,"title":{"modules/UserDBModule.html":{}},"body":{"modules/AuthModule.html":{},"modules/EventModule.html":{},"modules/MovieModule.html":{},"modules/UserDBModule.html":{},"modules/UserModule.html":{},"modules/VoteModule.html":{},"modules.html":{},"overview.html":{}}}],["userdbservice",{"_index":266,"title":{"injectables/UserDBService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/EmailService.html":{},"injectables/MovieService.html":{},"modules/UserDBModule.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"coverage.html":{},"overview.html":{}}}],["usermodule",{"_index":98,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":182,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/GravatarService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/MovieService.html":{},"classes/RegisterDto.html":{},"controllers/UserController.html":{},"injectables/UserDBService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["username.trim().tolowercase",{"_index":450,"title":{},"body":{"injectables/GravatarService.html":{}}}],["username_pattern",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["username_pattern.test(new_username",{"_index":970,"title":{},"body":{"injectables/UserService.html":{}}}],["username_pattern.test(user.username",{"_index":310,"title":{},"body":{"injectables/AuthService.html":{}}}],["users",{"_index":1248,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["userservice",{"_index":847,"title":{"injectables/UserService.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["userwhereuniqueinput",{"_index":900,"title":{},"body":{"injectables/UserDBService.html":{}}}],["uses",{"_index":1349,"title":{},"body":{"index.html":{}}}],["util_services/discord.service",{"_index":39,"title":{},"body":{"injectables/AnnounceJob.html":{},"modules/EventModule.html":{}}}],["util_services/email.service",{"_index":44,"title":{},"body":{"injectables/AnnounceJob.html":{},"modules/EventModule.html":{}}}],["util_services/password.service",{"_index":887,"title":{},"body":{"modules/UserDBModule.html":{},"injectables/UserDBService.html":{}}}],["valid",{"_index":877,"title":{},"body":{"controllers/UserController.html":{}}}],["valid'})@apibearerauth()@useguards(jwtauthguard)@get('check",{"_index":823,"title":{},"body":{"controllers/UserController.html":{}}}],["validate",{"_index":506,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":508,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(username",{"_index":530,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validated",{"_index":1300,"title":{},"body":{"index.html":{}}}],["validateuser",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(username",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{}}}],["validation",{"_index":1303,"title":{},"body":{"index.html":{}}}],["validationschema",{"_index":128,"title":{},"body":{"modules/AppModule.html":{}}}],["value",{"_index":350,"title":{},"body":{"injectables/DiscordService.html":{},"injectables/EmailService.html":{},"injectables/MovieService.html":{},"injectables/VoteService.html":{},"injectables/WatchListJob.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":1285,"title":{},"body":{"index.html":{}}}],["variable",{"_index":1149,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1509,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verification",{"_index":1247,"title":{},"body":{"index.html":{}}}],["verified",{"_index":328,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["version",{"_index":1272,"title":{},"body":{"index.html":{},"properties.html":{}}}],["via",{"_index":1256,"title":{},"body":{"index.html":{}}}],["view",{"_index":1405,"title":{},"body":{"index.html":{}}}],["views",{"_index":1410,"title":{},"body":{"index.html":{}}}],["void",{"_index":542,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["vote",{"_index":597,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{},"controllers/VoteController.html":{},"injectables/VoteService.html":{},"index.html":{}}}],["vote(imdb_id",{"_index":1083,"title":{},"body":{"injectables/VoteService.html":{}}}],["vote.controller",{"_index":1074,"title":{},"body":{"modules/VoteModule.html":{}}}],["vote.imdb_id",{"_index":1089,"title":{},"body":{"injectables/VoteService.html":{}}}],["vote.service",{"_index":1008,"title":{},"body":{"controllers/VoteController.html":{},"modules/VoteModule.html":{}}}],["vote.user.id",{"_index":751,"title":{},"body":{"injectables/MovieService.html":{}}}],["vote/vote.service",{"_index":669,"title":{},"body":{"modules/MovieModule.html":{},"injectables/MovieService.html":{}}}],["votecontroller",{"_index":989,"title":{"controllers/VoteController.html":{}},"body":{"controllers/VoteController.html":{},"modules/VoteModule.html":{},"coverage.html":{}}}],["voted",{"_index":1000,"title":{},"body":{"controllers/VoteController.html":{},"index.html":{}}}],["votedb.service",{"_index":1023,"title":{},"body":{"modules/VoteDBModule.html":{}}}],["votedb_data",{"_index":1094,"title":{},"body":{"injectables/VoteService.html":{}}}],["votedbmodule",{"_index":428,"title":{"modules/VoteDBModule.html":{}},"body":{"modules/EventModule.html":{},"modules/MovieModule.html":{},"modules/UserModule.html":{},"modules/VoteDBModule.html":{},"modules/VoteModule.html":{},"modules.html":{},"overview.html":{}}}],["votedbservice",{"_index":482,"title":{"injectables/VoteDBService.html":{}},"body":{"injectables/HistoryJob.html":{},"injectables/MovieService.html":{},"injectables/UserService.html":{},"modules/VoteDBModule.html":{},"injectables/VoteDBService.html":{},"injectables/VoteService.html":{},"injectables/WatchListJob.html":{},"coverage.html":{},"overview.html":{}}}],["votemodule",{"_index":99,"title":{"modules/VoteModule.html":{}},"body":{"modules/AppModule.html":{},"modules/VoteModule.html":{},"modules.html":{},"overview.html":{}}}],["votes",{"_index":657,"title":{},"body":{"interfaces/MovieExtType.html":{},"injectables/MovieService.html":{},"injectables/UserService.html":{},"controllers/VoteController.html":{},"miscellaneous/variables.html":{}}}],["votes.map((vote",{"_index":750,"title":{},"body":{"injectables/MovieService.html":{}}}],["voteservice",{"_index":663,"title":{"injectables/VoteService.html":{}},"body":{"modules/MovieModule.html":{},"injectables/MovieService.html":{},"controllers/VoteController.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"coverage.html":{},"overview.html":{}}}],["voting",{"_index":1241,"title":{},"body":{"index.html":{},"properties.html":{}}}],["vue",{"_index":1397,"title":{},"body":{"index.html":{}}}],["vue.js",{"_index":1395,"title":{},"body":{"index.html":{}}}],["wahl",{"_index":51,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["warranties",{"_index":1472,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":1468,"title":{},"body":{"license.html":{}}}],["watch",{"_index":135,"title":{},"body":{"modules/AppModule.html":{},"properties.html":{}}}],["watch_list",{"_index":490,"title":{},"body":{"injectables/HistoryJob.html":{}}}],["watch_movie",{"_index":745,"title":{},"body":{"injectables/MovieService.html":{}}}],["watch_movie.start_time",{"_index":748,"title":{},"body":{"injectables/MovieService.html":{}}}],["watchlist",{"_index":35,"title":{},"body":{"injectables/AnnounceJob.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["watchlist.map((movie",{"_index":736,"title":{},"body":{"injectables/MovieService.html":{}}}],["watchlist_imdbs",{"_index":735,"title":{},"body":{"injectables/MovieService.html":{}}}],["watchlist_imdbs.includes(imdb_id",{"_index":737,"title":{},"body":{"injectables/MovieService.html":{}}}],["watchlist_proposer_ids",{"_index":979,"title":{},"body":{"injectables/UserService.html":{}}}],["watchlist_proposer_ids.includes(user_id",{"_index":983,"title":{},"body":{"injectables/UserService.html":{}}}],["watchlistdb.service",{"_index":1107,"title":{},"body":{"modules/WatchListDBModule.html":{}}}],["watchlistdbmodule",{"_index":429,"title":{"modules/WatchListDBModule.html":{}},"body":{"modules/EventModule.html":{},"modules/MovieModule.html":{},"modules/UserModule.html":{},"modules/WatchListDBModule.html":{},"modules.html":{},"overview.html":{}}}],["watchlistdbservice",{"_index":20,"title":{"injectables/WatchListDBService.html":{}},"body":{"injectables/AnnounceJob.html":{},"injectables/HistoryJob.html":{},"injectables/MovieService.html":{},"injectables/UserService.html":{},"modules/WatchListDBModule.html":{},"injectables/WatchListDBService.html":{},"injectables/WatchListJob.html":{},"coverage.html":{},"overview.html":{}}}],["watchlistexttype",{"_index":595,"title":{"interfaces/WatchlistExtType.html":{}},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{},"interfaces/WatchlistExtType.html":{},"coverage.html":{}}}],["watchlistjob",{"_index":431,"title":{"injectables/WatchListJob.html":{}},"body":{"modules/EventModule.html":{},"injectables/WatchListJob.html":{},"coverage.html":{},"overview.html":{}}}],["webhook",{"_index":1564,"title":{},"body":{"miscellaneous/variables.html":{}}}],["webhookclient",{"_index":344,"title":{},"body":{"injectables/DiscordService.html":{}}}],["website",{"_index":1336,"title":{},"body":{"index.html":{},"properties.html":{}}}],["werden",{"_index":56,"title":{},"body":{"injectables/AnnounceJob.html":{}}}],["whether",{"_index":1485,"title":{},"body":{"license.html":{}}}],["whole",{"_index":1345,"title":{},"body":{"index.html":{}}}],["without",{"_index":1255,"title":{},"body":{"index.html":{},"license.html":{}}}],["wl",{"_index":980,"title":{},"body":{"injectables/UserService.html":{}}}],["written",{"_index":1346,"title":{},"body":{"index.html":{}}}],["year",{"_index":658,"title":{},"body":{"interfaces/MovieExtType.html":{},"injectables/MovieService.html":{}}}],["yes",{"_index":1233,"title":{},"body":{"miscellaneous/functions.html":{}}}],["z0",{"_index":1661,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z])(?=.*[a",{"_index":1613,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z]).{8",{"_index":1615,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z].{2,20",{"_index":1611,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z]{2,4",{"_index":1663,"title":{},"body":{"miscellaneous/variables.html":{}}}],["za",{"_index":1614,"title":{},"body":{"miscellaneous/variables.html":{}}}],["zoom",{"_index":100,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventModule.html":{},"modules/HistoryDBModule.html":{},"modules/MovieDBModule.html":{},"modules/MovieModule.html":{},"modules/UserDBModule.html":{},"modules/UserModule.html":{},"modules/VoteDBModule.html":{},"modules/VoteModule.html":{},"modules/WatchListDBModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"injectables/AnnounceJob.html":{"url":"injectables/AnnounceJob.html","title":"injectable - AnnounceJob","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AnnounceJob\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/event_service/jobs/announce.job.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                announce_discord\n                            \n                            \n                                    Private\n                                    Readonly\n                                announce_email\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                run\n                            \n                            \n                                    Private\n                                    Async\n                                send_announce\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(discordService: DiscordService, watchListDBService: WatchListDBService, movieDBService: MovieDBService, emailService: EmailService)\n                    \n                \n                        \n                            \n                                Defined in src/common/event_service/jobs/announce.job.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        discordService\n                                                  \n                                                        \n                                                                        DiscordService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        watchListDBService\n                                                  \n                                                        \n                                                                        WatchListDBService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        movieDBService\n                                                  \n                                                        \n                                                                        MovieDBService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        emailService\n                                                  \n                                                        \n                                                                        EmailService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        run\n                        \n                    \n                \n            \n            \n                \n                    \n                    run()\n                \n            \n\n\n            \n                \n                    Defined in src/common/event_service/jobs/announce.job.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        send_announce\n                        \n                    \n                \n            \n            \n                \n                    \n                    send_announce(watchlist: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/common/event_service/jobs/announce.job.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    watchlist\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        announce_discord\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/common/event_service/jobs/announce.job.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        announce_email\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/common/event_service/jobs/announce.job.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { DiscordService } from \"../../util_services/discord.service\";\nimport { WatchListDBService } from \"../../db_services/watchlist/watchListDB.service\";\nimport { MovieDBService } from \"../../db_services/movies/movieDB.service\";\nimport { Movie } from \"@prisma/client\";\nimport { EmailService } from \"../../util_services/email.service\";\n\n@Injectable()\nexport class AnnounceJob {\n\n  private readonly announce_discord;\n  private readonly announce_email\n\n  constructor(private readonly discordService: DiscordService,\n              private readonly watchListDBService: WatchListDBService,\n              private readonly movieDBService: MovieDBService,\n              private readonly emailService: EmailService) {\n    this.announce_discord = (watchlist: string[]) => `\\n` +\n      `Die Wahl ist durch, diese Filme werden geschaut:\\n${watchlist.join(\"\\n\")}\\n` +\n      `Mehr Infos siehe auch ${process.env.FRONTEND_URL}\\n\\n` +\n      `Es gibt Getränke und Atmosphäre auf Spendenbasis!\\n\\n`\n\n    this.announce_email = (watchlist: string[]) => `Die Wahl ist durch, diese Filme werden geschaut:\\n${watchlist.join(\"\\n\")}\\n` +\n      `Mehr Infos siehe auch ${process.env.FRONTEND_URL}\\n\\n` +\n      `Es gibt Getränke und Atmosphäre auf Spendenbasis!\\n\\n`\n  }\n\n  async run() {\n    console.log(\"Announce job started\");\n    const watchlist = await this.watchListDBService.get_all();\n    const output = [] as string[];\n\n    for (const movie of watchlist) {\n      const movie_data = await this.movieDBService.get(movie.imdb_id) as Movie;\n      const start_time = movie.start_time.toLocaleString();\n      output.push(`${start_time} - ${movie_data.title}`);\n    }\n\n    await this.send_announce(output);\n  }\n\n  private async send_announce(watchlist: string[]) {\n    await this.discordService.send_message(this.announce_discord(watchlist));\n    await this.emailService.send_all_opt_in(this.announce_email(watchlist));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nEventModule\n\nEventModule\n\nAppModule -->\n\nEventModule->AppModule\n\n\n\n\n\nMovieModule\n\nMovieModule\n\nAppModule -->\n\nMovieModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nVoteModule\n\nVoteModule\n\nAppModule -->\n\nVoteModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            EventModule\n                        \n                        \n                            MovieModule\n                        \n                        \n                            UserModule\n                        \n                        \n                            VoteModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthModule } from './routes/auth/auth.module';\nimport { UserModule } from './routes/user/user.module';\nimport { ServeStaticModule } from \"@nestjs/serve-static\";\nimport { MovieModule } from './routes/movie/movie.module';\nimport { VoteModule } from './routes/vote/vote.module';\nimport { EventModule } from \"./common/event_service/event.module\";\nimport { ScheduleModule } from \"@nestjs/schedule\";\nimport { ConfigModule } from \"@nestjs/config\";\nimport { AcceptLanguageResolver, I18nModule } from \"nestjs-i18n\";\nimport { config_validation_schema } from \"./common/validation/config.validation\";\nimport { join } from \"path\";\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n      validationSchema: config_validation_schema\n    }),\n    I18nModule.forRoot({\n      fallbackLanguage: 'en',\n      loaderOptions: {\n        path: join(__dirname, '../src/locales'),\n        watch: true,\n      },\n      resolvers: [\n        AcceptLanguageResolver\n      ],\n      typesOutputPath: join(__dirname, '../src/types/generated/i18n.generated.ts')\n    }),\n    AuthModule, UserModule, MovieModule, VoteModule, EventModule,\n    ServeStaticModule.forRoot({\n      serveRoot: '/docs/backend',\n      rootPath: join(__dirname, '..', 'docs'),\n    }),\n    ServeStaticModule.forRoot({\n      rootPath: join(__dirname, '..', 'client/dist'),\n    }),\n    ScheduleModule.forRoot()\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n            \n                Description\n            \n            \n                Controller for authentication related routes\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                confirm\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                pw_reset\n                            \n                            \n                                    Async\n                                pw_reset_request\n                            \n                            \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        confirm\n                        \n                    \n                \n            \n            \n                \n                    \n                    confirm(challenge: string, i18n: I18nContext)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'GET confirm email address by providing user challenge'})@Get('confirm/:challenge')\n                \n            \n\n            \n                \n                    Defined in src/routes/auth/auth.controller.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    challenge\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    i18n\n                                    \n                                                I18nContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(user: JwtUser, body: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'POST issue jwt access token by providing username (email) and password'})@UseGuards(LocalAuthGuard)@Post('login')\n                \n            \n\n            \n                \n                    Defined in src/routes/auth/auth.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                JwtUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        pw_reset\n                        \n                    \n                \n            \n            \n                \n                    \n                    pw_reset(challenge: string, body: PasswordDto, i18n: I18nContext)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'POST reset password by providing user challenge and new password'})@Post('reset/:challenge')\n                \n            \n\n            \n                \n                    Defined in src/routes/auth/auth.controller.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    challenge\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                PasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    i18n\n                                    \n                                                I18nContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        pw_reset_request\n                        \n                    \n                \n            \n            \n                \n                    \n                    pw_reset_request(username: string, i18n: I18nContext)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'GET request a password reset by providing an username (email)'})@Get('reset/:username')\n                \n            \n\n            \n                \n                    Defined in src/routes/auth/auth.controller.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    i18n\n                                    \n                                                I18nContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(body: RegisterDto, i18n: I18nContext)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'POST register new user'})@Post('register')\n                \n            \n\n            \n                \n                    Defined in src/routes/auth/auth.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                RegisterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    i18n\n                                    \n                                                I18nContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, UseGuards, Get, Param, Body } from \"@nestjs/common\";\nimport { LocalAuthGuard } from './auth.guard';\nimport { AuthService } from './auth.service';\nimport { JwtUser } from \"../../types/jwtuser.type\";\nimport { User } from \"../../common/decorators/user.decorator\";\nimport { PasswordDto } from \"../../types/user.dto/password.dto\";\nimport { RegisterDto } from \"../../types/user.dto/register.dto\";\nimport { ResDto } from \"../../types/res.dto\";\nimport { LoginDto } from \"../../types/user.dto/login.dto\";\nimport { ApiOperation, ApiTags } from \"@nestjs/swagger\";\nimport { I18n, I18nContext } from \"nestjs-i18n\";\nimport { I18nTranslations } from \"../../types/generated/i18n.generated\";\n\n/**\n * Controller for authentication related routes\n */\n@ApiTags('auth')\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @ApiOperation({ summary: 'POST issue jwt access token by providing username (email) and password' })\n  @UseGuards(LocalAuthGuard)\n  @Post('login')\n  async login(@User() user: JwtUser, @Body() body: LoginDto): Promise {\n    return await this.authService.login(user);\n  }\n\n  @ApiOperation({ summary: 'POST register new user' })\n  @Post('register')\n  async register(@Body() body: RegisterDto, @I18n() i18n: I18nContext): Promise {\n    return await this.authService.register(body, i18n)\n  }\n\n  @ApiOperation({ summary: 'GET confirm email address by providing user challenge' })\n  @Get('confirm/:challenge')\n  async confirm(@Param('challenge') challenge: string, @I18n() i18n: I18nContext): Promise {\n    return await this.authService.confirm(challenge, i18n)\n  }\n\n  @ApiOperation({ summary: 'GET request a password reset by providing an username (email)' })\n  @Get('reset/:username')\n  async pw_reset_request(@Param('username') username: string, @I18n() i18n: I18nContext): Promise {\n    return await this.authService.pw_reset_request(username, i18n)\n  }\n\n  @ApiOperation({ summary: 'POST reset password by providing user challenge and new password' })\n  @Post('reset/:challenge')\n  async pw_reset(@Param('challenge') challenge: string, @Body() body: PasswordDto, @I18n() i18n: I18nContext): Promise {\n    return await this.authService.pw_reset(challenge, body.password, i18n)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_imports\n\n\n\n\nUserDBModule\n\nUserDBModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUserDBModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nEmailService\n\nEmailService\n\nAuthModule -->\n\nEmailService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nPasswordService\n\nPasswordService\n\nAuthModule -->\n\nPasswordService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/routes/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            EmailService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                        \n                            PasswordService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserDBModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { AuthService } from './auth.service';\nimport { UserDBModule } from '../../common/db_services/users/userDB.module';\nimport { PassportModule } from '@nestjs/passport';\nimport { LocalStrategy } from './local.strategy';\nimport { AuthController } from './auth.controller';\nimport { JwtModule } from '@nestjs/jwt';\nimport { JwtStrategy } from './jwt.stategy';\nimport { EmailService } from \"../../common/util_services/email.service\";\nimport { PasswordService } from \"../../common/util_services/password.service\";\n\n@Module({\n  imports: [\n    UserDBModule,\n    PassportModule,\n    JwtModule.register({\n      secret: process.env.JWT_SECRET,\n      signOptions: { expiresIn: process.env.JWT_EXPIRATION },\n    }),\n  ],\n  providers: [AuthService, LocalStrategy, JwtStrategy, EmailService, PasswordService],\n  controllers: [AuthController],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                confirm\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                pw_reset\n                            \n                            \n                                    Async\n                                pw_reset_request\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userDBService: UserDBService, jwtService: JwtService, emailService: EmailService, passwordService: PasswordService)\n                    \n                \n                        \n                            \n                                Defined in src/routes/auth/auth.service.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userDBService\n                                                  \n                                                        \n                                                                        UserDBService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        emailService\n                                                  \n                                                        \n                                                                        EmailService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        passwordService\n                                                  \n                                                        \n                                                                        PasswordService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        confirm\n                        \n                    \n                \n            \n            \n                \n                    \n                    confirm(challenge: string, i18n: I18nContext)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/auth/auth.service.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    challenge\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    i18n\n                                    \n                                                I18nContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(user: any)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/auth/auth.service.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        pw_reset\n                        \n                    \n                \n            \n            \n                \n                    \n                    pw_reset(challenge: string, password: string, i18n: I18nContext)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/auth/auth.service.ts:105\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    challenge\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    i18n\n                                    \n                                                I18nContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        pw_reset_request\n                        \n                    \n                \n            \n            \n                \n                    \n                    pw_reset_request(username: string, i18n: I18nContext)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/auth/auth.service.ts:90\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    i18n\n                                    \n                                                I18nContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(user: RegisterDto, i18n: I18nContext)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/auth/auth.service.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                RegisterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    i18n\n                                    \n                                                I18nContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(username: string, password: string, i18n: I18nContext)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/auth/auth.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    i18n\n                                    \n                                                I18nContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ConflictException,\n  ForbiddenException,\n  Injectable,\n  InternalServerErrorException,\n  NotFoundException\n} from \"@nestjs/common\";\nimport { UserDBService } from '../../common/db_services/users/userDB.service';\nimport { JwtService } from '@nestjs/jwt';\nimport { PrismaClientKnownRequestError } from \"@prisma/client/runtime\";\nimport { EmailService } from \"../../common/util_services/email.service\";\nimport { PasswordService } from \"../../common/util_services/password.service\";\nimport cuid from \"cuid\";\nimport { RegisterDto } from \"../../types/user.dto/register.dto\";\nimport { name_pattern } from \"../../common/validation/patterns/name.pattern\";\nimport { username_pattern } from \"../../common/validation/patterns/username.pattern\";\nimport { password_pattern } from \"../../common/validation/patterns/password.pattern\";\nimport { I18nContext } from \"nestjs-i18n\";\nimport { I18nTranslations } from \"../../types/generated/i18n.generated\";\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private readonly userDBService: UserDBService,\n    private readonly jwtService: JwtService,\n    private readonly emailService: EmailService,\n    private readonly passwordService: PasswordService,\n  ) {\n  }\n\n  async validateUser(username: string, password: string, i18n: I18nContext): Promise {\n    const user = await this.userDBService.get({\n      username: username\n    });\n    if (user && (await this.passwordService.compare(password, user.password))) {\n      if (!user.verified) {\n        const challenge_url = this.emailService.generate_challenge_url(user.challenge);\n        await this.emailService.send_challenge(user.username, user.name, challenge_url);\n        throw new ForbiddenException(i18n.t('auth.exception.forbidden_not_verified'));\n      }\n\n      const { password, ...result } = user;\n      return result;\n    }\n    throw new ForbiddenException(i18n.t('auth.exception.forbidden_login'));\n  }\n\n  async login(user: any) {\n    const payload = { sub: user.id };\n    return {\n      access_token: this.jwtService.sign(payload),\n    };\n  }\n\n  async register(user: RegisterDto, i18n: I18nContext) {\n    if (!name_pattern.test(user.name) || !username_pattern.test(user.username) || !password_pattern.test(user.password)) {\n      throw new ForbiddenException(i18n.t('auth.exception.forbidden_invalid_registration'));\n    }\n\n    const payload = { username: user.username, name: user.name, password: user.password };\n    try {\n      const userDB = await this.userDBService.create(payload);\n      const challenge_url = `${process.env.FRONTEND_URL}login/${userDB.challenge}`;\n      await this.emailService.send_challenge(user.username, user.name, challenge_url);\n      return { message: i18n.t('auth.success.register'), show_alert: true };\n\n    } catch (error) {\n      if (error instanceof PrismaClientKnownRequestError) {\n        throw new ConflictException(i18n.t('auth.exception.conflict_username_exists'));\n      } else {\n        throw new InternalServerErrorException(i18n.t('auth.exception.internal_server_error_register'));\n      }\n    }\n  }\n\n  async confirm(challenge: string, i18n: I18nContext) {\n    const user = await this.userDBService.get({\n      challenge: challenge,\n    });\n    if (user && !user.verified) {\n      await this.userDBService.update({\n        where: { challenge },\n        data: { verified: true },\n      })\n      return { message: i18n.t('auth.success.verified'), show_alert: true };\n    }\n    throw new NotFoundException(i18n.t('auth.exception.not_found_challenge'));\n  }\n\n  async pw_reset_request(username: string, i18n: I18nContext) {\n    const user = await this.userDBService.get({ username })\n    if (user) {\n      const challenge = cuid();\n      const challenge_url = this.emailService.generate_pw_challenge_url(challenge);\n      await this.userDBService.update( {where: { username }, data: { pw_reset: true, challenge } } )\n      await this.emailService.send_password_reset(user.username, user.name, challenge_url);\n    }\n\n    return {\n      message: i18n.t('auth.success.password_reset_request'),\n      show_alert: true\n    };\n  }\n\n  async pw_reset(challenge: string, password: string, i18n: I18nContext) {\n    if (!password_pattern.test(password)) {\n      throw new ForbiddenException(i18n.t('auth.exception.invalid_password'));\n    }\n\n    const user = await this.userDBService.get({ challenge })\n    if (user && user.pw_reset) {\n      const hashed_password = await this.passwordService.hash(password);\n      await this.userDBService.update({ where: { challenge }, data: { password: hashed_password, pw_reset: false } } )\n      return { message: i18n.t('auth.success.password_reset'), show_alert: true };\n    }\n    throw new NotFoundException(i18n.t('auth.exception.not_found_password_reset'));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DiscordService.html":{"url":"injectables/DiscordService.html","title":"injectable - DiscordService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DiscordService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/util_services/discord.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                enabled\n                            \n                            \n                                    Private\n                                    Readonly\n                                webhookClient\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                send_message\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/common/util_services/discord.service.ts:7\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        send_message\n                        \n                    \n                \n            \n            \n                \n                    \n                    send_message(message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/util_services/discord.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        enabled\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.DISCORD_ENABLE === 'true'\n                    \n                \n                    \n                        \n                                Defined in src/common/util_services/discord.service.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        webhookClient\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/common/util_services/discord.service.ts:6\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { WebhookClient } from 'discord.js';\nimport { Injectable } from \"@nestjs/common\";\n\n@Injectable()\nexport class DiscordService {\n  private readonly webhookClient;\n  private readonly enabled = process.env.DISCORD_ENABLE === 'true';\n\n  constructor() {\n    if (this.enabled) {\n      this.webhookClient = new WebhookClient({ url: process.env.DISCORD_WEBHOOK_URL as string });\n    }\n  }\n\n  async send_message(message: string) {\n    if (this.enabled) {\n      // @ts-ignore\n      return this.webhookClient.send(message);\n    }\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EmailOptInDto.html":{"url":"classes/EmailOptInDto.html","title":"class - EmailOptInDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EmailOptInDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/user.dto/email_opt_in.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email_opt_in\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email_opt_in\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/types/user.dto/email_opt_in.dto.ts:3\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class EmailOptInDto {\n  email_opt_in!: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EmailService.html":{"url":"injectables/EmailService.html","title":"injectable - EmailService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EmailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/util_services/email.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                project_name\n                            \n                            \n                                    Private\n                                transporter\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                generate_challenge_url\n                            \n                            \n                                generate_pw_challenge_url\n                            \n                            \n                                    Async\n                                send_all_opt_in\n                            \n                            \n                                    Async\n                                send_challenge\n                            \n                            \n                                    Async\n                                send_password_reset\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userDBService: UserDBService)\n                    \n                \n                        \n                            \n                                Defined in src/common/util_services/email.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userDBService\n                                                  \n                                                        \n                                                                        UserDBService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        generate_challenge_url\n                        \n                    \n                \n            \n            \n                \ngenerate_challenge_url(challenge: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/util_services/email.service.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    challenge\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        generate_pw_challenge_url\n                        \n                    \n                \n            \n            \n                \ngenerate_pw_challenge_url(challenge: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/util_services/email.service.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    challenge\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        send_all_opt_in\n                        \n                    \n                \n            \n            \n                \n                    \n                    send_all_opt_in(body: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/util_services/email.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        send_challenge\n                        \n                    \n                \n            \n            \n                \n                    \n                    send_challenge(dest_mail: string, user_name: string, challenge_url: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/util_services/email.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dest_mail\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user_name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    challenge_url\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        send_password_reset\n                        \n                    \n                \n            \n            \n                \n                    \n                    send_password_reset(dest_mail: string, user_name: string, challenge_url: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/util_services/email.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dest_mail\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user_name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    challenge_url\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        project_name\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.PROJECT_NAME\n                    \n                \n                    \n                        \n                                Defined in src/common/util_services/email.service.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        transporter\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/common/util_services/email.service.ts:10\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\n\nconst nodemailer = require(\"nodemailer\");\nimport { TransportOptions } from \"nodemailer\";\nimport { UserDBService } from \"../db_services/users/userDB.service\";\n\n@Injectable()\nexport class EmailService {\n\n  private transporter;\n  private readonly project_name = process.env.PROJECT_NAME;\n\n  constructor(private readonly userDBService: UserDBService) {\n    this.transporter = nodemailer.createTransport({\n      host: process.env.EMAIL_HOST,\n      port: process.env.EMAIL_PORT,\n      secure: false,\n      auth: {\n        user: process.env.EMAIL_HOST_USER,\n        pass: process.env.EMAIL_HOST_PASSWORD\n      }\n    } as TransportOptions);\n  }\n\n  async send_challenge(dest_mail: string, user_name: string, challenge_url: string) {\n    await this.transporter.sendMail({\n      from: `\"${this.project_name}\" `,\n      to: dest_mail,\n      subject: `[${this.project_name}] Confirm your email!`,\n      text: `Hello ${user_name},\\n\\nplease confirm your email by clicking the following link:\\n${challenge_url}\\n\\n` +\n        `Dear\\n${this.project_name} Team\\n`\n    });\n  }\n\n  async send_password_reset(dest_mail: string, user_name: string, challenge_url: string) {\n    await this.transporter.sendMail({\n      from: `\"${this.project_name}\" `,\n      to: dest_mail,\n      subject: `[${this.project_name}] Password Reset Request!`,\n      text: `Hello ${user_name},\\n\\nplease reset your password by clicking the following link:\\n` +\n        `${challenge_url}\\n\\nDear\\n${this.project_name} Team\\n`\n    });\n  }\n\n  async send_all_opt_in(body: string) {\n    const opt_in_users = await this.userDBService.get_all_opt_in();\n    for (const user of opt_in_users) {\n      await this.transporter.sendMail({\n        from: `\"${this.project_name}\" `,\n        to: user.username,\n        subject: `[${this.project_name}] Announcement!`,\n        text: `Hello ${user.name},\\n\\n${body}\\nDear\\n${this.project_name} Team\\n`\n      });\n    }\n  }\n\n  generate_challenge_url(challenge: string) {\n    return `${process.env.FRONTEND_URL}login/${challenge}`;\n  }\n\n  generate_pw_challenge_url(challenge: string) {\n    return `${process.env.FRONTEND_URL}reset/${challenge}`;\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EventModule.html":{"url":"modules/EventModule.html","title":"module - EventModule","body":"\n                   \n\n\n\n\n    Modules\n    EventModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_EventModule\n\n\n\ncluster_EventModule_providers\n\n\n\ncluster_EventModule_imports\n\n\n\n\nHistoryDBModule\n\nHistoryDBModule\n\n\n\nEventModule\n\nEventModule\n\nEventModule -->\n\nHistoryDBModule->EventModule\n\n\n\n\n\nMovieDBModule\n\nMovieDBModule\n\nEventModule -->\n\nMovieDBModule->EventModule\n\n\n\n\n\nUserDBModule\n\nUserDBModule\n\nEventModule -->\n\nUserDBModule->EventModule\n\n\n\n\n\nVoteDBModule\n\nVoteDBModule\n\nEventModule -->\n\nVoteDBModule->EventModule\n\n\n\n\n\nWatchListDBModule\n\nWatchListDBModule\n\nEventModule -->\n\nWatchListDBModule->EventModule\n\n\n\n\n\nAnnounceJob\n\nAnnounceJob\n\nEventModule -->\n\nAnnounceJob->EventModule\n\n\n\n\n\nDiscordService\n\nDiscordService\n\nEventModule -->\n\nDiscordService->EventModule\n\n\n\n\n\nEmailService\n\nEmailService\n\nEventModule -->\n\nEmailService->EventModule\n\n\n\n\n\nHistoryJob\n\nHistoryJob\n\nEventModule -->\n\nHistoryJob->EventModule\n\n\n\n\n\nWatchListJob\n\nWatchListJob\n\nEventModule -->\n\nWatchListJob->EventModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/event_service/event.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AnnounceJob\n                        \n                        \n                            DiscordService\n                        \n                        \n                            EmailService\n                        \n                        \n                            HistoryJob\n                        \n                        \n                            WatchListJob\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            HistoryDBModule\n                        \n                        \n                            MovieDBModule\n                        \n                        \n                            UserDBModule\n                        \n                        \n                            VoteDBModule\n                        \n                        \n                            WatchListDBModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { HistoryJob } from \"./jobs/history.job\";\nimport { WatchListJob } from \"./jobs/watchlist.job\";\nimport { MovieDBModule } from \"../db_services/movies/movieDB.module\";\nimport { WatchListDBModule } from \"../db_services/watchlist/watchListDB.module\";\nimport { VoteDBModule } from \"../db_services/votes/voteDB.module\";\nimport { HistoryDBModule } from \"../db_services/histroy/historyDB.module\";\nimport { DiscordService } from \"../util_services/discord.service\";\nimport { AnnounceJob } from \"./jobs/announce.job\";\nimport { EmailService } from \"../util_services/email.service\";\nimport { UserDBModule } from \"../db_services/users/userDB.module\";\n\n@Module({\n  imports: [MovieDBModule, WatchListDBModule, VoteDBModule, HistoryDBModule, UserDBModule],\n  providers: [HistoryJob, WatchListJob, AnnounceJob, DiscordService, EmailService]\n})\nexport class EventModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GravatarService.html":{"url":"injectables/GravatarService.html","title":"injectable - GravatarService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GravatarService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/util_services/gravatar.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                generate_gravatar_url\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(passwordService: PasswordService)\n                    \n                \n                        \n                            \n                                Defined in src/common/util_services/gravatar.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        passwordService\n                                                  \n                                                        \n                                                                        PasswordService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        generate_gravatar_url\n                        \n                    \n                \n            \n            \n                \ngenerate_gravatar_url(username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/util_services/gravatar.service.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { PasswordService } from \"./password.service\";\n\n@Injectable()\nexport class GravatarService {\n\n  constructor(private readonly passwordService: PasswordService) {}\n\n  generate_gravatar_url(username: string): string {\n    const trim = username.trim().toLowerCase();\n    const hash = this.passwordService.hash_md5(trim);\n    return `https://www.gravatar.com/avatar/${hash}`;\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HistoryDBModule.html":{"url":"modules/HistoryDBModule.html","title":"module - HistoryDBModule","body":"\n                   \n\n\n\n\n    Modules\n    HistoryDBModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_HistoryDBModule\n\n\n\ncluster_HistoryDBModule_providers\n\n\n\ncluster_HistoryDBModule_exports\n\n\n\n\nHistoryDBService \n\nHistoryDBService \n\n\n\nHistoryDBModule\n\nHistoryDBModule\n\nHistoryDBService  -->\n\nHistoryDBModule->HistoryDBService \n\n\n\n\n\nHistoryDBService\n\nHistoryDBService\n\nHistoryDBModule -->\n\nHistoryDBService->HistoryDBModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nHistoryDBModule -->\n\nPrismaService->HistoryDBModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/db_services/histroy/historyDB.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            HistoryDBService\n                        \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            HistoryDBService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { HistoryDBService } from './historyDB.service';\nimport { PrismaService } from \"../prisma.service\";\n\n@Module({\n  providers: [HistoryDBService, PrismaService],\n  exports: [HistoryDBService]\n})\nexport class HistoryDBModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HistoryDBService.html":{"url":"injectables/HistoryDBService.html","title":"injectable - HistoryDBService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HistoryDBService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/db_services/histroy/historyDB.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                add\n                            \n                            \n                                    Async\n                                get_all\n                            \n                            \n                                    Async\n                                has\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/common/db_services/histroy/historyDB.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        add\n                        \n                    \n                \n            \n            \n                \n                    \n                    add(data: Prisma.HistoryCreateInput)\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/histroy/historyDB.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            Prisma.HistoryCreateInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get_all\n                        \n                    \n                \n            \n            \n                \n                    \n                    get_all()\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/histroy/historyDB.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        has\n                        \n                    \n                \n            \n            \n                \n                    \n                    has(imdb_id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/histroy/historyDB.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    imdb_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { PrismaService } from \"../prisma.service\";\nimport { Prisma } from \"@prisma/client\";\n\n@Injectable()\nexport class HistoryDBService {\n\n  constructor(private readonly prisma: PrismaService) {}\n\n  async get_all() {\n    return await this.prisma.history.findMany();\n  }\n\n  async add(data: Prisma.HistoryCreateInput) {\n    return await this.prisma.history.create({ data });\n  }\n\n  async has(imdb_id: string) {\n    return (await this.prisma.history.count({ where: { imdb_id } })) > 0;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HistoryJob.html":{"url":"injectables/HistoryJob.html","title":"injectable - HistoryJob","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HistoryJob\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/event_service/jobs/history.job.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                run\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(movieDBService: MovieDBService, historyDBService: HistoryDBService, watchListDBService: WatchListDBService, voteDBService: VoteDBService)\n                    \n                \n                        \n                            \n                                Defined in src/common/event_service/jobs/history.job.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        movieDBService\n                                                  \n                                                        \n                                                                        MovieDBService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        historyDBService\n                                                  \n                                                        \n                                                                        HistoryDBService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        watchListDBService\n                                                  \n                                                        \n                                                                        WatchListDBService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        voteDBService\n                                                  \n                                                        \n                                                                        VoteDBService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        run\n                        \n                    \n                \n            \n            \n                \n                    \n                    run()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Cron(: string)\n                \n            \n\n            \n                \n                    Defined in src/common/event_service/jobs/history.job.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { MovieDBService } from \"../../db_services/movies/movieDB.service\";\nimport { HistoryDBService } from \"../../db_services/histroy/historyDB.service\";\nimport { WatchListDBService } from \"../../db_services/watchlist/watchListDB.service\";\nimport { Movie, Prisma } from \"@prisma/client\";\nimport { VoteDBService } from \"../../db_services/votes/voteDB.service\";\nimport { Cron } from \"@nestjs/schedule\";\n\n@Injectable()\nexport class HistoryJob {\n\n  constructor(private readonly movieDBService: MovieDBService,\n              private readonly historyDBService: HistoryDBService,\n              private readonly watchListDBService: WatchListDBService,\n              private readonly voteDBService: VoteDBService) {}\n\n  @Cron(process.env.SCHEDULE_HISTORY as string)\n  async run() {\n    console.log('History job started');\n    const watch_list = await this.watchListDBService.get_all()\n    for (const movie of watch_list) {\n      const movie_data = await this.movieDBService.get(movie.imdb_id) as Movie\n      const data = {\n        imdb_id: movie.imdb_id,\n        title: movie_data.title,\n        link: movie_data.link\n      } as Prisma.HistoryCreateInput\n      await this.historyDBService.add(data)\n      await this.voteDBService.delete_all(movie.imdb_id)\n      await this.watchListDBService.delete(movie.imdb_id)\n      await this.movieDBService.delete(movie.imdb_id)\n    }\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/auth/jwt-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/auth/jwt.stategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/routes/auth/jwt.stategy.ts:7\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/auth/jwt.stategy.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { JwtUser } from \"../../types/jwtuser.type\";\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: process.env.JWT_SECRET,\n    });\n  }\n\n  async validate(payload: any) : Promise {\n    return { id: payload.sub };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JwtUser.html":{"url":"interfaces/JwtUser.html","title":"interface - JwtUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  JwtUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/jwtuser.type.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface JwtUser {\n  id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/auth/auth.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard('local') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/auth/local.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/routes/auth/local.strategy.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(username: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/auth/local.strategy.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy } from 'passport-local';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { I18nContext } from \"nestjs-i18n\";\nimport { I18nTranslations } from \"../../types/generated/i18n.generated\";\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private authService: AuthService) {\n    super();\n  }\n\n  async validate(username: string, password: string): Promise {\n    const i18n = I18nContext.current() as I18nContext;\n    const user = await this.authService.validateUser(username, password, i18n);\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggerMiddleware.html":{"url":"injectables/LoggerMiddleware.html","title":"injectable - LoggerMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggerMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/middleware/logger.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(req: any, res: any, next: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/logger.middleware.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware } from '@nestjs/common';\n\n@Injectable()\nexport class LoggerMiddleware implements NestMiddleware {\n  use(req: any, res: any, next: () => void) {\n    console.log('----------------------------------');\n    console.log('Request Body');\n    console.log('----------------------------------');\n    console.log(req.body)\n    console.log('----------------------------------');\n    next();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/user.dto/login.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/types/user.dto/login.dto.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/types/user.dto/login.dto.ts:3\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class LoginDto {\n  username!: string;\n  password!: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MovieController.html":{"url":"controllers/MovieController.html","title":"controller - MovieController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MovieController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/movie/movie.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                movie\n            \n\n\n            \n                Description\n            \n            \n                Controller for movie related routes\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                delete_media\n                            \n                            \n                                    Async\n                                get_all_media\n                            \n                            \n                                    Async\n                                get_history\n                            \n                            \n                                    Async\n                                get_media\n                            \n                            \n                                    Async\n                                get_watchlist\n                            \n                            \n                                    Async\n                                post_media\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete_media\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete_media(user: JwtUser, imdb_id: string, i18n: I18nContext)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'DEL remove a movie from the movie database by a given imdb_id, when the given user is the proposer'})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@Delete(':imdb_id')\n                \n            \n\n            \n                \n                    Defined in src/routes/movie/movie.controller.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                JwtUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    imdb_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    i18n\n                                    \n                                                I18nContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get_all_media\n                        \n                    \n                \n            \n            \n                \n                    \n                    get_all_media()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'GET all movies with its related data'})@Get('all')\n                \n            \n\n            \n                \n                    Defined in src/routes/movie/movie.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get_history\n                        \n                    \n                \n            \n            \n                \n                    \n                    get_history()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'GET all movies from history with its related data'})@Get('history')\n                \n            \n\n            \n                \n                    Defined in src/routes/movie/movie.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get_media\n                        \n                    \n                \n            \n            \n                \n                    \n                    get_media(imdb_id: string, i18n: I18nContext)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'GET information about a specific movie given by its imdb_id'})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@Get(':imdb_id')\n                \n            \n\n            \n                \n                    Defined in src/routes/movie/movie.controller.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    imdb_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    i18n\n                                    \n                                                I18nContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get_watchlist\n                        \n                    \n                \n            \n            \n                \n                    \n                    get_watchlist()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'GET all movies from watchlist with its related data'})@Get('watchlist')\n                \n            \n\n            \n                \n                    Defined in src/routes/movie/movie.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        post_media\n                        \n                    \n                \n            \n            \n                \n                    \n                    post_media(user: JwtUser, imdb_id: string, i18n: I18nContext)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'POST add a movie to the movie database by a given imdb_id. This is only possible if the movie is not already in the movie, watchlist or history database! The given user will be the proposer of the movie'})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@Post(':imdb_id')\n                \n            \n\n            \n                \n                    Defined in src/routes/movie/movie.controller.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                JwtUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    imdb_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    i18n\n                                    \n                                                I18nContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, Post, UseGuards } from \"@nestjs/common\";\nimport { ApiBearerAuth, ApiOperation, ApiTags } from \"@nestjs/swagger\";\nimport { MovieService } from \"./movie.service\";\nimport { JwtAuthGuard } from \"../auth/jwt-auth.guard\";\nimport { User } from \"../../common/decorators/user.decorator\";\nimport { JwtUser } from \"../../types/jwtuser.type\";\nimport { MovieExtType } from \"../../types/movie.types/movie_ext.type\";\nimport { WatchlistExtType } from \"../../types/movie.types/watchlist_ext.type\";\nimport { History, Vote, Movie } from \"@prisma/client\";\nimport { ResDto } from \"../../types/res.dto\";\nimport imdb from \"imdb-api\";\nimport { I18n, I18nContext } from \"nestjs-i18n\";\nimport { I18nTranslations } from \"../../types/generated/i18n.generated\";\n\n/**\n * Controller for movie related routes\n */\n@ApiTags('movie')\n@Controller('movie')\nexport class MovieController {\n\n  constructor(private readonly movieService: MovieService) {}\n\n  @ApiOperation({ summary: 'GET all movies with its related data' })\n  @Get('all')\n  async get_all_media() : Promise {\n    return await this.movieService.get_all()\n  }\n\n  @ApiOperation({ summary: 'GET all movies from watchlist with its related data' })\n  @Get('watchlist')\n  async get_watchlist() : Promise {\n    return await this.movieService.get_watchlist()\n  }\n\n  @ApiOperation({ summary: 'GET all movies from history with its related data' })\n  @Get('history')\n  async get_history() : Promise {\n    return await this.movieService.get_history()\n  }\n\n  @ApiOperation({ summary: 'GET information about a specific movie given by its imdb_id' })\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @Get(':imdb_id')\n  async get_media(@Param('imdb_id') imdb_id: string, @I18n() i18n: I18nContext) : Promise {\n    return await this.movieService.get(imdb_id, i18n)\n  }\n\n  @ApiOperation({ summary: 'POST add a movie to the movie database by a given imdb_id. This is only possible if the movie is not already in the movie, watchlist or history database! The given user will be the proposer of the movie' })\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @Post(':imdb_id')\n  async post_media(@User() user: JwtUser, @Param('imdb_id') imdb_id: string, @I18n() i18n: I18nContext): Promise {\n    return await this.movieService.save(imdb_id, Number(user.id), i18n)\n  }\n\n  @ApiOperation({ summary: \"DEL remove a movie from the movie database by a given imdb_id, when the given user is the proposer\" })\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @Delete(':imdb_id')\n  async delete_media(@User() user: JwtUser, @Param('imdb_id') imdb_id: string, @I18n() i18n: I18nContext) : Promise {\n    return await this.movieService.delete(imdb_id, user.id, i18n)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MovieDBModule.html":{"url":"modules/MovieDBModule.html","title":"module - MovieDBModule","body":"\n                   \n\n\n\n\n    Modules\n    MovieDBModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_MovieDBModule\n\n\n\ncluster_MovieDBModule_providers\n\n\n\ncluster_MovieDBModule_exports\n\n\n\n\nMovieDBService \n\nMovieDBService \n\n\n\nMovieDBModule\n\nMovieDBModule\n\nMovieDBService  -->\n\nMovieDBModule->MovieDBService \n\n\n\n\n\nMovieDBService\n\nMovieDBService\n\nMovieDBModule -->\n\nMovieDBService->MovieDBModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nMovieDBModule -->\n\nPrismaService->MovieDBModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/db_services/movies/movieDB.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MovieDBService\n                        \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MovieDBService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MovieDBService } from './movieDB.service';\nimport { PrismaService } from \"../prisma.service\";\n\n@Module({\n  providers: [MovieDBService, PrismaService],\n  exports: [MovieDBService]\n})\nexport class MovieDBModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MovieDBService.html":{"url":"injectables/MovieDBService.html","title":"injectable - MovieDBService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MovieDBService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/db_services/movies/movieDB.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                add\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                delete_all_proposed\n                            \n                            \n                                    Async\n                                get\n                            \n                            \n                                    Async\n                                get_all\n                            \n                            \n                                    Async\n                                get_all_proposed\n                            \n                            \n                                    Async\n                                get_imdb\n                            \n                            \n                                    Async\n                                has\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/common/db_services/movies/movieDB.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        add\n                        \n                    \n                \n            \n            \n                \n                    \n                    add(data: Prisma.MovieCreateInput)\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/movies/movieDB.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            Prisma.MovieCreateInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(imdb_id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/movies/movieDB.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    imdb_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete_all_proposed\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete_all_proposed(user_id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/movies/movieDB.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user_id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(imdb_id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/movies/movieDB.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    imdb_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get_all\n                        \n                    \n                \n            \n            \n                \n                    \n                    get_all()\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/movies/movieDB.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get_all_proposed\n                        \n                    \n                \n            \n            \n                \n                    \n                    get_all_proposed(user_id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/movies/movieDB.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user_id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get_imdb\n                        \n                    \n                \n            \n            \n                \n                    \n                    get_imdb(imdb_id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/movies/movieDB.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    imdb_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        has\n                        \n                    \n                \n            \n            \n                \n                    \n                    has(imdb_id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/movies/movieDB.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    imdb_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PrismaService } from \"../prisma.service\";\nimport { Prisma } from \"@prisma/client\";\n\n@Injectable()\nexport class MovieDBService {\n\n  constructor(private readonly prisma: PrismaService) {}\n\n  async get(imdb_id : string) {\n    return await this.prisma.movie.findUnique({\n      where: { imdb_id },\n    });\n  }\n\n  async get_imdb(imdb_id: string) {\n    return await this.prisma.movie.findUnique({\n      where: { imdb_id },\n    });\n  }\n\n  async get_all() {\n    return await this.prisma.movie.findMany();\n  }\n\n  async has(imdb_id: string) {\n    return (await this.prisma.movie.count({ where: { imdb_id } })) > 0;\n  }\n\n  async get_all_proposed(user_id : number) {\n    return await this.prisma.movie.findMany({\n      where: { proposer_id: user_id }\n    });\n  }\n\n  async add(data: Prisma.MovieCreateInput) {\n    return await this.prisma.movie.create({ data });\n  }\n\n  async delete(imdb_id: string) {\n    return await this.prisma.movie.delete({ where: { imdb_id } });\n  }\n\n  async delete_all_proposed(user_id : number) {\n    return await this.prisma.movie.deleteMany({\n      where: { proposer_id: user_id } as Prisma.MovieWhereUniqueInput\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MovieExtType.html":{"url":"interfaces/MovieExtType.html","title":"interface - MovieExtType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MovieExtType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/movie.types/movie_ext.type.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            createdAt\n                                        \n                                \n                                \n                                        \n                                            genre\n                                        \n                                \n                                \n                                        \n                                            imdb_id\n                                        \n                                \n                                \n                                        \n                                            link\n                                        \n                                \n                                \n                                        \n                                            proposer\n                                        \n                                \n                                \n                                        \n                                            proposer_id\n                                        \n                                \n                                \n                                        \n                                            title\n                                        \n                                \n                                \n                                        \n                                            votes\n                                        \n                                \n                                \n                                        \n                                            year\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        createdAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        createdAt:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        genre\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        genre:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        imdb_id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        imdb_id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        link\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        link:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        proposer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        proposer:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        proposer_id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        proposer_id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        votes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        votes:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        year\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        year:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface MovieExtType {\n  imdb_id: string,\n  title: string,\n  link: string,\n  year: number,\n  genre: string,\n  proposer: string,\n  proposer_id: number,\n  createdAt: Date,\n  votes: number\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MovieModule.html":{"url":"modules/MovieModule.html","title":"module - MovieModule","body":"\n                   \n\n\n\n\n    Modules\n    MovieModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_MovieModule\n\n\n\ncluster_MovieModule_imports\n\n\n\ncluster_MovieModule_providers\n\n\n\n\nHistoryDBModule\n\nHistoryDBModule\n\n\n\nMovieModule\n\nMovieModule\n\nMovieModule -->\n\nHistoryDBModule->MovieModule\n\n\n\n\n\nMovieDBModule\n\nMovieDBModule\n\nMovieModule -->\n\nMovieDBModule->MovieModule\n\n\n\n\n\nUserDBModule\n\nUserDBModule\n\nMovieModule -->\n\nUserDBModule->MovieModule\n\n\n\n\n\nVoteDBModule\n\nVoteDBModule\n\nMovieModule -->\n\nVoteDBModule->MovieModule\n\n\n\n\n\nWatchListDBModule\n\nWatchListDBModule\n\nMovieModule -->\n\nWatchListDBModule->MovieModule\n\n\n\n\n\nMovieService\n\nMovieService\n\nMovieModule -->\n\nMovieService->MovieModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nMovieModule -->\n\nPrismaService->MovieModule\n\n\n\n\n\nVoteService\n\nVoteService\n\nMovieModule -->\n\nVoteService->MovieModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/routes/movie/movie.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MovieService\n                        \n                        \n                            PrismaService\n                        \n                        \n                            VoteService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MovieController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            HistoryDBModule\n                        \n                        \n                            MovieDBModule\n                        \n                        \n                            UserDBModule\n                        \n                        \n                            VoteDBModule\n                        \n                        \n                            WatchListDBModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MovieController } from './movie.controller';\nimport { MovieService } from './movie.service';\nimport { PrismaService } from \"../../common/db_services/prisma.service\";\nimport { MovieDBModule } from \"../../common/db_services/movies/movieDB.module\";\nimport { UserDBModule } from \"../../common/db_services/users/userDB.module\";\nimport { VoteDBModule } from \"../../common/db_services/votes/voteDB.module\";\nimport { VoteService } from \"../vote/vote.service\";\nimport { HistoryDBModule } from \"../../common/db_services/histroy/historyDB.module\";\nimport { WatchListDBModule } from \"../../common/db_services/watchlist/watchListDB.module\";\n\n@Module({\n  imports: [MovieDBModule, UserDBModule, VoteDBModule, HistoryDBModule, WatchListDBModule],\n  controllers: [MovieController],\n  providers: [PrismaService, MovieService, VoteService]\n})\nexport class MovieModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MovieService.html":{"url":"injectables/MovieService.html","title":"injectable - MovieService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MovieService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/movie/movie.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                imdb\n                            \n                            \n                                    Private\n                                    Readonly\n                                max_proposeable_movies\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                get\n                            \n                            \n                                    Async\n                                get_all\n                            \n                            \n                                    Async\n                                get_history\n                            \n                            \n                                    Async\n                                get_watchlist\n                            \n                            \n                                    Async\n                                save\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(movieDBService: MovieDBService, userDBService: UserDBService, voteDBService: VoteDBService, histroyDBService: HistoryDBService, watchlistDBService: WatchListDBService, voteService: VoteService)\n                    \n                \n                        \n                            \n                                Defined in src/routes/movie/movie.service.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        movieDBService\n                                                  \n                                                        \n                                                                        MovieDBService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userDBService\n                                                  \n                                                        \n                                                                        UserDBService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        voteDBService\n                                                  \n                                                        \n                                                                        VoteDBService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        histroyDBService\n                                                  \n                                                        \n                                                                        HistoryDBService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        watchlistDBService\n                                                  \n                                                        \n                                                                        WatchListDBService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        voteService\n                                                  \n                                                        \n                                                                        VoteService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(imdb_id: string, proposer_id: string, i18n: I18nContext)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/movie/movie.service.ts:108\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    imdb_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    proposer_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    i18n\n                                    \n                                                I18nContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(imdb_id: string, i18n: I18nContext)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/movie/movie.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    imdb_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    i18n\n                                    \n                                                I18nContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get_all\n                        \n                    \n                \n            \n            \n                \n                    \n                    get_all()\n                \n            \n\n\n            \n                \n                    Defined in src/routes/movie/movie.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get_history\n                        \n                    \n                \n            \n            \n                \n                    \n                    get_history()\n                \n            \n\n\n            \n                \n                    Defined in src/routes/movie/movie.service.ts:141\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get_watchlist\n                        \n                    \n                \n            \n            \n                \n                    \n                    get_watchlist()\n                \n            \n\n\n            \n                \n                    Defined in src/routes/movie/movie.service.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        save\n                        \n                    \n                \n            \n            \n                \n                    \n                    save(imdb_id: string, proposer_id: number, i18n: I18nContext)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/movie/movie.service.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    imdb_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    proposer_id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    i18n\n                                    \n                                                I18nContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        imdb\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Client\n\n                    \n                \n                    \n                        \n                                Defined in src/routes/movie/movie.service.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        max_proposeable_movies\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Number(process.env.MAX_PROPOSEABLE_MOVIES)\n                    \n                \n                    \n                        \n                                Defined in src/routes/movie/movie.service.ts:21\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, ForbiddenException, Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Client } from \"imdb-api\";\nimport { MovieDBService } from \"../../common/db_services/movies/movieDB.service\";\nimport { Prisma, User, Movie } from \"@prisma/client\";\nimport { UserDBService } from \"../../common/db_services/users/userDB.service\";\nimport { VoteDBService } from \"../../common/db_services/votes/voteDB.service\";\nimport { VoteService } from \"../vote/vote.service\";\nimport { HistoryDBService } from \"../../common/db_services/histroy/historyDB.service\";\nimport { WatchListDBService } from \"../../common/db_services/watchlist/watchListDB.service\";\nimport { MovieExtType } from \"../../types/movie.types/movie_ext.type\";\nimport { WatchlistExtType } from \"../../types/movie.types/watchlist_ext.type\";\nimport { ResDto } from \"../../types/res.dto\";\nimport { imdb_id_pattern } from \"../../common/validation/patterns/imdb_id.pattern\";\nimport { I18nContext } from \"nestjs-i18n\";\nimport { I18nTranslations } from 'src/types/generated/i18n.generated';\n\n@Injectable()\nexport class MovieService {\n\n  private readonly imdb: Client\n  private readonly max_proposeable_movies = Number(process.env.MAX_PROPOSEABLE_MOVIES)\n\n  constructor(private readonly movieDBService: MovieDBService,\n              private readonly userDBService: UserDBService,\n              private readonly voteDBService: VoteDBService,\n              private readonly histroyDBService: HistoryDBService,\n              private readonly watchlistDBService: WatchListDBService,\n              private readonly voteService: VoteService) {\n    this.imdb = new Client({apiKey: process.env.OMDB_API_KEY})\n  }\n\n  async get(imdb_id: string, i18n: I18nContext) {\n    try {\n      return await this.imdb.get({ id: imdb_id })\n    } catch (e) {\n      throw new NotFoundException(i18n.t('movie.exception.not_found'))\n    }\n  }\n\n  async get_all() {\n    const movies = await this.movieDBService.get_all()\n    return await Promise.all(movies.map(async (movie) => {\n      const user = await this.userDBService.get({ id: movie.proposer_id }) as User\n      const votes = await this.voteDBService.get_num_of_votes(movie.imdb_id)\n\n      return {\n        imdb_id: movie.imdb_id,\n        title: movie.title,\n        link: movie.link,\n        year: movie.year,\n        genre: movie.genre,\n        proposer: user.name,\n        proposer_id: user.id,\n        createdAt: movie.createdAt,\n        votes\n      } as MovieExtType;\n    }));\n  }\n\n  async save(imdb_id: string, proposer_id: number, i18n: I18nContext) {\n    if (!imdb_id_pattern.test(imdb_id)) {\n      throw new ForbiddenException(i18n.t('movie.exception.invalid_imdb_id'))\n    }\n\n    if (await this.histroyDBService.has(imdb_id)) {\n      throw new ConflictException(i18n.t('movie.exception.conflict_history'))\n    }\n\n    if (await this.movieDBService.has(imdb_id)) {\n      throw new ConflictException(i18n.t('movie.exception.conflict_movie'))\n    }\n\n    if ((await this.movieDBService.get_all_proposed(proposer_id)).length >= this.max_proposeable_movies) {\n      throw new ConflictException(i18n.t('movie.exception.conflict_max_proposed', { args: {\n        max_proposeable_movies: this.max_proposeable_movies\n      } }))\n    }\n\n    const movie = await this.get(imdb_id, i18n)\n    const { username } : Prisma.UserCreateInput = await this.userDBService.get({id: proposer_id}) as User\n\n    const movieDB_data: Prisma.MovieCreateInput = {\n      imdb_id: imdb_id,\n      title: movie.title,\n      year: movie.year,\n      genre: movie.genres,\n      link: movie.imdburl,\n      proposer: { connect: { username } } as Prisma.UserCreateNestedOneWithoutMovieInput,\n      runtime: Number((movie.runtime.split(\" \"))[0])\n    }\n\n    try {\n      return this.movieDBService.add(movieDB_data).then((movie) => {\n        return this.voteService.vote(movie.imdb_id, proposer_id, i18n)\n          .then((vote) => {\n            return { movie, vote, message: i18n.t('movie.success.save'), show_alert: true }\n          })\n          .catch((e) => {\n            this.movieDBService.delete(movie.imdb_id)\n            throw e\n          })\n      })\n    } catch (e) {\n      throw new ConflictException(i18n.t('movie.exception.conflict_movie'))\n    }\n  }\n\n  async delete(imdb_id: string, proposer_id: string, i18n: I18nContext) {\n    const movie = await this.movieDBService.get(imdb_id) as Movie\n    const watchlist = await this.watchlistDBService.get_all()\n    const watchlist_imdbs = watchlist.map((movie) => movie.imdb_id)\n\n    if (watchlist_imdbs.includes(imdb_id)) {\n      throw new ConflictException(i18n.t('movie.exception.conflict_watchlist'))\n    }\n    else if (movie.proposer_id === Number(proposer_id)) {\n      await this.voteDBService.delete_all(imdb_id)\n      await this.movieDBService.delete(imdb_id)\n      return { message: i18n.t('movie.success.delete', {args: { title: movie.title }}), show_alert: true } as ResDto\n    } else {\n      throw new NotFoundException(i18n.t('movie.exception.not_found_or_not_proposer'))\n    }\n  }\n\n  async get_watchlist() {\n    const watchlist = await this.watchlistDBService.get_all()\n\n    return await Promise.all(watchlist.map(async (watch_movie) => {\n      const movie = await this.movieDBService.get(watch_movie.imdb_id) as Movie\n      const votes = await this.voteDBService.get_votes_movie(movie.imdb_id)\n      return {\n        imdb_id: movie.imdb_id,\n        title: movie.title,\n        link: movie.link,\n        start_time: watch_movie.start_time,\n        interested: votes.map((vote) => vote.user.id)\n      } as WatchlistExtType\n    }))\n  }\n\n  async get_history() {\n    return await this.histroyDBService.get_all()\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PasswordDto.html":{"url":"classes/PasswordDto.html","title":"class - PasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/user.dto/password.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                    Optional\n                                password_confirm\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/types/user.dto/password.dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        password_confirm\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/types/user.dto/password.dto.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class PasswordDto {\n  password!: string;\n  password_confirm?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PasswordNewDto.html":{"url":"classes/PasswordNewDto.html","title":"class - PasswordNewDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PasswordNewDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/user.dto/password_new.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                    Optional\n                                password_confirm\n                            \n                            \n                                password_old\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/types/user.dto/password_new.dto.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        password_confirm\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/types/user.dto/password_new.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password_old\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/types/user.dto/password_new.dto.ts:3\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class PasswordNewDto {\n  password_old!: string;\n  password!: string;\n  password_confirm?: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PasswordService.html":{"url":"injectables/PasswordService.html","title":"injectable - PasswordService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PasswordService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/util_services/password.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                compare\n                            \n                            \n                                    Async\n                                hash\n                            \n                            \n                                hash_md5\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        compare\n                        \n                    \n                \n            \n            \n                \n                    \n                    compare(password: string, hash: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/util_services/password.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    hash\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        hash\n                        \n                    \n                \n            \n            \n                \n                    \n                    hash(password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/util_services/password.service.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hash_md5\n                        \n                    \n                \n            \n            \n                \nhash_md5(string: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/util_services/password.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    string\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\n\nconst bcrypt = require('bcrypt');\nimport md5 from \"crypto-js/md5\";\n\n@Injectable()\nexport class PasswordService {\n\n  async hash(password: string): Promise {\n    return bcrypt.hash(password, 10);\n  }\n\n  hash_md5(string: string): string {\n    return md5(string).toString();\n  }\n\n  async compare(password: string, hash: string): Promise {\n    return bcrypt.compare(password, hash);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/db_services/prisma.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                enableShutdownHooks\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        enableShutdownHooks\n                        \n                    \n                \n            \n            \n                \n                    \n                    enableShutdownHooks(app: INestApplication)\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/prisma.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n                                    \n                                            INestApplication\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/prisma.service.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { INestApplication, Injectable, OnModuleInit } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n@Injectable()\nexport class PrismaService extends PrismaClient implements OnModuleInit {\n  async onModuleInit() {\n    await this.$connect();\n  }\n\n  async enableShutdownHooks(app: INestApplication) {\n    this.$on('beforeExit', async () => {\n      await app.close();\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProfileDto.html":{"url":"classes/ProfileDto.html","title":"class - ProfileDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProfileDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/user.dto/profile.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                            \n                                    Optional\n                                use_gravatar\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/types/user.dto/profile.dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        use_gravatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/types/user.dto/profile.dto.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class ProfileDto {\n  name!: string;\n  use_gravatar?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterDto.html":{"url":"classes/RegisterDto.html","title":"class - RegisterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/user.dto/register.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                    Optional\n                                password_confirm\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/types/user.dto/register.dto.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/types/user.dto/register.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        password_confirm\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/types/user.dto/register.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/types/user.dto/register.dto.ts:3\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class RegisterDto {\n  username!: string;\n  name!: string;\n  password!: string;\n  password_confirm?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ResDto.html":{"url":"classes/ResDto.html","title":"class - ResDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ResDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/res.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                message\n                            \n                            \n                                    Optional\n                                show_alert\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/types/res.dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        show_alert\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/types/res.dto.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class ResDto {\n  message!: string;\n  show_alert?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n            \n                Description\n            \n            \n                Controller for user related routes\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                change_password\n                            \n                            \n                                    Async\n                                change_username\n                            \n                            \n                                    Async\n                                check_profile\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                email_opt_in\n                            \n                            \n                                    Async\n                                get\n                            \n                            \n                                    Async\n                                get_data\n                            \n                            \n                                    Async\n                                get_user\n                            \n                            \n                                    Async\n                                update_profile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        change_password\n                        \n                    \n                \n            \n            \n                \n                    \n                    change_password(user: JwtUser, body: PasswordNewDto, i18n: I18nContext)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'POST update password'})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@Post('password')\n                \n            \n\n            \n                \n                    Defined in src/routes/user/user.controller.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                JwtUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                PasswordNewDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    i18n\n                                    \n                                                I18nContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        change_username\n                        \n                    \n                \n            \n            \n                \n                    \n                    change_username(user: JwtUser, body: LoginDto, i18n: I18nContext)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'POST update username (email)'})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@Post('username')\n                \n            \n\n            \n                \n                    Defined in src/routes/user/user.controller.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                JwtUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    i18n\n                                    \n                                                I18nContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        check_profile\n                        \n                    \n                \n            \n            \n                \n                    \n                    check_profile()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'GET check if bearer token is valid'})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@Get('check')\n                \n            \n\n            \n                \n                    Defined in src/routes/user/user.controller.ts:85\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(user: JwtUser, body: PasswordDto, i18n: I18nContext)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'DELETE user'})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@Delete()\n                \n            \n\n            \n                \n                    Defined in src/routes/user/user.controller.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                JwtUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                PasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    i18n\n                                    \n                                                I18nContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        email_opt_in\n                        \n                    \n                \n            \n            \n                \n                    \n                    email_opt_in(user: JwtUser, body: EmailOptInDto, i18n: I18nContext)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'POST update email_opt_in (set/unset on newsletter)'})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@Post('email_opt_in')\n                \n            \n\n            \n                \n                    Defined in src/routes/user/user.controller.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                JwtUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                EmailOptInDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    i18n\n                                    \n                                                I18nContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(user: JwtUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'GET user data'})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@Get()\n                \n            \n\n            \n                \n                    Defined in src/routes/user/user.controller.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                JwtUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get_data\n                        \n                    \n                \n            \n            \n                \n                    \n                    get_data(user: JwtUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'GET all saved user data'})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@Get('data')\n                \n            \n\n            \n                \n                    Defined in src/routes/user/user.controller.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                JwtUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get_user\n                        \n                    \n                \n            \n            \n                \n                    \n                    get_user(user_id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'GET public user data from given user_id'})@Get(':user_id')\n                \n            \n\n            \n                \n                    Defined in src/routes/user/user.controller.ts:91\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update_profile\n                        \n                    \n                \n            \n            \n                \n                    \n                    update_profile(user: JwtUser, body: ProfileDto, i18n: I18nContext)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'POST update profile information (name, gravatar)'})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@Post()\n                \n            \n\n            \n                \n                    Defined in src/routes/user/user.controller.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                JwtUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                ProfileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    i18n\n                                    \n                                                I18nContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, UseGuards, Post, Delete, Param, Body } from \"@nestjs/common\";\nimport { JwtAuthGuard } from '../auth/jwt-auth.guard';\nimport { UserService } from \"./user.service\";\nimport { User } from \"../../common/decorators/user.decorator\";\nimport { JwtUser } from \"../../types/jwtuser.type\";\nimport { ProfileDto } from \"../../types/user.dto/profile.dto\";\nimport { EmailOptInDto } from \"../../types/user.dto/email_opt_in.dto\";\nimport { PasswordDto } from \"../../types/user.dto/password.dto\";\nimport { LoginDto } from \"../../types/user.dto/login.dto\";\nimport { PasswordNewDto } from \"../../types/user.dto/password_new.dto\";\nimport { ResDto } from \"../../types/res.dto\";\nimport { ApiBearerAuth, ApiOperation, ApiTags } from \"@nestjs/swagger\";\nimport { I18n, I18nContext } from \"nestjs-i18n\";\nimport { I18nTranslations } from \"../../types/generated/i18n.generated\";\n\n/**\n * Controller for user related routes\n */\n@ApiTags('user')\n@Controller('user')\nexport class UserController {\n\n  constructor(private readonly userService: UserService) {}\n\n  @ApiOperation({ summary: 'GET user data' })\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @Get()\n  async get(@User() user: JwtUser) {\n    return await this.userService.get(Number(user.id));\n  }\n\n  @ApiOperation({ summary: 'POST update profile information (name, gravatar)' })\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @Post()\n  async update_profile(@User() user: JwtUser, @Body() body: ProfileDto, @I18n() i18n: I18nContext): Promise {\n    return await this.userService.change_profile(Number(user.id), body, i18n);\n  }\n\n  @ApiOperation({ summary: 'POST update email_opt_in (set/unset on newsletter)' })\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @Post('email_opt_in')\n  async email_opt_in(@User() user: JwtUser, @Body() body: EmailOptInDto, @I18n() i18n: I18nContext): Promise {\n    return await this.userService.email_opt_in(Number(user.id), Boolean(body.email_opt_in), i18n);\n  }\n\n  @ApiOperation({ summary: 'DELETE user' })\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @Delete()\n  async delete(@User() user: JwtUser, @Body() body: PasswordDto, @I18n() i18n: I18nContext): Promise {\n    return await this.userService.delete(Number(user.id), body.password, i18n);\n  }\n\n  @ApiOperation({ summary: 'GET all saved user data' })\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @Get('data')\n  async get_data(@User() user: JwtUser) {\n    return await this.userService.get_user_data(Number(user.id));\n  }\n\n  @ApiOperation({ summary: 'POST update username (email)' })\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @Post('username')\n  async change_username(@User() user: JwtUser, @Body() body: LoginDto, @I18n() i18n: I18nContext): Promise {\n    return await this.userService.change_username(Number(user.id), body.username, body.password, i18n);\n  }\n\n  @ApiOperation({ summary: 'POST update password' })\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @Post('password')\n  async change_password(@User() user: JwtUser, @Body() body: PasswordNewDto, @I18n() i18n: I18nContext): Promise {\n    return await this.userService.change_password(Number(user.id), body.password, body.password_old, i18n);\n  }\n\n  @ApiOperation({ summary: 'GET check if bearer token is valid' })\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @Get('check')\n  async check_profile() {\n    return true;\n  }\n\n  @ApiOperation({ summary: 'GET public user data from given user_id' })\n  @Get(':user_id')\n  async get_user(@Param('user_id') user_id: string) {\n    return await this.userService.get_public(Number(user_id));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserDBModule.html":{"url":"modules/UserDBModule.html","title":"module - UserDBModule","body":"\n                   \n\n\n\n\n    Modules\n    UserDBModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserDBModule\n\n\n\ncluster_UserDBModule_providers\n\n\n\ncluster_UserDBModule_exports\n\n\n\n\nUserDBService \n\nUserDBService \n\n\n\nUserDBModule\n\nUserDBModule\n\nUserDBService  -->\n\nUserDBModule->UserDBService \n\n\n\n\n\nPasswordService\n\nPasswordService\n\nUserDBModule -->\n\nPasswordService->UserDBModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nUserDBModule -->\n\nPrismaService->UserDBModule\n\n\n\n\n\nUserDBService\n\nUserDBService\n\nUserDBModule -->\n\nUserDBService->UserDBModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/db_services/users/userDB.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PasswordService\n                        \n                        \n                            PrismaService\n                        \n                        \n                            UserDBService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserDBService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UserDBService } from './userDB.service';\nimport { PrismaService } from '../prisma.service';\nimport { PasswordService } from \"../../util_services/password.service\";\n\n@Module({\n  providers: [UserDBService, PrismaService, PasswordService],\n  exports: [UserDBService],\n})\nexport class UserDBModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserDBService.html":{"url":"injectables/UserDBService.html","title":"injectable - UserDBService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserDBService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/db_services/users/userDB.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                get\n                            \n                            \n                                    Async\n                                get_all\n                            \n                            \n                                    Async\n                                get_all_opt_in\n                            \n                            \n                                    Async\n                                has_user\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService, passwordService: PasswordService)\n                    \n                \n                        \n                            \n                                Defined in src/common/db_services/users/userDB.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        passwordService\n                                                  \n                                                        \n                                                                        PasswordService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data: Prisma.UserCreateInput)\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/users/userDB.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                Prisma.UserCreateInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(where: Prisma.UserWhereUniqueInput)\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/users/userDB.service.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    where\n                                    \n                                                Prisma.UserWhereUniqueInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(userWhereUniqueInput: Prisma.UserWhereUniqueInput)\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/users/userDB.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userWhereUniqueInput\n                                    \n                                                Prisma.UserWhereUniqueInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get_all\n                        \n                    \n                \n            \n            \n                \n                    \n                    get_all()\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/users/userDB.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get_all_opt_in\n                        \n                    \n                \n            \n            \n                \n                    \n                    get_all_opt_in()\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/users/userDB.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        has_user\n                        \n                    \n                \n            \n            \n                \n                    \n                    has_user(username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/users/userDB.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(params: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/users/userDB.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PrismaService } from '../prisma.service';\nimport { User, Prisma } from '@prisma/client';\nimport { PasswordService } from \"../../util_services/password.service\";\n\n@Injectable()\nexport class UserDBService {\n  constructor(private readonly prisma: PrismaService,\n              private readonly passwordService: PasswordService) {}\n\n  async get(\n    userWhereUniqueInput: Prisma.UserWhereUniqueInput,\n  ): Promise {\n    return this.prisma.user.findUnique({\n      where: userWhereUniqueInput,\n    });\n  }\n\n  async has_user(username: string): Promise {\n    return (await this.prisma.user.count({ where: {username} })) > 0;\n  }\n\n  async get_all(): Promise {\n    return this.prisma.user.findMany();\n  }\n\n  async get_all_opt_in() : Promise {\n    return this.prisma.user.findMany({ where: { email_opt_in: true } });\n  }\n\n  async create(data: Prisma.UserCreateInput): Promise {\n    data.password = await this.passwordService.hash(data.password);\n    return this.prisma.user.create({ data });\n  }\n\n  async update(params: {\n    where: Prisma.UserWhereUniqueInput;\n    data: Prisma.UserUpdateInput;\n  }): Promise {\n    const { where, data } = params;\n    return this.prisma.user.update({\n      data,\n      where,\n    });\n  }\n\n  async delete(where: Prisma.UserWhereUniqueInput): Promise {\n    return this.prisma.user.delete({ where });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserModule\n\n\n\ncluster_UserModule_imports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nMovieDBModule\n\nMovieDBModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nMovieDBModule->UserModule\n\n\n\n\n\nUserDBModule\n\nUserDBModule\n\nUserModule -->\n\nUserDBModule->UserModule\n\n\n\n\n\nVoteDBModule\n\nVoteDBModule\n\nUserModule -->\n\nVoteDBModule->UserModule\n\n\n\n\n\nWatchListDBModule\n\nWatchListDBModule\n\nUserModule -->\n\nWatchListDBModule->UserModule\n\n\n\n\n\nEmailService\n\nEmailService\n\nUserModule -->\n\nEmailService->UserModule\n\n\n\n\n\nGravatarService\n\nGravatarService\n\nUserModule -->\n\nGravatarService->UserModule\n\n\n\n\n\nPasswordService\n\nPasswordService\n\nUserModule -->\n\nPasswordService->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/routes/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EmailService\n                        \n                        \n                            GravatarService\n                        \n                        \n                            PasswordService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            MovieDBModule\n                        \n                        \n                            UserDBModule\n                        \n                        \n                            VoteDBModule\n                        \n                        \n                            WatchListDBModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UserController } from './user.controller';\nimport { UserService } from \"./user.service\";\nimport { UserDBModule } from \"../../common/db_services/users/userDB.module\";\nimport { MovieDBModule } from \"../../common/db_services/movies/movieDB.module\";\nimport { VoteDBModule } from \"../../common/db_services/votes/voteDB.module\";\nimport { PasswordService } from \"../../common/util_services/password.service\";\nimport { EmailService } from \"../../common/util_services/email.service\";\nimport { GravatarService } from \"../../common/util_services/gravatar.service\";\nimport { WatchListDBModule } from \"../../common/db_services/watchlist/watchListDB.module\";\n\n@Module({\n  imports: [UserDBModule, MovieDBModule, VoteDBModule, WatchListDBModule],\n  controllers: [UserController],\n  providers: [UserService, PasswordService, EmailService, GravatarService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                change_password\n                            \n                            \n                                    Async\n                                change_profile\n                            \n                            \n                                    Async\n                                change_username\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                email_opt_in\n                            \n                            \n                                    Async\n                                get\n                            \n                            \n                                    Async\n                                get_public\n                            \n                            \n                                    Async\n                                get_user_data\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(movieDBService: MovieDBService, userDBService: UserDBService, voteDBService: VoteDBService, watchListDBService: WatchListDBService, passwordService: PasswordService, emailService: EmailService, gravatarService: GravatarService)\n                    \n                \n                        \n                            \n                                Defined in src/routes/user/user.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        movieDBService\n                                                  \n                                                        \n                                                                        MovieDBService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userDBService\n                                                  \n                                                        \n                                                                        UserDBService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        voteDBService\n                                                  \n                                                        \n                                                                        VoteDBService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        watchListDBService\n                                                  \n                                                        \n                                                                        WatchListDBService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        passwordService\n                                                  \n                                                        \n                                                                        PasswordService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        emailService\n                                                  \n                                                        \n                                                                        EmailService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        gravatarService\n                                                  \n                                                        \n                                                                        GravatarService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        change_password\n                        \n                    \n                \n            \n            \n                \n                    \n                    change_password(user_id: number, password_new: string, password_old: string, i18n: I18nContext)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/user/user.service.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user_id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password_new\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password_old\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    i18n\n                                    \n                                                I18nContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        change_profile\n                        \n                    \n                \n            \n            \n                \n                    \n                    change_profile(user_id: number, data: ProfileDto, i18n: I18nContext)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/user/user.service.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user_id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                ProfileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    i18n\n                                    \n                                                I18nContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        change_username\n                        \n                    \n                \n            \n            \n                \n                    \n                    change_username(user_id: number, new_username: string, password: string, i18n: I18nContext)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/user/user.service.ts:97\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user_id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    new_username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    i18n\n                                    \n                                                I18nContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(user_id: number, password: string, i18n: I18nContext)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/user/user.service.ts:126\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user_id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    i18n\n                                    \n                                                I18nContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        email_opt_in\n                        \n                    \n                \n            \n            \n                \n                    \n                    email_opt_in(user_id: number, opt_in: boolean, i18n: I18nContext)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/user/user.service.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user_id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    opt_in\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    i18n\n                                    \n                                                I18nContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(user_id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/user/user.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user_id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get_public\n                        \n                    \n                \n            \n            \n                \n                    \n                    get_public(user_id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/user/user.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user_id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get_user_data\n                        \n                    \n                \n            \n            \n                \n                    \n                    get_user_data(user_id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/user/user.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user_id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, ForbiddenException, Injectable } from \"@nestjs/common\";\nimport { UserDBService } from \"../../common/db_services/users/userDB.service\";\nimport { Movie, Prisma, User } from \"@prisma/client\";\nimport { MovieDBService } from \"../../common/db_services/movies/movieDB.service\";\nimport { VoteDBService } from \"../../common/db_services/votes/voteDB.service\";\nimport { PasswordService } from \"../../common/util_services/password.service\";\nimport { EmailService } from \"../../common/util_services/email.service\";\nimport { GravatarService } from \"../../common/util_services/gravatar.service\";\nimport { WatchListDBService } from \"../../common/db_services/watchlist/watchListDB.service\";\nimport { ProfileDto } from \"../../types/user.dto/profile.dto\";\nimport { name_pattern } from \"../../common/validation/patterns/name.pattern\";\nimport { username_pattern } from \"../../common/validation/patterns/username.pattern\";\nimport { password_pattern } from \"../../common/validation/patterns/password.pattern\";\nimport cuid from \"cuid\";\nimport { I18nContext } from \"nestjs-i18n\";\nimport { I18nTranslations } from \"../../types/generated/i18n.generated\";\n\n@Injectable()\nexport class UserService {\n\n  constructor(private readonly movieDBService: MovieDBService,\n              private readonly userDBService: UserDBService,\n              private readonly voteDBService: VoteDBService,\n              private readonly watchListDBService: WatchListDBService,\n              private readonly passwordService: PasswordService,\n              private readonly emailService: EmailService,\n              private readonly gravatarService: GravatarService) {}\n\n  async get(user_id: number) {\n    const { password, verified, challenge, pw_reset, ...result } = await this.userDBService.get({ id: user_id }) as User;\n    return result\n  }\n\n  async get_public(user_id: number) {\n    const { name, gravatar_url, use_gravatar } = await this.userDBService.get({ id: user_id }) as User;\n    return { name, gravatar_url, use_gravatar };\n  }\n\n  async get_user_data(user_id: number) {\n    const user = await this.userDBService.get({ id: user_id }) as User;\n    const proposed_movies = await this.movieDBService.get_all_proposed(user_id);\n    const votes = await this.voteDBService.get_votes_user(user_id);\n    return { user, movies: proposed_movies, votes };\n  }\n\n  async change_profile(user_id: number, data: ProfileDto, i18n: I18nContext) {\n    if (!name_pattern.test(data.name)) {\n      throw new ForbiddenException(i18n.t(\"user.exception.invalid_name\"));\n    }\n\n    const user = await this.userDBService.get({ id: user_id }) as User;\n    const data_to_update = {\n      name: data.name\n    } as Prisma.UserUpdateInput;\n\n    if (data.hasOwnProperty(\"use_gravatar\") && data.use_gravatar) {\n      data_to_update[\"use_gravatar\"] = true;\n      data_to_update[\"gravatar_url\"] = this.gravatarService.generate_gravatar_url(user.username);\n\n    } else {\n      data_to_update[\"use_gravatar\"] = false;\n      data_to_update[\"gravatar_url\"] = null;\n    }\n\n    await this.userDBService.update({ where: { id: user_id }, data: data_to_update });\n    return { message: i18n.t(\"user.success.profile\"), show_alert: true };\n  }\n\n  async email_opt_in(user_id: number, opt_in: boolean, i18n: I18nContext) {\n    await this.userDBService.update({ where: { id: user_id },\n      data: {\n        email_opt_in: opt_in\n      }\n    });\n    return { message: i18n.t(\"user.success.email_opt_in\"), show_alert: true };\n  }\n\n  async change_password(user_id: number, password_new: string, password_old: string, i18n: I18nContext) {\n    if (!password_pattern.test(password_new)) {\n      throw new ForbiddenException(i18n.t(\"user.exception.invalid_password\"));\n    }\n\n    const user = await this.userDBService.get({ id: user_id }) as User;\n    if (await this.passwordService.compare(password_old, user.password)) {\n      await this.userDBService.update({ where: { id: user_id },\n        data: {\n          password: await this.passwordService.hash(password_new),\n        }\n      });\n      return { message: i18n.t(\"user.success.password\"), show_alert: true };\n\n    } else {\n      throw new ForbiddenException(i18n.t(\"user.exception.forbidden_password\"));\n    }\n  }\n\n  async change_username(user_id: number, new_username: string, password: string, i18n: I18nContext) {\n    if (!username_pattern.test(new_username)) {\n      throw new ForbiddenException(i18n.t(\"user.exception.invalid_username\"));\n    }\n\n    const user = await this.userDBService.get({ id: user_id }) as User;\n    if ((user.username === new_username) || (await this.userDBService.has_user(new_username))) {\n      throw new ConflictException(i18n.t(\"user.exception.conflict_username\"));\n    }\n\n    if (await this.passwordService.compare(password, user.password)) {\n      const new_challenge = cuid();\n      await this.userDBService.update({ where: { id: user_id },\n        data: {\n          username: new_username,\n          verified: false,\n          challenge: new_challenge,\n          gravatar_url: this.gravatarService.generate_gravatar_url(new_username)\n        }\n      });\n      const new_challenge_url = this.emailService.generate_challenge_url(new_challenge);\n      await this.emailService.send_challenge(user.username, user.name, new_challenge_url);\n      return { message: i18n.t(\"user.success.username\"), show_alert: true };\n\n    } else {\n      throw new ForbiddenException(i18n.t(\"user.exception.forbidden_password\"));\n    }\n  }\n\n  async delete(user_id: number, password: string, i18n: I18nContext) {\n    const watchlist = await this.watchListDBService.get_all()\n    const watchlist_proposer_ids = await Promise.all(watchlist.map(async wl => {\n      return ((await this.movieDBService.get(wl.imdb_id)) as Movie).proposer_id\n    }));\n    if (watchlist_proposer_ids.includes(user_id)) {\n      throw new ForbiddenException(i18n.t(\"user.exception.conflict_delete\"));\n    }\n\n    const user = await this.userDBService.get({ id: user_id }) as User;\n    if (await this.passwordService.compare(password, user.password)) {\n      await this.voteDBService.delete_all_user(user_id);\n      await this.movieDBService.delete_all_proposed(user_id);\n      await this.userDBService.delete({ id: user_id });\n      return { message: i18n.t(\"user.success.delete\"), show_alert: true };\n\n    } else {\n      throw new ForbiddenException(i18n.t(\"user.exception.forbidden_password\"));\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/VoteController.html":{"url":"controllers/VoteController.html","title":"controller - VoteController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  VoteController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/vote/vote.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                vote\n            \n\n\n            \n                Description\n            \n            \n                Controller for the vote routes\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                get_vote\n                            \n                            \n                                    Async\n                                get_votes\n                            \n                            \n                                    Async\n                                save_vote\n                            \n                            \n                                    Async\n                                unvote\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get_vote\n                        \n                    \n                \n            \n            \n                \n                    \n                    get_vote(imdb_id: string, i18n: I18nContext)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'GET number of votes for a movie'})@Get(':imdb_id')\n                \n            \n\n            \n                \n                    Defined in src/routes/vote/vote.controller.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    imdb_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    i18n\n                                    \n                                                I18nContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get_votes\n                        \n                    \n                \n            \n            \n                \n                    \n                    get_votes(user: JwtUser, i18n: I18nContext)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'GET imdb_ids for the movies, the given user voted for'})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@Get()\n                \n            \n\n            \n                \n                    Defined in src/routes/vote/vote.controller.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                JwtUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    i18n\n                                    \n                                                I18nContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        save_vote\n                        \n                    \n                \n            \n            \n                \n                    \n                    save_vote(user: JwtUser, imdb_id: string, i18n: I18nContext)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'POST vote for a movie'})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@Post(':imdb_id')\n                \n            \n\n            \n                \n                    Defined in src/routes/vote/vote.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                JwtUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    imdb_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    i18n\n                                    \n                                                I18nContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        unvote\n                        \n                    \n                \n            \n            \n                \n                    \n                    unvote(user: JwtUser, imdb_id: string, i18n: I18nContext)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'DELETE unvote for a movie'})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@Delete(':imdb_id')\n                \n            \n\n            \n                \n                    Defined in src/routes/vote/vote.controller.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                JwtUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    imdb_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    i18n\n                                    \n                                                I18nContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, Post, UseGuards } from \"@nestjs/common\";\nimport { JwtAuthGuard } from \"../auth/jwt-auth.guard\";\nimport { VoteService } from \"./vote.service\";\nimport { User } from \"../../common/decorators/user.decorator\";\nimport { JwtUser } from \"../../types/jwtuser.type\";\nimport { Vote } from \"@prisma/client\";\nimport { ApiBearerAuth, ApiOperation, ApiTags } from \"@nestjs/swagger\";\nimport { I18n, I18nContext } from \"nestjs-i18n\";\nimport { I18nTranslations } from \"../../types/generated/i18n.generated\";\n\n/**\n * Controller for the vote routes\n */\n@ApiTags('vote')\n@Controller('vote')\nexport class VoteController {\n\n  constructor(private readonly voteService: VoteService) {}\n\n  @ApiOperation({ summary: 'GET imdb_ids for the movies, the given user voted for' })\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @Get()\n  async get_votes(@User() user: JwtUser, @I18n() i18n: I18nContext): Promise {\n    return this.voteService.get_votes_user(Number(user.id), i18n);\n  }\n\n  @ApiOperation({ summary: 'GET number of votes for a movie' })\n  @Get(':imdb_id')\n  async get_vote(@Param('imdb_id') imdb_id: string, @I18n() i18n: I18nContext) : Promise {\n    return this.voteService.get_votes(imdb_id, i18n);\n  }\n\n  @ApiOperation({ summary: 'POST vote for a movie' })\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @Post(':imdb_id')\n  async save_vote(@User() user: JwtUser, @Param('imdb_id') imdb_id: string, @I18n() i18n: I18nContext) : Promise {\n    return this.voteService.vote(imdb_id, Number(user.id), i18n);\n  }\n\n  @ApiOperation({ summary: 'DELETE unvote for a movie' })\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @Delete(':imdb_id')\n  async unvote(@User() user: JwtUser, @Param('imdb_id') imdb_id: string, @I18n() i18n: I18nContext) : Promise {\n    return this.voteService.unvote(imdb_id, Number(user.id), i18n);\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/VoteDBModule.html":{"url":"modules/VoteDBModule.html","title":"module - VoteDBModule","body":"\n                   \n\n\n\n\n    Modules\n    VoteDBModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_VoteDBModule\n\n\n\ncluster_VoteDBModule_exports\n\n\n\ncluster_VoteDBModule_providers\n\n\n\n\nVoteDBService \n\nVoteDBService \n\n\n\nVoteDBModule\n\nVoteDBModule\n\nVoteDBService  -->\n\nVoteDBModule->VoteDBService \n\n\n\n\n\nPrismaService\n\nPrismaService\n\nVoteDBModule -->\n\nPrismaService->VoteDBModule\n\n\n\n\n\nVoteDBService\n\nVoteDBService\n\nVoteDBModule -->\n\nVoteDBService->VoteDBModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/db_services/votes/voteDB.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                        \n                            VoteDBService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            VoteDBService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { VoteDBService } from './voteDB.service';\nimport { PrismaService } from \"../prisma.service\";\n\n@Module({\n  providers: [VoteDBService, PrismaService],\n  exports: [VoteDBService]\n})\nexport class VoteDBModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/VoteDBService.html":{"url":"injectables/VoteDBService.html","title":"injectable - VoteDBService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  VoteDBService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/db_services/votes/voteDB.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                add\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                delete_all\n                            \n                            \n                                    Async\n                                delete_all_user\n                            \n                            \n                                    Async\n                                get\n                            \n                            \n                                    Async\n                                get_most_voted\n                            \n                            \n                                    Async\n                                get_num_of_votes\n                            \n                            \n                                    Async\n                                get_votes_movie\n                            \n                            \n                                    Async\n                                get_votes_user\n                            \n                            \n                                    Async\n                                has\n                            \n                            \n                                    Async\n                                num_of\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/common/db_services/votes/voteDB.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        add\n                        \n                    \n                \n            \n            \n                \n                    \n                    add(data: Prisma.VoteCreateInput)\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/votes/voteDB.service.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            Prisma.VoteCreateInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(data: Prisma.VoteWhereUniqueInput)\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/votes/voteDB.service.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            Prisma.VoteWhereUniqueInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete_all\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete_all(imdb_id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/votes/voteDB.service.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    imdb_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete_all_user\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete_all_user(user_id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/votes/voteDB.service.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user_id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(data: Prisma.VoteWhereUniqueInput)\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/votes/voteDB.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            Prisma.VoteWhereUniqueInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get_most_voted\n                        \n                    \n                \n            \n            \n                \n                    \n                    get_most_voted(count: number)\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/votes/voteDB.service.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    count\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get_num_of_votes\n                        \n                    \n                \n            \n            \n                \n                    \n                    get_num_of_votes(imdb_id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/votes/voteDB.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    imdb_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get_votes_movie\n                        \n                    \n                \n            \n            \n                \n                    \n                    get_votes_movie(imdb_id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/votes/voteDB.service.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    imdb_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get_votes_user\n                        \n                    \n                \n            \n            \n                \n                    \n                    get_votes_user(user_id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/votes/voteDB.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user_id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        has\n                        \n                    \n                \n            \n            \n                \n                    \n                    has(user_id: Prisma.UserWhereUniqueInput, imdb_id: Prisma.MovieWhereUniqueInput)\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/votes/voteDB.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user_id\n                                    \n                                                Prisma.UserWhereUniqueInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    imdb_id\n                                    \n                                            Prisma.MovieWhereUniqueInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        num_of\n                        \n                    \n                \n            \n            \n                \n                    \n                    num_of(user_id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/votes/voteDB.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user_id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PrismaService } from \"../prisma.service\";\nimport { Prisma } from \"@prisma/client\";\n\n@Injectable()\nexport class VoteDBService {\n\n  constructor(private readonly prisma: PrismaService) {}\n\n  async get(data : Prisma.VoteWhereUniqueInput) {\n    return await this.prisma.vote.findUnique({\n      where: data,\n    });\n  }\n\n  async has(user_id: Prisma.UserWhereUniqueInput, imdb_id: Prisma.MovieWhereUniqueInput) {\n    return await this.prisma.vote.findFirst({\n      where: {\n        user: user_id,\n        movie: imdb_id\n      }\n    })\n  }\n\n  async num_of(user_id: number) {\n    return await this.prisma.vote.count({\n      where: {\n        user: { id: user_id }\n      }\n    })\n  }\n\n  async get_num_of_votes(imdb_id: string) {\n    return await this.prisma.vote.count({\n      where: { movie: { imdb_id } }\n    });\n  }\n\n  async get_votes_user(user_id: number) {\n    return await this.prisma.vote.findMany({\n      where: { user: { id: user_id } },\n      select: { imdb_id: true }\n    });\n  }\n\n  async get_votes_movie(imdb_id: string) {\n    return await this.prisma.vote.findMany({\n      where: { movie: { imdb_id } },\n      select: { user: true }\n    })\n  }\n\n  async get_most_voted(count: number) {\n    return await this.prisma.vote.groupBy({\n      by: ['imdb_id'],\n      _count: {\n        user_id: true,\n      },\n      orderBy: {\n        _count: {\n          user_id: 'desc'\n        }\n      },\n      take: count,\n    })\n  }\n\n  async add(data: Prisma.VoteCreateInput) {\n    return await this.prisma.vote.create({ data });\n  }\n\n  async delete(data : Prisma.VoteWhereUniqueInput) {\n    return await this.prisma.vote.delete({ where: data });\n  }\n\n  async delete_all(imdb_id: string) {\n    return await this.prisma.vote.deleteMany({ where: { imdb_id } });\n  }\n\n  async delete_all_user(user_id: number) {\n    return await this.prisma.vote.deleteMany({ where: { user_id } });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/VoteModule.html":{"url":"modules/VoteModule.html","title":"module - VoteModule","body":"\n                   \n\n\n\n\n    Modules\n    VoteModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_VoteModule\n\n\n\ncluster_VoteModule_providers\n\n\n\ncluster_VoteModule_imports\n\n\n\n\nMovieDBModule\n\nMovieDBModule\n\n\n\nVoteModule\n\nVoteModule\n\nVoteModule -->\n\nMovieDBModule->VoteModule\n\n\n\n\n\nUserDBModule\n\nUserDBModule\n\nVoteModule -->\n\nUserDBModule->VoteModule\n\n\n\n\n\nVoteDBModule\n\nVoteDBModule\n\nVoteModule -->\n\nVoteDBModule->VoteModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nVoteModule -->\n\nPrismaService->VoteModule\n\n\n\n\n\nVoteService\n\nVoteService\n\nVoteModule -->\n\nVoteService->VoteModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/routes/vote/vote.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                        \n                            VoteService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            VoteController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            MovieDBModule\n                        \n                        \n                            UserDBModule\n                        \n                        \n                            VoteDBModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { VoteController } from \"./vote.controller\";\nimport { VoteService } from \"./vote.service\";\nimport { VoteDBModule } from \"../../common/db_services/votes/voteDB.module\";\nimport { UserDBModule } from \"../../common/db_services/users/userDB.module\";\nimport { MovieDBModule } from \"../../common/db_services/movies/movieDB.module\";\nimport { PrismaService } from \"../../common/db_services/prisma.service\";\n\n@Module({\n  imports: [VoteDBModule, UserDBModule, MovieDBModule],\n  controllers: [VoteController],\n  providers: [PrismaService, VoteService]\n})\nexport class VoteModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/VoteService.html":{"url":"injectables/VoteService.html","title":"injectable - VoteService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  VoteService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/vote/vote.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                max_votes\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                get_votes\n                            \n                            \n                                    Async\n                                get_votes_user\n                            \n                            \n                                    Async\n                                unvote\n                            \n                            \n                                    Async\n                                vote\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(movieDBService: MovieDBService, userDBService: UserDBService, voteDBService: VoteDBService)\n                    \n                \n                        \n                            \n                                Defined in src/routes/vote/vote.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        movieDBService\n                                                  \n                                                        \n                                                                        MovieDBService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userDBService\n                                                  \n                                                        \n                                                                        UserDBService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        voteDBService\n                                                  \n                                                        \n                                                                        VoteDBService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get_votes\n                        \n                    \n                \n            \n            \n                \n                    \n                    get_votes(imdb_id: string, i18n: I18nContext)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/vote/vote.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    imdb_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    i18n\n                                    \n                                                I18nContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get_votes_user\n                        \n                    \n                \n            \n            \n                \n                    \n                    get_votes_user(user_id: number, i18n: I18nContext)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/vote/vote.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user_id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    i18n\n                                    \n                                                I18nContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        unvote\n                        \n                    \n                \n            \n            \n                \n                    \n                    unvote(imdb_id: string, user_id: number, i18n: I18nContext)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/vote/vote.service.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    imdb_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user_id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    i18n\n                                    \n                                                I18nContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        vote\n                        \n                    \n                \n            \n            \n                \n                    \n                    vote(imdb_id: string, user_id: number, i18n: I18nContext)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/vote/vote.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    imdb_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user_id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    i18n\n                                    \n                                                I18nContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        max_votes\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Number(process.env.MAX_VOTES)\n                    \n                \n                    \n                        \n                                Defined in src/routes/vote/vote.service.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, InternalServerErrorException } from \"@nestjs/common\";\nimport { MovieDBService } from \"../../common/db_services/movies/movieDB.service\";\nimport { UserDBService } from \"../../common/db_services/users/userDB.service\";\nimport { VoteDBService } from \"../../common/db_services/votes/voteDB.service\";\nimport { Movie, Prisma } from \"@prisma/client\";\nimport { I18nContext } from \"nestjs-i18n\";\nimport { I18nTranslations } from \"../../types/generated/i18n.generated\";\n\n@Injectable()\nexport class VoteService {\n\n  private readonly max_votes = Number(process.env.MAX_VOTES)\n\n  constructor(private readonly movieDBService: MovieDBService,\n              private readonly userDBService: UserDBService,\n              private readonly voteDBService: VoteDBService) {}\n\n  async get_votes(imdb_id: string, i18n: I18nContext) {\n    try {\n      return await this.voteDBService.get_num_of_votes(imdb_id)\n    } catch (e) {\n      throw new InternalServerErrorException(i18n.t('vote.exception.internal_server_error'))\n    }\n  }\n\n  async get_votes_user(user_id: number, i18n: I18nContext) {\n    try {\n      return (await this.voteDBService.get_votes_user(user_id)).map(vote => vote.imdb_id)\n    } catch (e) {\n      throw new InternalServerErrorException(i18n.t('vote.exception.internal_server_error'))\n    }\n  }\n\n  async vote(imdb_id: string, user_id: number, i18n: I18nContext) {\n    const num_of_votes = await this.voteDBService.num_of(user_id)\n    if (num_of_votes >= this.max_votes) {\n      throw new ConflictException(i18n.t('vote.exception.conflict_max_voted', { args: { max_votes: this.max_votes } }))\n    }\n\n    const voteDB_data: Prisma.VoteCreateInput = {\n      movie: { connect: { imdb_id } } as Prisma.MovieCreateNestedOneWithoutVoteInput,\n      user: { connect: { id: user_id } } as Prisma.UserCreateNestedOneWithoutVoteInput\n    }\n\n    try {\n      return await this.voteDBService.add(voteDB_data)\n    } catch (e) {\n      throw new ConflictException(i18n.t('vote.exception.conflict_exists'))\n    }\n  }\n\n  async unvote(imdb_id: string, user_id: number, i18n: I18nContext) {\n    const movie = await this.movieDBService.get(imdb_id) as Movie\n    if (movie.proposer_id === user_id) {\n      throw new ConflictException(i18n.t('vote.exception.conflict_unvote_proposed'))\n    }\n\n    const voteDB_data: Prisma.VoteWhereUniqueInput = {\n      imdb_id_user_id: { imdb_id, user_id: user_id }\n    }\n\n    try {\n      return await this.voteDBService.delete(voteDB_data)\n    } catch (e) {\n      throw new ConflictException(i18n.t('vote.exception.conflict_not_exists'))\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/WatchListDBModule.html":{"url":"modules/WatchListDBModule.html","title":"module - WatchListDBModule","body":"\n                   \n\n\n\n\n    Modules\n    WatchListDBModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_WatchListDBModule\n\n\n\ncluster_WatchListDBModule_exports\n\n\n\ncluster_WatchListDBModule_providers\n\n\n\n\nWatchListDBService \n\nWatchListDBService \n\n\n\nWatchListDBModule\n\nWatchListDBModule\n\nWatchListDBService  -->\n\nWatchListDBModule->WatchListDBService \n\n\n\n\n\nPrismaService\n\nPrismaService\n\nWatchListDBModule -->\n\nPrismaService->WatchListDBModule\n\n\n\n\n\nWatchListDBService\n\nWatchListDBService\n\nWatchListDBModule -->\n\nWatchListDBService->WatchListDBModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/db_services/watchlist/watchListDB.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                        \n                            WatchListDBService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            WatchListDBService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { WatchListDBService } from './watchListDB.service';\nimport { PrismaService } from \"../prisma.service\";\n\n@Module({\n  providers: [WatchListDBService, PrismaService],\n  exports: [WatchListDBService]\n})\nexport class WatchListDBModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/WatchListDBService.html":{"url":"injectables/WatchListDBService.html","title":"injectable - WatchListDBService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  WatchListDBService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/db_services/watchlist/watchListDB.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                add\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                get_all\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/common/db_services/watchlist/watchListDB.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        add\n                        \n                    \n                \n            \n            \n                \n                    \n                    add(data: Prisma.WatchListCreateInput)\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/watchlist/watchListDB.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            Prisma.WatchListCreateInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(imdb_id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/watchlist/watchListDB.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    imdb_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get_all\n                        \n                    \n                \n            \n            \n                \n                    \n                    get_all()\n                \n            \n\n\n            \n                \n                    Defined in src/common/db_services/watchlist/watchListDB.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { PrismaService } from \"../prisma.service\";\nimport { Prisma } from \"@prisma/client\";\n\n@Injectable()\nexport class WatchListDBService {\n\n  constructor(private readonly prisma: PrismaService) {}\n\n  async get_all() {\n    return await this.prisma.watchList.findMany()\n  }\n\n  async add(data: Prisma.WatchListCreateInput) {\n    return await this.prisma.watchList.create({ data })\n  }\n\n  async delete(imdb_id: string) {\n    return await this.prisma.watchList.delete({\n      where: {\n        imdb_id\n      }\n    })\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/WatchListJob.html":{"url":"injectables/WatchListJob.html","title":"injectable - WatchListJob","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  WatchListJob\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/event_service/jobs/watchlist.job.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                num_of_movies\n                            \n                            \n                                    Private\n                                    Readonly\n                                pause_time\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                run\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(voteDBService: VoteDBService, watchListDBService: WatchListDBService, movieDBService: MovieDBService, announceJob: AnnounceJob)\n                    \n                \n                        \n                            \n                                Defined in src/common/event_service/jobs/watchlist.job.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        voteDBService\n                                                  \n                                                        \n                                                                        VoteDBService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        watchListDBService\n                                                  \n                                                        \n                                                                        WatchListDBService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        movieDBService\n                                                  \n                                                        \n                                                                        MovieDBService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        announceJob\n                                                  \n                                                        \n                                                                        AnnounceJob\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        run\n                        \n                    \n                \n            \n            \n                \n                    \n                    run()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Cron(: string)\n                \n            \n\n            \n                \n                    Defined in src/common/event_service/jobs/watchlist.job.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        num_of_movies\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Number(process.env.NUM_OF_MOVIES as string)\n                    \n                \n                    \n                        \n                                Defined in src/common/event_service/jobs/watchlist.job.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        pause_time\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Number(process.env.PAUSE_TIME_MIN as string) * 60000\n                    \n                \n                    \n                        \n                                Defined in src/common/event_service/jobs/watchlist.job.ts:14\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { WatchListDBService } from \"../../db_services/watchlist/watchListDB.service\";\nimport { VoteDBService } from \"../../db_services/votes/voteDB.service\";\nimport { MovieDBService } from \"../../db_services/movies/movieDB.service\";\nimport { parseExpression } from \"cron-parser\"\nimport { Movie, Prisma } from \"@prisma/client\";\nimport { Cron } from \"@nestjs/schedule\";\nimport { AnnounceJob } from \"./announce.job\";\n\n@Injectable()\nexport class WatchListJob {\n\n  private readonly num_of_movies = Number(process.env.NUM_OF_MOVIES as string);\n  private readonly pause_time = Number(process.env.PAUSE_TIME_MIN as string) * 60000;\n\n  constructor(private readonly voteDBService: VoteDBService,\n              private readonly watchListDBService: WatchListDBService,\n              private readonly movieDBService: MovieDBService,\n              private readonly announceJob: AnnounceJob) {}\n\n  @Cron(process.env.SCHEDULE_WATCHLIST as string)\n  async run() {\n    console.log('Watchlist job started');\n    const top_movies = await this.voteDBService.get_most_voted(this.num_of_movies)\n    let start_time = parseExpression(process.env.SCHEDULE_START as string).next().toDate()\n\n    for (const movie of top_movies) {\n      const data = {\n        movie: { connect: { imdb_id: movie.imdb_id } },\n        start_time: start_time,\n      } as Prisma.WatchListCreateInput\n      await this.watchListDBService.add(data)\n\n      const movie_data = await this.movieDBService.get(movie.imdb_id) as Movie\n      const round_duration_ms = (Math.round(movie_data.runtime/15) * 15) * 60000\n      start_time = new Date(start_time.getTime() + round_duration_ms + this.pause_time)\n    }\n\n    await this.announceJob.run()\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/WatchlistExtType.html":{"url":"interfaces/WatchlistExtType.html","title":"interface - WatchlistExtType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  WatchlistExtType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/movie.types/watchlist_ext.type.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            imdb_id\n                                        \n                                \n                                \n                                        \n                                            interested\n                                        \n                                \n                                \n                                        \n                                            link\n                                        \n                                \n                                \n                                        \n                                            start_time\n                                        \n                                \n                                \n                                        \n                                            title\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        imdb_id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        imdb_id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        interested\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        interested:     number[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        link\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        link:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        start_time\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        start_time:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface WatchlistExtType {\n  imdb_id: string,\n  title: string,\n  link: string,\n  start_time: Date,\n  interested: number[]\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                client/src/router/router.ts\n            \n            variable\n            router\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/src/util/api.ts\n            \n            function\n            call\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/src/util/cookie.ts\n            \n            variable\n            get_cookie\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/src/util/cookie.ts\n            \n            variable\n            get_cookie_all\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/src/util/cookie.ts\n            \n            variable\n            remove_cookie\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/src/util/cookie.ts\n            \n            variable\n            set_cookie\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/src/util/store.ts\n            \n            variable\n            store\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/db_services/histroy/historyDB.service.ts\n            \n            injectable\n            HistoryDBService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/common/db_services/movies/movieDB.service.ts\n            \n            injectable\n            MovieDBService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/common/db_services/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/db_services/users/userDB.service.ts\n            \n            injectable\n            UserDBService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/common/db_services/votes/voteDB.service.ts\n            \n            injectable\n            VoteDBService\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/common/db_services/watchlist/watchListDB.service.ts\n            \n            injectable\n            WatchListDBService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/common/decorators/user.decorator.ts\n            \n            variable\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/event_service/jobs/announce.job.ts\n            \n            injectable\n            AnnounceJob\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/common/event_service/jobs/history.job.ts\n            \n            injectable\n            HistoryJob\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/event_service/jobs/watchlist.job.ts\n            \n            injectable\n            WatchListJob\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/common/middleware/logger.middleware.ts\n            \n            injectable\n            LoggerMiddleware\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/util_services/discord.service.ts\n            \n            injectable\n            DiscordService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/common/util_services/email.service.ts\n            \n            injectable\n            EmailService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/common/util_services/email.service.ts\n            \n            variable\n            nodemailer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/util_services/gravatar.service.ts\n            \n            injectable\n            GravatarService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/util_services/password.service.ts\n            \n            injectable\n            PasswordService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/util_services/password.service.ts\n            \n            variable\n            bcrypt\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/validation/config.validation.ts\n            \n            variable\n            config_validation_schema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/validation/patterns/cron.pattern.ts\n            \n            variable\n            cron_pattern\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/validation/patterns/discord_webhook.pattern.ts\n            \n            variable\n            discord_webhook_pattern\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/validation/patterns/imdb_id.pattern.ts\n            \n            variable\n            imdb_id_pattern\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/validation/patterns/name.pattern.ts\n            \n            variable\n            name_pattern\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/validation/patterns/password.pattern.ts\n            \n            variable\n            password_pattern\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/validation/patterns/username.pattern.ts\n            \n            variable\n            username_pattern\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/routes/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                src/routes/auth/auth.guard.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/routes/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/routes/auth/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/routes/auth/jwt.stategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/routes/auth/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/routes/movie/movie.controller.ts\n            \n            controller\n            MovieController\n            \n                14 %\n                (1/7)\n            \n        \n        \n            \n                \n                src/routes/movie/movie.service.ts\n            \n            injectable\n            MovieService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/routes/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                10 %\n                (1/10)\n            \n        \n        \n            \n                \n                src/routes/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/routes/vote/vote.controller.ts\n            \n            controller\n            VoteController\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/routes/vote/vote.service.ts\n            \n            injectable\n            VoteService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/types/jwtuser.type.ts\n            \n            interface\n            JwtUser\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/types/movie.types/movie_ext.type.ts\n            \n            interface\n            MovieExtType\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/types/movie.types/watchlist_ext.type.ts\n            \n            interface\n            WatchlistExtType\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/types/res.dto.ts\n            \n            class\n            ResDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/types/user.dto/email_opt_in.dto.ts\n            \n            class\n            EmailOptInDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/types/user.dto/login.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/types/user.dto/password.dto.ts\n            \n            class\n            PasswordDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/types/user.dto/password_new.dto.ts\n            \n            class\n            PasswordNewDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/types/user.dto/profile.dto.ts\n            \n            class\n            ProfileDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/types/user.dto/register.dto.ts\n            \n            class\n            RegisterDto\n            \n                0 %\n                (0/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/config : ^2.2.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/jwt : ^9.0.0\n        \n            @nestjs/passport : ^9.0.0\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/schedule : ^2.1.0\n        \n            @nestjs/serve-static : ^3.0.0\n        \n            @nestjs/swagger : ^6.1.4\n        \n            @prisma/client : ^4.5.0\n        \n            bcrypt : ^5.0.1\n        \n            cron-parser : ^4.7.0\n        \n            crypto-js : ^4.1.1\n        \n            cuid : ^2.1.8\n        \n            discord.js : ^14.6.0\n        \n            helmet : ^5.1.1\n        \n            imdb-api : ^4.4.1\n        \n            joi : ^17.7.0\n        \n            nestjs-i18n : ^10.1.0\n        \n            nodemailer : ^6.8.0\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            prisma : ^4.7.1\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            call   (client/.../api.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    client/src/util/api.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        call\n                        \n                    \n                \n            \n            \n                \ncall(route: string, method?: string, body?: any)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    route\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    method\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n\nMovie Monday Manager\nA full stack management application for voting movies for cyclic movie events.\nFeatures\n\naccount-registration with email verification\nusers can vote, add and remove movies\nusers can manage own profile\nclean and responsive Bootstrap-UI\n100% usable without client (via REST-API)\nmulti lang support (currently english and german)\nautomatic management of voted movies around movie events\nautomatic notifications for movie events with the list of interested users\n\nInstallation\n\nYou need node.js installed (version 18.12.1 or newer).\nDownload the newest version of the code\nRename the .env file from .env.tmp to .env\nOpen the configuration file (now .env) and set values (see config-section below).\nBuild the project with npm run build:all\nRun the server with npm run start:prod\n\nConfiguration\nThe configuration file is located in the root directory of the project and is called .env. It will be validated on startup via the Joi library. To see the validation schema, see the config.validation.ts file.\nLanguage\nThis project support multiple languages and already has english (en) and german (de) implemented. The clients language is changeable via a html select element. The backend language reacts on the Accept-Language header. The localisation files are located in the locales folder in src of the different projects! To add a language, simply add a new localisation files in client and backend plus create a new option in the client select! The default language is always english! \nAPI-Docs\nThis project is 100% usable without client via a REST-API!\nThe routes start with the prefix /api (e.g. http://[::1]:3000/api). \nThe api is documented with Swagger at /docs/api route of the website (e.g. http://[::1]:3000/docs/api).\nDev-Docs\nThis small guide assumes, that you have already some knowledge about node.js and the used frameworks. \nThe whole project is written in Typescript.\nMoMoMat (Backend)\nThe backend uses the NestJS framework to handle the REST-API with all its corresponding services. It is also documented with compodoc at /docs/backend route of the website (e.g. http://[::1]:3000/docs/backend).\nThis project (/src folder) is dived into 3 main parts: \nThe routes (controllers) to handle incoming requests; \na common section with lots of usefully functions and classes to support the other parts; \nand type definitions for internal data structures and data transmission objects (dto's).\nTo run the backend in development mode, you need to npm install the dependencies and run npm run start:dev in the root folder of the project. Note, that the client has to be built via npm run build:client because the client is only statically served from the  /client/dist folder. So every change in the client has to be built to show up in the backend project. Also note, that the database should also be built (see MoMoMat-DB below). The backend can generate docs as static website by run npm run build:docs and shown by npm run start:docs. The backend itself can be build with npm run build. The build files are located in the /dist folder. The npm run build:all command can be used to build everything in with just one step.\nMoMoMat-Client (Frontend)\nThe frontend uses the Vue.js framework to handle the user interface. \nIt can be found in the /client folder.\nThe frontend uses the Vue Router defined in /client/src/router folder to handle the navigation between the different pages as singe page application. \nThe router shows different view components depending on the current route. These view components are defined in the /client/src/views folder. Some views use special components defined in the /client/src/components folder.\nTo run the client in development mode, you need to npm install the dependencies and run npm run dev in the /client folder.\nBut in this mode, the backend is disabled and the website cannot interact with any backend route. \nTo build the client for production, you need to run npm run build in the /client folder. The build files are located in the /client/dist folder.\nMoMoMat-DB (Database)\nThe database use Prisma as ORM to handle the database connection and management. \nIts database schema is defined in the /prisma folder. \nWhich database is used under the hood can be defined in the .env file.\nThe scheme can be formatted with npx prisma format in /prisma folder. \nA database can be created via npx prisma migrate dev from /prisma folder or npm run build:db from root folder. \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2022 Elias Schaut\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EventModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HistoryDBModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MovieDBModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MovieModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserDBModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        VoteDBModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        VoteModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        WatchListDBModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_EventModule\n\n\n\ncluster_EventModule_imports\n\n\n\ncluster_EventModule_providers\n\n\n\ncluster_HistoryDBModule\n\n\n\ncluster_HistoryDBModule_exports\n\n\n\ncluster_HistoryDBModule_providers\n\n\n\ncluster_MovieDBModule\n\n\n\ncluster_MovieDBModule_exports\n\n\n\ncluster_MovieDBModule_providers\n\n\n\ncluster_MovieModule\n\n\n\ncluster_MovieModule_providers\n\n\n\ncluster_UserDBModule\n\n\n\ncluster_UserDBModule_exports\n\n\n\ncluster_UserDBModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_VoteDBModule\n\n\n\ncluster_VoteDBModule_exports\n\n\n\ncluster_VoteDBModule_providers\n\n\n\ncluster_WatchListDBModule\n\n\n\ncluster_WatchListDBModule_exports\n\n\n\ncluster_WatchListDBModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nEventModule\n\nEventModule\n\nAppModule -->\n\nEventModule->AppModule\n\n\n\n\n\nMovieModule\n\nMovieModule\n\nAppModule -->\n\nMovieModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nVoteModule\n\nVoteModule\n\nAppModule -->\n\nVoteModule->AppModule\n\n\n\n\n\nUserDBModule\n\nUserDBModule\n\nAuthModule -->\n\nUserDBModule->AuthModule\n\n\n\nEventModule -->\n\nUserDBModule->EventModule\n\n\n\nMovieModule -->\n\nUserDBModule->MovieModule\n\n\n\nUserModule -->\n\nUserDBModule->UserModule\n\n\n\nVoteModule -->\n\nUserDBModule->VoteModule\n\n\n\n\n\nUserDBService \n\nUserDBService \n\nUserDBService  -->\n\nUserDBModule->UserDBService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nEmailService\n\nEmailService\n\nAuthModule -->\n\nEmailService->AuthModule\n\n\n\nEventModule -->\n\nEmailService->EventModule\n\n\n\nUserModule -->\n\nEmailService->UserModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nPasswordService\n\nPasswordService\n\nAuthModule -->\n\nPasswordService->AuthModule\n\n\n\nUserModule -->\n\nPasswordService->UserModule\n\n\n\nUserDBModule -->\n\nPasswordService->UserDBModule\n\n\n\n\n\nHistoryDBModule\n\nHistoryDBModule\n\nEventModule -->\n\nHistoryDBModule->EventModule\n\n\n\nMovieModule -->\n\nHistoryDBModule->MovieModule\n\n\n\n\n\nHistoryDBService \n\nHistoryDBService \n\nHistoryDBService  -->\n\nHistoryDBModule->HistoryDBService \n\n\n\n\n\nMovieDBModule\n\nMovieDBModule\n\nEventModule -->\n\nMovieDBModule->EventModule\n\n\n\nMovieModule -->\n\nMovieDBModule->MovieModule\n\n\n\nUserModule -->\n\nMovieDBModule->UserModule\n\n\n\nVoteModule -->\n\nMovieDBModule->VoteModule\n\n\n\n\n\nMovieDBService \n\nMovieDBService \n\nMovieDBService  -->\n\nMovieDBModule->MovieDBService \n\n\n\n\n\nVoteDBModule\n\nVoteDBModule\n\nEventModule -->\n\nVoteDBModule->EventModule\n\n\n\nMovieModule -->\n\nVoteDBModule->MovieModule\n\n\n\nUserModule -->\n\nVoteDBModule->UserModule\n\n\n\nVoteModule -->\n\nVoteDBModule->VoteModule\n\n\n\n\n\nVoteDBService \n\nVoteDBService \n\nVoteDBService  -->\n\nVoteDBModule->VoteDBService \n\n\n\n\n\nWatchListDBModule\n\nWatchListDBModule\n\nEventModule -->\n\nWatchListDBModule->EventModule\n\n\n\nMovieModule -->\n\nWatchListDBModule->MovieModule\n\n\n\nUserModule -->\n\nWatchListDBModule->UserModule\n\n\n\n\n\nWatchListDBService \n\nWatchListDBService \n\nWatchListDBService  -->\n\nWatchListDBModule->WatchListDBService \n\n\n\n\n\nAnnounceJob\n\nAnnounceJob\n\nEventModule -->\n\nAnnounceJob->EventModule\n\n\n\n\n\nDiscordService\n\nDiscordService\n\nEventModule -->\n\nDiscordService->EventModule\n\n\n\n\n\nHistoryJob\n\nHistoryJob\n\nEventModule -->\n\nHistoryJob->EventModule\n\n\n\n\n\nWatchListJob\n\nWatchListJob\n\nEventModule -->\n\nWatchListJob->EventModule\n\n\n\n\n\nHistoryDBService\n\nHistoryDBService\n\nHistoryDBModule -->\n\nHistoryDBService->HistoryDBModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nMovieModule -->\n\nPrismaService->MovieModule\n\n\n\nVoteModule -->\n\nPrismaService->VoteModule\n\n\n\nUserDBModule -->\n\nPrismaService->UserDBModule\n\n\n\nHistoryDBModule -->\n\nPrismaService->HistoryDBModule\n\n\n\nMovieDBModule -->\n\nPrismaService->MovieDBModule\n\n\n\nVoteDBModule -->\n\nPrismaService->VoteDBModule\n\n\n\nWatchListDBModule -->\n\nPrismaService->WatchListDBModule\n\n\n\n\n\nMovieDBService\n\nMovieDBService\n\nMovieDBModule -->\n\nMovieDBService->MovieDBModule\n\n\n\n\n\nMovieService\n\nMovieService\n\nMovieModule -->\n\nMovieService->MovieModule\n\n\n\n\n\nVoteService\n\nVoteService\n\nMovieModule -->\n\nVoteService->MovieModule\n\n\n\nVoteModule -->\n\nVoteService->VoteModule\n\n\n\n\n\nUserDBService\n\nUserDBService\n\nUserDBModule -->\n\nUserDBService->UserDBModule\n\n\n\n\n\nGravatarService\n\nGravatarService\n\nUserModule -->\n\nGravatarService->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\nVoteDBService\n\nVoteDBService\n\nVoteDBModule -->\n\nVoteDBService->VoteDBModule\n\n\n\n\n\nWatchListDBService\n\nWatchListDBService\n\nWatchListDBModule -->\n\nWatchListDBService->WatchListDBModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        11 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    22 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    7 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 1.0.0-alpha.6\n        \n            Description : A website for adding and voting movies for the next watch party\n        \n            License : MIT\n        \n            Author : EliasSchaut\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            I18nPath   (src/.../i18n.generated.ts)\n                        \n                        \n                            I18nTranslations   (src/.../i18n.generated.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/types/generated/i18n.generated.ts\n    \n    \n        \n            \n                \n                    \n                    I18nPath\n                \n            \n            \n                \n                            Path\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    I18nTranslations\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bcrypt   (src/.../password.service.ts)\n                        \n                        \n                            config_validation_schema   (src/.../config.validation.ts)\n                        \n                        \n                            cron_pattern   (src/.../cron.pattern.ts)\n                        \n                        \n                            discord_webhook_pattern   (src/.../discord_webhook.pattern.ts)\n                        \n                        \n                            get_cookie   (client/.../cookie.ts)\n                        \n                        \n                            get_cookie_all   (client/.../cookie.ts)\n                        \n                        \n                            imdb_id_pattern   (src/.../imdb_id.pattern.ts)\n                        \n                        \n                            name_pattern   (src/.../name.pattern.ts)\n                        \n                        \n                            nodemailer   (src/.../email.service.ts)\n                        \n                        \n                            password_pattern   (src/.../password.pattern.ts)\n                        \n                        \n                            remove_cookie   (client/.../cookie.ts)\n                        \n                        \n                            router   (client/.../router.ts)\n                        \n                        \n                            set_cookie   (client/.../cookie.ts)\n                        \n                        \n                            store   (client/.../store.ts)\n                        \n                        \n                               (src/.../main.ts)\n                        \n                        \n                            User   (src/.../user.decorator.ts)\n                        \n                        \n                            username_pattern   (src/.../username.pattern.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/util_services/password.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bcrypt\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require('bcrypt')\n                    \n                \n\n\n        \n    \n\n    src/common/validation/config.validation.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        config_validation_schema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Joi.object({\n  PROJECT_NAME: Joi.string().required()\n    .description('The name of the project'),\n  FRONTEND_URL: Joi.string().required().uri()\n    .description('The URL of the client application (frontend). This is used for CORS and the email confirmation link'),\n  PORT: Joi.number().required().default(\"3000\").port()\n    .description('The port the server should listen on'),\n\n  DATABASE_URL: Joi.string().required().default(\"file:./dev.db\")\n    .description('The URL of the database'),\n  JWT_SECRET: Joi.string().required().default(\"secret\")\n    .description('The secret used to sign the JWT tokens. The JWT tokens are used to authenticate the users'),\n  JWT_EXPIRATION: Joi.string().required().default(\"2h\")\n    .description('The expiration time of the JWT tokens'),\n  OMDB_API_KEY: Joi.string().required().token()\n    .description('The API key for the OMDB API. Request a free key at https://www.omdbapi.com/apikey.aspx'),\n  MAX_VOTES: Joi.number().required().default(\"20\")\n    .description('The maximum number of votes a user can cast in total for all movies'),\n  MAX_PROPOSEABLE_MOVIES: Joi.number().required().default(\"5\")\n    .description('The maximum number of movies a user can propose'),\n\n  SCHEDULE_WATCHLIST: Joi.string().required().default(\"0 15 * * 1\").pattern(cron_pattern)\n    .description('The cron pattern for the schedule that creates the watchlist for new movies and sends notifications per mail and Discord webhook'),\n  SCHEDULE_START: Joi.string().required().default(\"0 19 * * 1\").pattern(cron_pattern)\n    .description('The cron pattern for the beginning of the movie event. This value is used to calculate the start times of the movies in the watchlist'),\n  SCHEDULE_HISTORY: Joi.string().required().default(\"45 23 * * 1\").pattern(cron_pattern)\n    .description('The cron pattern for the schedule that creates the history for the movies in the watchlist and clears the watchlist'),\n  PAUSE_TIME_MIN: Joi.number().required().default(\"15\")\n    .description('The minimum pause time between two movies in minutes'),\n  NUM_OF_MOVIES: Joi.number().required().default(\"2\")\n    .description('The number of movies that will be in the watchlist at the same time'),\n\n  EMAIL_HOST: Joi.string().required().domain()\n    .description('The host of the SMTP server used to send emails'),\n  EMAIL_PORT: Joi.number().required().default(\"587\")\n    .description('The port of the SMTP server used to send emails'),\n  EMAIL_HOST_USER: Joi.string().required().email()\n    .description('The username of the SMTP server used to send emails'),\n  EMAIL_HOST_PASSWORD: Joi.string().required()\n    .description('The password of the SMTP server used to send emails'),\n\n  DISCORD_ENABLE: Joi.boolean().required().default(\"false\")\n    .description('Whether the Discord webhook should be used to send notifications'),\n  DISCORD_WEBHOOK_URL: Joi.string().when('DISCORD_ENABLE', { is: true, then: Joi.required() }).pattern(discord_webhook_pattern)\n    .description('The URL of the Discord webhook used to send notifications. This is optional if DISCORD_ENABLE is false'),\n})\n                    \n                \n\n\n        \n    \n\n    src/common/validation/patterns/cron.pattern.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        cron_pattern\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /(@(annually|yearly|monthly|weekly|daily|hourly|reboot))|(@every (\\d+(ns|us|µs|ms|s|m|h))+)|((((\\d+,)+\\d+|(\\d+(\\/|-)\\d+)|\\d+|\\*) ?){5,7})/\n                    \n                \n\n\n        \n    \n\n    src/common/validation/patterns/discord_webhook.pattern.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        discord_webhook_pattern\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^https:\\/\\/discord.com\\/api\\/webhooks\\/[0-9]+\\/.+$/\n                    \n                \n\n\n        \n    \n\n    client/src/util/cookie.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        get_cookie\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (key: string) => {\n  return Cookies.get(key)\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get_cookie_all\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {\n  return Cookies.get()\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove_cookie\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (key: string) => {\n  Cookies.remove(key)\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        set_cookie\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (key: string, value: string) => {\n  Cookies.set(key, value, {\n    expires: 7,\n  })\n}\n                    \n                \n\n\n        \n    \n\n    src/common/validation/patterns/imdb_id.pattern.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        imdb_id_pattern\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^tt[0-9]+$/\n                    \n                \n\n\n        \n    \n\n    src/common/validation/patterns/name.pattern.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        name_pattern\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^[A-Z].{2,20}$/\n                    \n                \n\n\n        \n    \n\n    src/common/util_services/email.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        nodemailer\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require(\"nodemailer\")\n                    \n                \n\n\n        \n    \n\n    src/common/validation/patterns/password.pattern.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        password_pattern\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{8,}$/\n                    \n                \n\n\n        \n    \n\n    client/src/router/router.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        router\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createRouter({\n  history: createWebHistory(import.meta.env.BASE_URL),\n  routes: [\n    {\n      path: '/',\n      name: 'home',\n      component: HomeView\n    },\n    {\n      path: '/login/:challenge?',\n      name: 'login',\n      component: LoginView\n    },\n    {\n      path: '/reset',\n      name: 'reset_request',\n      component: ResetRequestView\n    },\n    {\n      path: '/reset/:challenge',\n      name: 'reset',\n      component: ResetView\n    },\n    {\n      path: '/register',\n      name: 'register',\n      component: RegisterView\n    },\n    {\n      path: '/profile',\n      name: 'profile',\n      component: ProfileView\n    },\n    {\n      path: '/history',\n      name: 'history',\n      component: HistoryView\n    },\n    {\n      path: '/privacy',\n      name: 'privacy',\n      component: PrivacyView\n    },\n    {\n      path: '/docs',\n      name: 'docs',\n      component: DocsView\n    }\n  ]\n})\n                    \n                \n\n\n        \n    \n\n    client/src/util/store.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        store\n                        \n                    \n                \n            \n                \n                    \n                        Default value : reactive({\n  logged_in: false,\n  loading: false,\n  alert: {\n    show: false,\n    msg: \"\",\n    type: \"success\",\n  },\n\n  update_loading(loading: boolean) {\n    this.loading = loading;\n  },\n\n  async update_logged_in() {\n    const check = (await fetch(\"/api/user/check\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": \"Bearer \" + (get_cookie(\"access_token\") ?? \"\"),\n      }\n    }));\n    const data = await check.text()\n    this.logged_in = data === \"true\"\n  },\n\n  generate_type(http_code: number) {\n    if (http_code >= 200 && http_code = 400 && http_code = 500 && http_code \n                    \n                \n\n\n        \n    \n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                        \n                    \n                \n            \n                \n                    \n                        Default value : require('./../package.json')\n                    \n                \n\n\n        \n    \n\n    src/common/decorators/user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        User\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: unknown, ctx: ExecutionContext) : JwtUser => {\n    const request = ctx.switchToHttp().getRequest();\n    return request.user;\n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/common/validation/patterns/username.pattern.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        username_pattern\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$/\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
